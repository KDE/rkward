<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN" "dtd/kdedbx45.dtd" [
  <!ENTITY rkward '<application
>RKWard</application
>'>
  <!ENTITY R '<application
>R</application
>'>
  <!ENTITY javascript 'JavaScript'>
  <!ENTITY pluginmap '<literal role="extension"
>.pluginmap</literal
>'>
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % Dutch "INCLUDE"
><!-- change language only here -->
  
  
  <!-- Do not define any other entities; instead, use the entities
       from kde-genent.entities and $LANG/user.entities. -->
]>
<!--- This file is part of the RKWard project (https://rkward.kde.org).
SPDX-FileCopyrightText: by Thomas Friedrichsmeier <thomas.friedrichsmeier@kdemail.net>
SPDX-FileCopyrightText: by Meik Michalke <meik.michalke@hhu.de>
SPDX-FileContributor: The RKWard Team <rkward-devel@kde.org>
SPDX-License-Identifier: GFDL-1.2-no-invariants-or-later OR GPL-2.0-or-later
-->

<book lang="&language;">

<!-- This header contains all of the meta-information for the document such
as Authors, publish date, the abstract, and Keywords -->

<bookinfo>
<title
>Inleiding tot het schrijven van plug-ins voor &rkward;</title>

<authorgroup>
<author
><firstname
>Thomas</firstname
> <surname
>Friedrichsmeier</surname
> <affiliation
> <address
><email
>rkward-devel AT kde DOT org</email
></address>
</affiliation>
</author>

<author
><firstname
>Meik</firstname
> <surname
>Michalke</surname
> <affiliation
> <address
><email
>rkward-devel AT kde DOT org</email
></address>
</affiliation>
</author>
<!-- Additional authors go here -->

&Freek.de.Kruijf;&Jaap.Woldringh; 
</authorgroup>



<copyright>
<year
>2006-2022</year>
<holder
>Thomas Friedrichsmeier</holder>
</copyright>
<!-- Translators: put here the copyright notice of the translation -->
<!-- Put here the FDL notice.  Read the explanation in fdl-notice.docbook 
     and in the FDL itself on how to use it. -->
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2022-04-24</date>
<releaseinfo
>0.7.4</releaseinfo>

<abstract>
<para
>Dit is een gids voor het schrijven van plug-ins voor &rkward;. </para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>R</keyword>
<keyword
>rkward</keyword>
<keyword
>plugins</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Inleiding</title>

	<para
>In dit document wordt beschreven hoe u plugins schrijft. Dit document is in de loop van de tijd wel wat groot geworden. Laat u dit niet afschrikken. We bevelen aan de vier basisstappen door te lezen (zoals hieronder beschreven), zodat u een idee krijgt hoe een en ander werkt. Hierna kunt u de inhoudstabel doorlezen om te zien welke gevorderde onderwerpen iets voor u zijn. </para>
	<para
>Voor vragen en commentaar, schrijf naar e-maillijst voor ontwikkeling van &rkward;. </para>
	<para
><emphasis
>U hoeft dit niet te lezen om &rkward; te kunnen gebruiken.</emphasis
> Dit document gaat over het uitbreiden van &rkward;. De doelgroep zijn geavanceerde gebruikers of mensen die willen helpen bij het verbeteren van &rkward;. </para>
	<para
>Het schrijven van een plugin is in principe een proces in vier stappen:  </para>
		<itemizedlist>
			<listitem
><para
><link linkend="pluginmap"
>Een nieuwe Action plaatsen in de menu-hiërarchie</link
></para
></listitem>
			<listitem
><para
><link linkend="mainxml"
>Het uiterlijk en gedrag beschrijven van de &GUI; (grafische interface) van de plugin</link
></para
></listitem>
			<listitem
><para
><link linkend="jstemplate"
>Het definiëren hoe R-code wordt gegenereerd, volgens de instellingen, die de gebruiker in de &GUI; maakt</link
></para
></listitem>
			<listitem
><para
><link linkend="pluginhelp"
>Het toevoegen van een help-pagina aan uw plugin</link
></para
></listitem>
		</itemizedlist>
	<para
>Deze worden elk op hun beurt besproken. </para>
	<para
>Enkele gevorderde onderwerpen kunnen in deze vier stappen worden gebruikt, maar worden in aparte hoofdstukken besproken, om het eenvoudig te houden: <itemizedlist>
			<listitem
><para
><link linkend="logic"
>&GUI;-logica</link
></para
></listitem>
			<listitem
><para
><link linkend="embedding"
>Plugins in plugins opnemen</link
></para
></listitem>
			<listitem
><para
><link linkend="plugin_series"
>Bruikbare concepten voor het maken van vele series van soortgelijke plugins</link
></para
></listitem>
		</itemizedlist>
	</para>
	<para
>Ook worden in deze hoofdstukken niet alle opties besproken, maar alleen de meest eenvoudige. Een volledige <link linkend="reference"
>naslag</link
> van opties wordt apart ter beschikking gesteld. </para>
</chapter>

<chapter id="whatareplugins">
<title
>Vooraf: Wat zijn plugins in &rkward;? Hoe werken zij?</title>
	<para
>Natuurlijk is de eerste vraag die u kunt hebben: welke mogelijkheden van &rkward; worden met behulp van plugins verwezenlijkt? Of: wat kun je met plugins doen? </para>
	<para
>Een antwoord is: deselecteer alle &pluginmap;-bestanden in  <menuchoice
><guimenu
>Instellingen</guimenu
><guimenuitem
>&rkward; instellen</guimenuitem
><guimenuitem
>Plugins</guimenuitem
></menuchoice
>, en ga na wat er dan ontbreekt. Een ietwat nuttiger antwoord is: de meeste beschikbare statistische functies die via de &GUI; worden gebruikt, worden via plugins gerealiseerd. Ook kunt u tamelijk flexibele &GUI;'s aanmaken voor alle soorten van bewerkingen met behulp van plugins. </para>
	<para
>Het basisvoorbeeld van plugins in &rkward; is die welke wij in dit document zullen doorwerken: een &XML;-bestand dat beschrijft hoe de &GUI; eruit ziet. Een &javascript;-bestand wordt daarnaast gebruikt voor het aanmaken van de &R;-code, volgens de instellingen van de &GUI;. Dit betekent dat de plugins niet werkelijk zelf de statistische berekeningen uitvoeren. In plaats daarvan genereren de plugins de &R;-syntaxis nodig voor het doen van deze berekeningen. De &R;-syntaxis wordt gestuurd naar de backend van &R; voor de uitwerking, en de uitvoer wordt typisch in het uitvoervenster getoond. </para>
	<para
>Lees in de volgende hoofdstukken hoe we dit gaan doen. </para>
</chapter>

<chapter id="pluginmap">
<title
>Menu-ingangen aanmaken</title>
	<para
>Wanneer u een nieuwe plugin maakt, moet u dit aan &rkward; vertellen. Dus is het eerste wat u moet doen, het schrijven van een &pluginmap;-bestand (of het wijzigen van een bestaand bestand). Het formaat van een &pluginmap;-bestand is &XML;. Ik loop met u door een voorbeeld (ook, natuurlijk, moet u er voor zorgen dat &rkward; zo is ingesteld, dat het uw &pluginmap; inleest -- <menuchoice
><guimenu
>Instellingen</guimenu
><guimenuitem
>&rkward; instellen</guimenuitem
> <guimenuitem
>Plugins</guimenuitem
></menuchoice
>): </para>
	<tip>
		<para
>Bekijk, na het lezen van dit hoofdstuk, ook het <link linkend="rkwarddev"
><application
>rkwarddev</application
> pakket</link
>. Hierin staan enkele &R;-functies waarmee u de meeste van de &XML;-tags kunt aanmaken in &rkward;. </para>
	</tip>
	<programlisting
>&lt;!DOCTYPE rkpluginmap&gt;
        </programlisting>
	<para
>De doctype wordt niet werkelijk geïnterpreteerd, maar wel ingesteld op <replaceable
>"rkpluginmap"</replaceable
>. </para>
	<programlisting
>&lt;document base_prefix="" namespace="myplugins" id="mypluginmap"&gt;
        </programlisting>
	<para
>Het <parameter
>base_prefix</parameter
>-attribuut kan worden gebruikt als al uw plugins in dezelfde directory zijn. U kunt dan die directory weglaten uit de hieronder genoemde bestandsnamen. U kunt die veilig <replaceable
>""</replaceable
> laten blijven. </para
><para
>Zoals u hieronder zult zien, krijgen alle plugins een unieke naam, <parameter
>id</parameter
>. De <parameter
>namespace</parameter
> is een manier waarop IDs worden georganiseerd,  zodat zij niet zo gauw per ongeluk dezelfde naam krijgen. In feite komt het erop neer dat de namespace (naamruimte) en daarna een<quote
>::</quote
> worden voorgevoegd aan alle namen die u opgeeft in deze &pluginmap;. In het algemeen moet u, als u van plan bent uw plugins <link linkend="sect_external_plugins"
>uit te geven in een &R;-pakket</link
>, het is een goed idee om de pakketnaam als <parameter
>namespace</parameter
>-parameter. Plugins geleverd met de officiële &rkward;-distributie heeft <replaceable
>namespace="rkward"</replaceable
>. </para>
	<para
>Het <parameter
>id</parameter
>-attribuut is optioneel, maar een id (een naam dus)voor uw &pluginmap; opgeven maakt het anderen mogelijk hun&pluginmap;s uw &pluginmap;, automatisch te laten inlezen (zie <link linkend="chapter_dependencies"
>de sectie over afhankelijkheden</link
>). </para>
	<programlisting
>&lt;components&gt;
        </programlisting>
	<para
>Componenten? We spreken toch over plugins? Ja, maar in de toekomst zijn plugins niets anders dan een speciale class van componenten. Wat we hier dus aan het doen zijn, is alle componenten/plugins te registreren in &rkward;. Bekijken we een voorbeeld: </para>
	<programlisting
>&lt;component type="standard" id="t_test_two_vars" file="t_test_two_vars.xml" label="Two Variable t-Test" /&gt; (Vert.: Door het hele document vertaal ik dit niet, om de kans op verwarring, bij mij en de lezer, te minimaliseren. De vertaling hier zou zijn: &lt;component type="standaard" id="t_test_twee_vars" file="t_test_twee_vars.xml" label="Twee variabelen t-Test" /&gt;)
        </programlisting>
	<para
>Eerst het <parameter
>type</parameter
>-attribuut: Laat dit voorlopig <replaceable
>"standard"</replaceable
> zijn. Andere typen zijn er nog niet. De <parameter
>id</parameter
> is al kort aan bod geweest. Elke component moet een (in zijn eigen namespace) unieke naam hebben. Kies er een die gemakkelijk herkenbaar is. Geen spaties, en geen speciale karakters. Mag wel, voorlopig, maar die kunnen een speciale betekenis hebben. Met het <parameter
>file</parameter
>-attribuut, geeft u de locatie op van de <link linkend="mainxml"
>beschrijving van de actuele plugin zelf</link
>. Die is relatief ten opzichte van de directory waarin het &pluginmap;-bestand is, en de  <parameter
>base_prefix</parameter
> hierboven. Tenslotte, geef de component een  naam. Deze naam wordt overal getoond waar de plugin in het menu wordt geplaatst (of in de toekomst ook elders). </para>
	<para
>Een &pluginmap;-bestand bevat typisch een aantal componenten, dus hier zijn er nog een paar: </para>
	<programlisting
>&lt;component type="standard" id="unimplemented_test" file="means/unimplemented.xml" /&gt;
                &lt;component type="standard" id="fictional_t_test" file="means/ttests/fictional.xml" label="This is a fictional t-test" /&gt;
                &lt;component type="standard" id="descriptive" file="descriptive.xml" label="Descriptive Statistics" /&gt;
                &lt;component type="standard" id="corr_matrix" file="corr_matrix.xml" label="Correlation Matrix" /&gt;
                &lt;component type="standard" id="simple_anova" file="simple_anova.xml" label="Simple Anova" /&gt;
        &lt;/components&gt;
        </programlisting>
	<para
>OK, dit was het eerste (onvertaalde, tussen "" staan wat teksten) stapje. &rkward; weet nu dat die plugins er zijn. Maar hoe die te gebruiken? Zij moeten in een menu-hiërarchie worden geplaatst: </para>
	<programlisting
>&lt;hierarchy&gt;
                &lt;menu id="analyse" label="Analysis"&gt;
        </programlisting>
	<para
>Direct onder de <command
>&lt;hierarchy&gt;</command
> tag, begint u met de beschrijving van in welk <command
>&lt;menu&gt;</command
> uw plugins moeten komen. In de regel boven zegt u eigenlijk dat uw plugin moet komen in het menu  <menuchoice
><guimenu
>Analyse</guimenu
></menuchoice
> (niet noodzakelijk direct daar, maar in een submenu). Het menu <menuchoice
><guimenu
>Analyse</guimenu
></menuchoice
> is standaard aanwezig in &rkward;, dus hoeft het niet helemaal opnieuw te worden aangemaakt. Maar als het nog niet bestond, zou u met het <parameter
>label</parameter
>-attribuut zijn naam geven. Tenslotte zal met de  <parameter
>id</parameter
> dit <command
>&lt;menu&gt;</command
> nog een naam krijgen. Dit is nodig, zodat diverse &pluginmap;-bestanden hun plugins in dezelfde menus kunnen plaatsen. Dit gebeurt door te kijken naar een <command
>&lt;menu&gt;</command
> in de gegeven <parameter
>id</parameter
>. Indien de ID nog niet bestaat wordt een nieuw menu aangemaakt. En anders worden de ingangen toegevoegd aan het bestaande menu. </para>
	<programlisting
>&lt;menu id="means" label="Gemiddelden"&gt;
        </programlisting>
	<para
>In principe hier hetzelfde: Nu definiëren we een submenu in het menu <menuchoice
><guimenu
>Analyse</guimenu
></menuchoice
>. Het moet de naam <menuchoice
><guimenuitem
>Gemiddelden</guimenuitem
></menuchoice
> krijgen. </para>
	<programlisting
>&lt;menu id="ttests" label="t-toetsen"&gt;
        </programlisting>
	<para
>En een laatste level in de menu-hierarchie: een submenu van het submenu <menuchoice
><guimenuitem
>Gemiddelden</guimenuitem
></menuchoice
>. </para>
	<programlisting
>&lt;entry component="t_test_two_vars" /&gt;
        </programlisting>
	<para
>Nu, eindelijk, is dit het menu waarin we de plugin willen plaatsen. De <command
>&lt;entry&gt;</command
> tag geeft aan dat dit het is,in plaats van  weer een ander submenu. Het <parameter
>component</parameter
>-attribuut verwijst naar de <parameter
>id</parameter
> (naam) die u hierboven aan de component gaf. </para>
	<programlisting
>&lt;entry component="fictional_t_test" /&gt;
                                &lt;/menu&gt;
                                &lt;entry component="fictional_t_test" /&gt;
                        &lt;/menu&gt;
                        &lt;menu id="frequency" label="Frequency" index="2"/&gt;
        </programlisting>
	<para
>Voor als u het spoor bijster bent: Dit is nog een submenu van het menu <menuchoice
><guimenu
>Analyse</guimenu
></menuchoice
>. Zie het onderstaande schermbeeld. We slaan een en ander over dat niet zichtbaar is, gemarkeerd met [...]. </para>
	<programlisting
>[...]
                        &lt;/menu&gt;
                        &lt;entry component="corr_matrix"/&gt;
                        &lt;entry component="descriptive"/&gt;
                        &lt;entry component="simple_anova"/&gt;
                &lt;/menu&gt;
        </programlisting>
	<para
>Dit zijn de uiteindelijke ingangen, zichtbaar in onderstaande schermbeelden. </para>
	<programlisting
>&lt;menu id="plots" label="Plots"&gt;
                        [...]
                &lt;/menu&gt;
        </programlisting>
	<para
>Natuurlijk kunt u uw plugins ook plaatsen in andere menu's dan het menu <menuchoice
><guimenu
>Analyse</guimenu
></menuchoice
>. </para>
	<programlisting
>&lt;menu id="file" label="Bestand"&gt;
                        [...]
                &lt;/menu&gt;
        </programlisting>
	<para
>Zelfs in standaard menu's zoals <menuchoice
><guimenu
>Bestand</guimenu
></menuchoice
>. Alles wat nodig is, is een correcte <parameter
>id</parameter
>. </para>
	<programlisting
>&lt;/hierarchy&gt;        
&lt;/document&gt;
        </programlisting>
	<para
>Zo moet u het aanpakken. En dit schermbeeld toont het resultaat: </para>
	<screenshot>
	<screeninfo
>Menu-hiërarchie aangemaakt met bovenstaande code</screeninfo>
		<mediaobject>
		<imageobject>
			<imagedata fileref="menu_hierarchy_example.png" format="PNG"/>
		</imageobject>
		<textobject>
			<phrase
>Menu-hiërarchie aangemaakt met bovenstaande code</phrase>
		</textobject>
		</mediaobject>
	</screenshot>
	<para
>Duizelt het u? De beste manier om te beginnen, is mogelijk om uit te gaan van de bestaande &pluginmap;-bestanden die met de distributie worden geleverd, en die te wijzigen daar waar u dit nodig vindt. En ook: indien u hulp wenst, aarzel dan niet te schrijven naar de development mailing list (Engels). </para>
	<sect1 id="pluginmap_grouping"
><title
>Het regelen van de volgorde van de menu-ingangen</title>
		<para
>Standaard wordt alles (ingangen / submenu's) in een menu automatisch alfabetisch gesorteerd. In <emphasis
>sommige</emphasis
> gevallen wilt u meer controle hierop hebben. In dat geval kunt u als volgt de elementen in groepen indelen:</para>
		<itemizedlist>
			<listitem>
				<para
>U kunt op deze manier groepen binnen een menu definiëren. Alle elementen binnen dezelfde groep worden bij elkaar gegroepeerd:</para>
				<programlisting
>&lt;group id="eengroep"/&gt;
                                </programlisting>
			</listitem
><listitem>
			<para
>Indien u de groep visueel wilt scheiden van andere ingangen, doet u dit:</para>
				<programlisting
>&lt;group id="eengroep" separated="true"/&gt; (true betekent waar)
                                </programlisting>
			</listitem
><listitem>
				<para
>Ingangen, menu's en groepen kunnen aan een groep worden toegevoegd met: </para>
				<programlisting
>&lt;entry component="..." group="eengroep"/&gt;
                                </programlisting>
			</listitem
><listitem>
				<para
>In feite is het ook mogelijk groepen (zonder scheidingslijnen) impliciet te definiëren:</para>
				<programlisting
>&lt;entry component="eerste" group="a"/&gt;
                &lt;entry component="derde"/&gt;
                &lt;entry component="tweede" group="a"/&gt;
                                </programlisting>
			</listitem
><listitem>
				<para
>Groepsnamen behoren bij hun eigen menu. Groep "a" in menu "Gegevens" botst niet met groep "a" in het menu "Analyse", bijvoorbeeld.</para>
			</listitem
><listitem>
				<para
>Het meest komt voor dat groepen helemaal bovenin het menu worden gedefinieerd, of juist helemaal onderin. Hiervoor zijn reeds de groepen "top" (bovenin) en "bottom" (onderin) aangemaakt in elk menu.</para>
			</listitem
><listitem>
				<para
>Ingangen binnen elke groep zijn alfabetisch gesorteerd. Groepen verschijnen in de volgorde van hun declaraties (behalve indien toegevoegd aan een andere groep, natuurlijk).</para>
			</listitem
><listitem>
				<para
>Menu's en ingangen zonder groepspecificatie vormen logisch ook een groep ("").</para>
			</listitem>
		</itemizedlist>
	</sect1>
</chapter>

<chapter id="mainxml">
<title
>Het definiëren van de &GUI; (Grafische interface)</title>
<sect1 id="sect_defining_the_GUI"
><title
>Een dialoog definiëren</title>
	<para
>In het <link linkend="pluginmap"
>vorige hoofdstuk</link
> zag u hoe u met &rkward; een plugin kunt registreren. Het belangrijkste was het opgeven van het pad naar een &XML;-bestand met een beschrijving van de plugin. In dit hoofdstuk leert u hoe u dit &XML;-bestand aanmaakt. </para>
	<tip>
		<para
>Bekijk, na het lezen van dit hoofdstuk, ook het <link linkend="rkwarddev"
><application
>rkwarddev</application
> pakket</link
>. Hierin staan enkele &R;-functies waarmee u de meeste van de &XML;-tags kunt aanmaken in &rkward;. </para>
	</tip>
	<para
>We gaan weer met u door een voorbeeld wandelen. Dit voorbeeld is een (beetje vereenvoudigde) versie van de t-Test met twee variabelen. </para>
	<programlisting
>&lt;!DOCTYPE rkplugin&gt;
        </programlisting>
	<para
>De doctype wordt nog niet werkelijk geïnterpreteerd. Maar stel het toch maar in op <replaceable
>rkplugin</replaceable
>. </para>
	<programlisting
>&lt;document&gt;
        &lt;code file="t_test_two_vars.js"/&gt;
        </programlisting>
	<para
>Alle plugins genereren wat code. Op dit moment kan dit alleen  met JS (JavaScript), zoals uitvoerig beschreven in <link linkend="jstemplate"
>het volgende hoofdstuk</link
>. Daarin staat waar u de JS-code kunt vinden. De bestandsnaam is relatief ten opzichte van de locatie van de plugin &XML;. </para>
	<programlisting
>&lt;help file="t_test_two_vars.rkh"/&gt;
        </programlisting>
	<para
>Het is meestal een goed idee om een help-pagina te maken voor uw plugin. De bestandsnaam van die help-pagina wordt hier gegeven, relatief ten opzichte van de locatie van de plugin &XML;. Het schrijven van help-pagina's wordt <link linkend="pluginhelp"
>hier</link
> beschreven. Laat deze regel weg, als u geen help-pagina maakt. </para>
	<programlisting
>&lt;dialog label="Two Variable t-Test"&gt;
        </programlisting>
	<para
>Zoals u weet kunnen plugins een dialoog bevatten, of een assistent, of beide. Hier beginnen we met het definiëren van een dialoogvenster. Het attribuut <parameter
>label</parameter
> definieert de koptekst van de dialoog. </para>
	<programlisting
>&lt;tabbook&gt;
                        &lt;tab label="Basisinstellingen"&gt;
        </programlisting>
	<para
>&GUI;-elementen kunnen worden georganiseerd in een tabbook. Hier definiëren wij een tabbook als het eerste element in de dialoog. Definieer met <command
>&lt;tabbook&gt;</command
>[...]<command
>&lt;/tabbook&gt;</command
> de tabbook en daarna elke pagina in de tabbook met <command
>&lt;tab&gt;</command
>[...]<command
>&lt;/tab&gt;</command
>. Met het attribuut <parameter
>label</parameter
> in het <command
>&lt;tab&gt;</command
>-element kunt u een koptekst opgeven voor die pagina in de tabbook. </para>
	<programlisting
>&lt;row id="main_settings_row"&gt;
        </programlisting>
	<para
>De tags <command
>&lt;row&gt;</command
> en <command
>&lt;column&gt;</command
> bepalen hoe de &GUI;-elementen worden geplaatst. Hierin bepaalt u dat u enkele elementen naast elkaar wilt plaatsen (links naar rechts). Het <parameter
>id</parameter
>-attribuut is niet direct nodig, maar we gaan het later gebruiken, wanneer we aan de plugin een assistent toevoegen. Het eerste in een rij te plaatsen element is: </para>
	<programlisting
>&lt;varselector id="vars"/&gt;
        </programlisting>
	<para
>Met deze eenvoudige tag maakt u een lijst waarin de gebruiker variabelen kan selecteren. U moet voor dit element een <parameter
>id</parameter
> (naam) opgeven, zodat &rkward; het kan vinden. </para>
	<warning>
		<para
>Er mag GEEN punt (.) in de <parameter
>id</parameter
>-string voorkomen. </para>
	</warning>
	<programlisting
>&lt;column&gt;
        </programlisting>
	<para
>Vervolgens plaatsen we een <command
>&lt;column&gt;</command
> in de rij. Dit betekent dat we de volgende elementen boven elkaar plaatsen (van boven naar beneden), en alles komt dan rechts van de <command
>&lt;varselector&gt;</command
>. </para>
	<programlisting
>&lt;varslot types="getal" id="x" source="vars" required="true" label="compare"/&gt;
                                                &lt;varslot types="getal" id="y" source="vars" required="true" label="met" i18n_context="vergelijken met"/&gt;
        </programlisting>
	<para
>Deze elementen zijn de tegenpartij van de <command
>&lt;varselector&gt;</command
>. Zij zijn <quote
>plaatshouders</quote
> waarin de gebruiker variabelen kan plaatsen. U merkt dat de <parameter
>source</parameter
> wordt ingesteld op de zelfde waarde als de <parameter
>id</parameter
> van de <command
>&lt;varselector&gt;</command
>. Dit betekent dat de <command
>&lt;varslot&gt;</command
>s hun variabelen verkrijgen uit de varselector. De <command
>&lt;varslot&gt;</command
>s moeten ook een <parameter
>id</parameter
> (naam) krijgen. Mogelijk hebben zij een <parameter
>label</parameter
> (naam), en zijn die ingesteld op <parameter
>required</parameter
> (vereist). Dit betekent dat de  knop <guibutton
>Indienen</guibutton
> niet werkt totdat de <command
>&lt;varslot&gt;</command
> een geldige waarde heeft. Tenslotte wordt het <parameter
>type</parameter
>-attribuut nog niet geïnterpreteerd, maar zorgt dat ervoor dat alleen geldige variabelen-typen worden toegestaan in de <command
>&lt;varslot&gt;</command
>. </para>
	<para
>Voor het geval dat u zich afvraagt wat het attribuut <parameter
>i18n_context</parameter
> betekent: Hiermee wordt de context geleverd die helpt bij de correcte vertaling van het woord "against", dat gebruikt wordt in de label van de <command
>&lt;varslot&gt;</command
>, maar het beïnvloedt niet direct de functionaliteit van de plugin. Hierover meer in een <link linkend="i18n_general"
>afzonderlijk hoofdstuk</link
>. (Vert.: ik heb "against" dat er eerst stond, vertaald met "met": vergelijken met) </para>
	<programlisting
>&lt;radio id="hypothese" label="met test-hypothese"&gt;
                                                        &lt;option value="two.sided" label="Tweezijdig"/&gt;
                                                        &lt;option value="groter" label="Eerste is groter"/&gt;
                                                        &lt;option value="kleiner" label="Tweede is groter"/&gt;
                                                &lt;/radio&gt;
        </programlisting>
	<para
>Hier definieert u een groep van <command
>&lt;radio&gt;</command
>-knoppen. De groep heeft een <parameter
>label</parameter
> en een <parameter
>id</parameter
>. Elke <command
>&lt;option&gt;</command
> (knop) heeft een <parameter
>label</parameter
> en is toegewezen aan een <parameter
>waarde</parameter
>. Deze waarde wordt door het <command
>&lt;radio&gt;</command
>-element teruggegeven wanneer de optie wordt geselecteerd. </para>
	<programlisting
>&lt;/column&gt;
                                &lt;/row&gt;
                        &lt;/tab&gt;
        </programlisting>
	<para
>Elke tag moet worden afgesloten. We hebben alle gewenste elementen geplaatst (de twee <command
>&lt;varslots&gt;</command
> en de <command
>&lt;radio&gt;</command
>) in de <command
>&lt;column&gt;</command
>. We plaatsten alle gewenste elementen  (de <command
>&lt;varselector&gt;</command
> en de <command
>&lt;column&gt;</command
> waarin die elementen) in de <command
>&lt;row&gt;</command
>. En we plaatsten alle gewenste elementen in de eerste pagina in de <command
>&lt;tabbook&gt;</command
>. We zijn nog niet klaar met het definiëren van de <command
>&lt;tabbook&gt;</command
> (er komen nog wat meer pagina's), en natuurlijk moet er ook nog meer komen in de <command
>&lt;dialog&gt;</command
>. Maar in dit schermbeeldzien we in principe wat we al hebben gedaan: </para>
	<screenshot>
	<screeninfo
>t-Test plugin</screeninfo>
		<mediaobject>
		<imageobject>
			<imagedata fileref="t_test_plugin_example.png" format="PNG"/>
		</imageobject>
		<textobject>
			<phrase
>t-Test plugin</phrase>
		</textobject>
		</mediaobject>
	</screenshot>
	<para
>Merk op dat we knoppen <guibutton
>Indienen</guibutton
>, <guibutton
>Afsluiten</guibutton
>, &etc; of de programmacode hebben gespecificeerd. Die elementen worden automatisch aangemaakt. Maar natuurlijk moeten we nog de tweede pagina van de  <command
>&lt;tabbook&gt;</command
> definiëren: </para>
	<programlisting
>&lt;tab label="Opties"&gt;
                                &lt;checkbox id="varequal" label="Aanname: gelijke varianties" value=", var.equal=TRUE"/&gt;
        </programlisting>
	<para
>Standaard worden elementen van boven naar beneden geplaatst, als in een <command
>&lt;column&gt;</command
>. Omdat dit precies is wat we hier willen, hoeven we niet expliciet een <command
>&lt;row&gt;</command
> of <command
>&lt;column&gt;</command
>-indeling op te geven. Het eerste element dat we definiëren is een keuzevakje. Net als de  <command
>&lt;radio&gt;</command
><command
>&lt;optie&gt;</command
>s, heeft het keuzevakje een <parameter
>label</parameter
> (naam) en een <parameter
>value</parameter
> (waarde). De <parameter
>value</parameter
> is wat wordt teruggegeven, wanneer het keuzevakje wordt geselecteerd. Natuurlijk heeft het keuzevakje ook een <parameter
>id</parameter
> (naam). </para>
	<programlisting
>&lt;frame label="Confidence Interval" id="frame_conf_int"&gt;
        </programlisting>
	<para
>Hier is nog een ander indelingselement: om aan te geven dat de de twee elementen hieronder bij elkaar horen, tekenen we een <command
>&lt;frame&gt;</command
> (vak). Die frame kan een <parameter
>label</parameter
> (kopnaam) hebben. Omdat de frame slechts een passief indelingselement is, heeft die geen <parameter
>id</parameter
> nodig. Toch definiëren we er hier een, omdat we er later naar zullen verwijzen, wanneer we een extra interface maken voor de assistent. </para>
	<programlisting
>&lt;checkbox id="confint" label="druk vertrouwensinterval af" value="1" checked="true"/&gt;
                                        &lt;spinbox type="real" id="conflevel" label="vertrouwensniveau" min="0" max="1" initial="0.95"/&gt;
                                &lt;/frame&gt;
        </programlisting>
	<para
>In de <command
>&lt;frame&gt;</command
> plaatsen we nog een <command
>&lt;keuzevakje&gt;</command
> (met <parameter
>checked=</parameter
><replaceable
>"true"</replaceable
>, geven wij aan dat het keuzevakje standaard gekozen is), en een  <command
>&lt;spinveld&gt;</command
>. In het spinveld kan de gebruiker een waarde kiezen tussen  <replaceable
>"min"</replaceable
> en <replaceable
>"max"</replaceable
> met de standaard/begin-waarde <replaceable
>"0.95"</replaceable
>. Het <parameter
>type</parameter
> op <replaceable
>"real"</replaceable
> instellen betekent dat reële getallen (kommagetallen) worden geaccepteerd, in tegenstelling tot  <parameter
>type=</parameter
><replaceable
>"integer"</replaceable
> wat betekent dat alleen gehele getallen worden geaccepteerd.. </para>
	<note
><para
>Het is ook mogelijk, en vaak zelfs beter, de <command
>&lt;frame&gt;</command
> zelf selecteerbaar te maken, in plaats van het erin toevoegen van een <command
>&lt;keuzevakje&gt;</command
>. Zie de naslag voor de details. Hier hebben we dit niet gedaan, voor illustratieve doeleinden. </para
></note>
	<programlisting
>&lt;/tab&gt;
                &lt;/tabbook&gt;
        &lt;/dialog&gt;
        </programlisting>
	<para
>Dat is alles voor de tweede pagina van de <command
>&lt;tabbook&gt;</command
>, alle pagina's in de <command
>&lt;tabbook&gt;</command
> en alle elementen in de <command
>&lt;dialog&gt;</command
>. We zijn klaar met het definiëren hoe de dialoog eruit zal zien. </para>
	<programlisting
>&lt;/document&gt;
        </programlisting>
	<para
>Tenslotte sluiten we de <command
>&lt;document&gt;</command
>-tag af, en dat is het dan. De &GUI; is gedefinieerd. U kunt het bestand nu opslaan. Maar hoe wordt de syntaxis van &R; uit de instellingen van de &GUI; gegenereerd? Dit bespreken we in het <link linkend="jstemplate"
>volgende hoofdstuk</link
>. Maar eerst bekijken we het toevoegen van de interface voor een assistent (wizard), en geven we een aantal algemene beschouwingen. </para>
</sect1>

<sect1 id="wizard_interface">
	<title
>Het toevoegen van een interface voor de assistent (wizard)</title>
	<para
>Eigenlijk hoeven we geen extra <command
>&lt;assistent&gt;</command
>-interface toe te voegen, maar we laten hier zien hoe het moet. Een interface toevoegen voor een assistent, doet u door een <command
>&lt;wizard&gt;</command
>-tag toe te voegen op hetzelfde menu-niveau als de <command
>&lt;dialog&gt;</command
>-tag: </para>
	<programlisting
>&lt;wizard label="Two Variable t-Test"&gt;
                        &lt;page id="firstpage"&gt;
                                &lt;text&gt;Eerst kiezen we de twee met elkaar te vergelijken variabelen.
                                        En geven aan welke volgens u de grootste is. Selecteer Tweezijdig,
                                       indien uw theorie niet vertelt welkevariabele groter is.&lt;/text&gt;
                                &lt;copy id="main_settings_row"/&gt;
                        &lt;/page&gt;
        </programlisting>
	<para
>Hiervan is een en ander vanzelfsprekend: We voegen een<command
>&lt;wizard&gt;</command
>-tag toe met een <parameter
>label</parameter
> (nnam) voor de assistent. Omdat een assistent meerdere pagina's kan hebben die na elkaar worden getoond, gaan we eerst een  <command
>&lt;page&gt;</command
> definiëren, waarin we een  <command
>&lt;text&gt;</command
> plaatsen met uitleg. Daarna gebruiken we een <command
>&lt;copy&gt;</command
>-tag. Wat dit doet bespaart ons de noodzaak opnieuw te definiëren wat we al schreven voor de <command
>&lt;dialoog&gt;</command
>: de copy-tag zoekt naar een andere tag met dezelfde <parameter
>id</parameter
> eerder in de &XML;. Toevallig is die gedefinieerd in de <command
>&lt;dialoog&gt;</command
>-sectie, en is er een <command
>&lt;row&gt;</command
> waarin de <command
>&lt;varselector&gt;</command
>, <command
>&lt;varslots&gt;</command
> en de <quote
>hypothese</quote
> <command
>&lt;radio&gt;</command
>-besturing. Dit alles wordt 1:1 gekopieerd en ingevoegd in het <command
>&lt;copy&gt;</command
>-element. </para>
	<para
>Nu de tweede pagina: </para>
	<programlisting
>&lt;page id="secondpage"&gt;
                                &lt;text&gt;Onder zijn wat gevorderde opties. Het is meestal niet veilig aan te nemen dat
                                        variabelen dezelfde varianties hebben. Er wordt dan een geschikte correctie toegepast.
                                        Maar kiezen van "gelijke varianties aannemen" kan de teststerkte verbeteren.&lt;/text&gt;
                                &lt;copy id="varequal"/&gt;
                                &lt;text&gt;Soms helpt het hebben van een schatting van het vertrouwensinterval van
                                        het verschil van de gemiddelden. Onder kunt u opgeven of er een moet worden getoond, en
                                        welk vertouwensniveau moet worden toegepast (95% komt overeen met een 5% 
                                        significantie-niveau.).&lt;/text&gt;
                                &lt;copy id="frame_conf_int"/&gt;
                        &lt;/page&gt;
                &lt;/wizard&gt;
        </programlisting>
	<para
>Veel van hetzelfde hier. we voegen wat teksten toe, en <command
>&lt;copy&gt;</command
> daarin wat secties van de dialoog-interface. </para>
	<para
>U kunt natuurlijk de assistent-interface heel anders ontwerpen dan die van de eenvoudige dialoog, en de <command
>&lt;copy&gt;</command
>-tag helemaal niet gebruiken. Maar zorg er dan wel voor dat overeenkomstige elementen in beide interfaces dezelfde <parameter
>id</parameter
> krijgen. Niet alleen voor het overbrengen van instellingen van de dialoog-interface naar die van de assistent, en terug, wanneer de gebruiker de andere interface wil gebruiken, (wat in de huidige versie van &rkward; nog niet kan), maar het maakt het schrijven van de template (sjabloon) voor uw code eenvoudiger (zie hier onder). </para>
</sect1>

<sect1 id="mainxmltips">
	<title
>Enige beschouwingen bij het ontwerpen van een &GUI;</title>
	<para
>In deze sectie zijn enkele algemene beschouwingen over welke &GUI;-elementen waar moeten worden gebruikt. Indien dit de eerste keer is dat u een plugin probeert te maken, kunt u deze sectie overslaan, omdat het niet gaat over de basis van het maken van een &GUI;. Kom later terug, om te zien of u de &GUI;'s van uw plugins misschien kunt verfijnen.  </para>
	
	<sect2 id="radio_vs_checkbox_vs_dropdown">
		<title
>&lt;radio&gt; vs. &lt;checkbox&gt; vs. &lt;dropdown&gt;</title>
		<para
>De drie elementen  <command
>&lt;radio&gt;</command
>, <command
>&lt;checkbox&gt;</command
> (keuzevakje), <command
>&lt;dropdown&gt;</command
> (neerklapmenu), hebben allemaal een zelfde soort functie: het laten kiezen uit een aantal opties. Natuurlijk kunt u met een keuzevakje alleen maar uit twee opties kiezen: gekozen, of niet gekozen, u kunt die dus niet gebruiken als er uit meer dan twee opties moet worden gekozen. Maar wanneer, welk van de elementen te gebruiken? Enkele vuistregels zijn: </para>
		<para
>Als u merkt dat u een <command
>&lt;radio&gt;</command
> of <command
>&lt;dropdown&gt;</command
> aanmaakt met slechts twee opties, vraag u dan af of de vraag eigenlijk een ja / nee type vraag is. Bv. een keuze tussen <quote
>resultaten aanpassen</quote
> en <quote
>resultaten niet aanpassen</quote
>, of tussen <quote
>ontbrekende waarden verwijderen</quote
> en <quote
>ontbrekende waarden behouden</quote
>. In zo'n geval is een<command
>&lt;checkbox&gt;</command
> een betere keus: het gebruikt minder ruimte, er zijn minder woorden of labels (namen) nodig, en is gemakkelijker te begrijpen voor de gebruiker. Er zijn maar weinig  situaties waarin u beter een <command
>&lt;radio&gt;</command
> kunt kiezen in plaats van een <command
>&lt;checkbox&gt;</command
>, als er slechts twee opties zijn. Een voorbeeld daarvan zou kunnen zijn: <quote
>Berekeningsmethode: 'Pearson'/'Spearman'</quote
>. Hier zijn meer methodes denkbaar, en zij zijn niet echt een stel tegengestelde  methodes. </para>
		<para
>Kiezen tussen een <command
>&lt;radio&gt;</command
> en een <command
>&lt;dropdown&gt;</command
> hangt meestal af van de beschikbare ruimte. De <command
>&lt;dropdown&gt;</command
> heeft het voordeel minder ruimte nodig te hebben, zelfs als er veel opties zijn waaruit moet worden gekozen. Aan de andere kant heeft <command
>&lt;radio&gt;</command
> het voordeel dat de gebruiker alle mogelijke keuzes in een oogopslag   kan zien, zonder te moeten klikken op een pijltje in een keuzelijst. Algemeen gesproken, als er zes of meer opties zijn waaruit moet worden gekozen, heeft <command
>&lt;dropdown&gt;</command
> de voorkeur. Met vijf of minder opties kunt u beter <command
>&lt;radio&gt;</command
> kiezen. </para>
	</sect2>
</sect1>
</chapter>

<chapter id="jstemplate">
<title
>Genereren van &R; code volgens de instellingen in de &GUI;</title>
<sect1 id="sect_generating_R_code"
><title
>&javascript; gebruiken in plugins voor &rkward;</title>
	<para
>We hebben nu een &GUI; gemaakt, maar moeten nu nog wat &R;-code hiervoor maken. Hiervoor hebben we nog een tekstbestand nodig, <filename
>code.js</filename
>, in dezelfde directory  als de <link linkend="mainxml"
><filename
>description.xml</filename
></link
>. Misschien kent u  &javascript; al (of, technisch beter gezegd: ECMA-script). Documentatie voor JS is er in overvloed, zowel gedrukt, als op het Internet (&eg;: <ulink url="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide"
>https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide</ulink
>). Maar in de meeste gevallen hoeft u niet echt veel kennis te hebben van JS, omdat we alleen een aantal erg eenvoudige eigenschappen zullen gebruiken. </para>
	<tip>
		<para
>Na het lezen van dit hoofdstuk, kunt u ook kijken op <link linkend="rkwarddev"
><application
>rkwarddev</application
> pakket</link
>. Hierin staan enkele &R;-functies voor het maken van &javascript;-code die veel in &rkward; wordt gebruikt. Het kan ook "autodetect" (automatisch detecteren) variabelen die in een plugin &XML;-bestand worden gebruikt en heel eenvoudige &javascript;-code aanmaken, voor u om me te beginnen. </para>
	</tip>
	<note>
		<para
>Aangenomen wordt dat de  <literal role="extension"
>.js</literal
>-bestanden van plugins UTF-8 (een karakter-verzameling) gebruiken. Ga na of uw bewerkingsprogramma die ook gebruikt, indien u non-ascii karakters gebruikt. </para>
	</note>
	<para
>Voor de t-test met twee variabelen, is het bestand <filename
>code.js</filename
> als volgt (met hierin commentaar): </para>
	<sect2 id="sect_JS_preprocess"
><title
>preprocess()</title>
		<programlisting
>function preprocess () {
}
                </programlisting>
		<para
>Het JS-bestand is ingedeeld in drie afzonderlijke functies: <function
>preprocess()</function
>, <function
>calculate()</function
> (berekenen), en <function
>printout()</function
> (afdrukken). Dit omdat niet alle code overal nodig is. Op dit moment wordt de preprocess-functie op veel plaatsen niet echt gebruikt (eigenlijk kan u die geheel weggelaten). </para>
	</sect2>
	<sect2 id="sect_JS_calculate"
><title
>calculate()</title>
		<programlisting
>function calculate () {
        echo ('res &lt;- t.test (x=' + getString ("x") + ', y=' + getString ("y") + ', hypothesis="' + getString ("hypothese") + '"' + getString ("varequal"));
        var conflevel = getString ("conflevel");
        if (conflevel != "0.95") echo (', conf.level=' + conflevel);
        echo (')\n');
}
                </programlisting>
		<para
>Deze functie genereert de actuele syntaxis in &R; die vanuit de &GUI; moet worden gestart. Bekijken we die eens nauwkeurig: De te gebruiken code wordt gegenereerd met de statement <function
>echo()</function
>. Als we de statement <function
>echo()</function
> stap voor stap bekijken, is het eerste deel: </para>
		<screen
>res &lt;- t.test (
                </screen>
		<para
>als leesbare tekst. Vervolgens moeten we de waarde invullen, van de variabele die de gebruiker als eerste selecteerde. We halen die op met <function
>getString ("x")</function
>, en plakken die aan de string die moet worden <quote
>ge-echo'd</quote
>. Dit geeft de  waarde van het &GUI;-element met de <parameter
>id=</parameter
><replaceable
>"x"</replaceable
>: onze eerste <command
>&lt;checkbox&gt;</command
>. Vervolgens voegen we een', ' toe, en halen op dezelfde manier de waarde op van het element <replaceable
>"y"</replaceable
> - de tweede <command
>&lt;checkbox&gt;</command
>. Voor de  hypothese (de <command
>&lt;radio&gt;</command
> groep), en de gelijke  varianties <command
>&lt;checkbox&gt;</command
>, is de werkwijze in grote lijnen dezelfde. </para>
		<para
>Merk op dat u, in plaats van de uitvoer-stukjes met <quote
>+</quote
> aan elkaar plakt, u ook een aantal aparte <function
>echo()</function
> statements kunt gebruiken. Alles wordt op een enkele regel weergegeven. U kunt meerdere regels gebruiken door in de ge-echode string een "\n" (nieuwe regel) op te nemen. In theorie kunt met een echo-statement vele regels genereren, maar houdt u het alstublieft eenvoudig en beperk u tot slechts een (of minder) regels per <function
>echo()</function
>. </para>
		<note>
			<para
>Behalve <function
>getString()</function
>, zijn er functies  <function
>getBoolean()</function
>, die een logische waarde probeert terug te geven (bruikbaar in een <function
>if()</function
>-statement), en <function
>getList()</function
>, die gegevens probeert terug te geven in een soort listin een JS-<function
>Array()</function
>. Later zien we hier wat voorbeelden van.</para>
			<para
>Bij het beschouwen van bestaande plugins, ziet u dat in veel plugins<function
>getValue()</function
> wordt gebruikt, in plaats van <function
>getString()</function
>, en in feite zijn zij <emphasis
>bijna</emphasis
> identiek. Maar <function
>getString()</function
>, <function
>getBoolean()</function
> en <function
>getList()</function
> gebruiken wordt aanbevolen vanaf versie 0.6.1. </para>
		</note>
		<para
>Voor de confidence level (de betrouwbaarheid) is het net wat lastiger. Vanwege de esthetica, willen we niet expliciet opgeven welk niveau we willen, als het met de standaardwaarde overeenkomt. Daarom, in plaats van de waarde zonder meer weer te geven, halen we die eerst op in een variabele. Daarna controleren we of die verschilt van <replaceable
>"0.95"</replaceable
> , en als dat zo is geven we een extra argument weer. Tenslotte, echo-en we een a afsluithaakje en een einde regel: <replaceable
>")\n"</replaceable
>. Dat is alles wat de calculate (bereken) functie betref. </para>
	</sect2>
	<sect2 id="sect_JS_printout"
><title
>printout()</title>
		<programlisting
>function printout () {
        echo ('rk.header (' + i18n ("Two Variable t-Test") + ')\n');
        echo ('rk.print (res)\n');
}
                </programlisting>
		<para
>En dit is alles voor de printout (weergave) functie in de meeste gevallen. <function
>rk.header()</function
> drukt een standaard kopregel af voor de resultaten. Merk op dat in de <literal role="extension"
>.js</literal
>-bestanden, u alle vertaalbare strings met de handmoet markeren, met de opdracht <command
>i18n()</command
>, of andere. Hierover meer in het <link linkend="i18n_js"
>hoofdstuk over internationalisatie</link
>. U kunt, als u dit wilt, hieraan ook wat informatie toevoegen, &eg;: </para>
		<programlisting
>function printout () {
        new Header (i18n ("Twee variabelen t-Test"))
                  .addFromUI ("varequal")
                  .add (i18n ("Vertrouwensniveau"), getString ("conflevel"))  // Merk op: zo geschreven als illustratie. Meer automatisch:
        //        .addFromUI ("conflevel")
                  .print ();
echo ('rk.print (res)\n');
}
                </programlisting>
		<para
><function
>rk.print()</function
> gebruikt het R2HTML-pakket voor &HTML;- geformatteerde uitvoer. Nog een nuttige functie is <function
>rk.results()</function
>, die ook verschillende soorten tabellen kan uitvoeren. Maar bij twijfel gebruikt u gewoon <function
>rk.print()</function
>, en klaar is Kees. De JS class <function
>Header</function
> is een hulpfunctie in JS die <function
>rk.header()</function
> gebruikt (kijk maar naar de gegenereerde &R;-code). Soms kunt u de functie <function
>echo ('rk.header (...)')</function
> direct aanroepen om een koptekst bij uw uitvoer af te drukken. </para>
		<para
>Merk op dat, tot dusver, intern de uitvoer gewoon een kaal &HTML;-document is. U kunt daarom in de verleiding komen om eigen &HTML; toe te voegen met <function
>rk.cat.output()</function
>. Dit werkt, maar doe dit liever niet. Het uitvoerformaat kan in de toekomst veranderen (&eg; naar ODF),dus is het beter geen &HTML;-specifieke code toe te voegen. Beter kunt u een en ander eenvoudig houden, met <function
>rk.header()</function
>, <function
>rk.print()</function
>, <function
>rk.results()</function
>, en -- wanneer nodig -- <function
>rk.print.literal()</function
>. Als dit niet genoeg is, en u meer nodig heeft, neem dan contact met ons op op de mailing list, voor hulp. </para>
		<para
>Gefeliciteerd! U heeft uw eerste plugin gemaakt. Lees verder in de volgende hoofdstukken voor meer gevorderde onderwerpen. </para>
	</sect2>
</sect1>

<sect1 id="jsconventions">
<title
>Conventies, policies, en achtergrond</title>
	<para
>Er zijn meerdere manieren waarop &R;-code kan worden geschreven voor een bepaalde taak, en er zijn zelfs nog meer manieren waarop deze &R;-code met JS kan worden gegenereerd. Hoe u dit precies aanpakt, is helemaal aan u. Maar er zijn een aantal overwegingen die u moet volgen, en achtergrondinformatie die u moet begrijpen. </para>

	<sect2 id="policylocal">
	<title
>De <function
>local()</function
> omgeving begrijpen</title>
		<para
>Vaker wel dan niet moet u een of meer tijdelijke &R;-objecten aanmaken in de code die door uw plugin wordt gegenereerd. Normaal gesproken wilt u die niet plaatsen in de werkruimte (workspace) van de gebruiker, waardoor zelfs misschien variabelen van de gebruiker kunnen worden overschreven. Daarom moet alle door de plugin gegenereerde code werken in een <function
>local()</function
> omgeving (zie &R; help-pagina voor functie <function
>local()</function
>). Dit betekent dat alle variabelen die u aanmaakt tijdelijk zijn, en niet permanent worden opgeslagen. </para>
		<para
>Als de gebruiker expliciet vraagt dat een variabele wordt opgeslagen, moet u dat object (een waarde) toekennen met  <function
>.GlobalEnv$objectname &lt;- value</function
>. Gebruik, in het algemeen gesproken, niet de operator <function
>&lt;&lt;-</function
> operator. Die kent in .GlobalEnv niet noodzakelijk (een waarde) toe. </para>
		<para
>Een grote valkuil is het gebruik van <function
>eval()</function
>. U moet hier beseffen dat eval standaard bij de evaluatie (waardebepaling) de huidige omgeving gebruikt, &ie; de lokale. Meestal werkt dat goed, maar niet altijd. Dus, als u <function
>eval()</function
> nodig heeft, moet u waarschijnlijk de <parameter
>envir</parameter
>-parameter opgeven: <function
>eval(..., envir=globalenv()</function
>). </para>
	</sect2>

	<sect2 id="policyformatting">
	<title
>Programma-code formatteren</title>
		<para
>Het belangrijkste is dat uw gegenereerde &R;-code werkt, maar die moet ook gemakkelijk te lezen zijn. Let er daarom op dat u dit ook goed formatteert. Enkele beschouwingen: </para>
		<para
>Normale top_niveau &R;-statements moeten links uitgelijnd zijn. </para>
		<para
>Statements in een lager blok moeten een tab inspringen (zie onderstaand voorbeeld) </para>
		<para
>Indien u erg complexe berekeningen doet, voeg dan hier en daar wat commentaar toe, vooral om logische secties te markeren. Merk op dat er een speciale functie <command
>comment()</command
> is, voor het toevoegen van vertaalbaar commentaar in de gegenereerde code. </para>
		<para
>Bij voorbeeld, kan de gegenereerde code er aldus uitzien. Dezelfde code zonder inspringen en commentaar zou behoorlijk lastig te lezen zijn, hoewel die maar tamelijk complex is: </para>
		<programlisting
># Bepaal eerst de wobble en de rotatie
my.wobble &lt;- wobble (x, y)
my.rotation &lt;- wobble.rotation (my.wobble, z)

# boggling-methode hangt af van de rotatie
if (my.rotation &gt; wobble.rotation.limit (x)) {
        method &lt;- "foo"
        result &lt;- boggle.foo (my.wobble, my.rotation)
} else {
        method &lt;- "bar"
        result &lt;- boggle.bar (my.wobble, my.rotation)
}
                </programlisting>
	</sect2>

	<sect2 id="policysimplicity">
	<title
>Omgaan met complexe opties</title>
		<para
>Vele plugins doen meer dan een ding. Bij voorbeeld, de plugin <quote
>Descriptive Statistics</quote
> (beschrijvende statistiek) kan gemiddelde, bereik, som, product, mediaan, lengte, &etc; berekenen. Maar gewoonlijk zal de gebruiker alleen maar enkele hiervan berekenen. In zo'n geval, moet u de gegenereerde code zo eenvoudig mogelijk proberen te houden. Die moet alleen die gedeelten bevatten die overeenkomen met de werkelijk geselecteerde opties. U kunt dit bereiken, met een voorbeeld van een algemeen design pattern (ontwerppatroon) zoals u die zou gebruiken (hier, in JS, zouden "domean", "domedian", en "dosd"  &lt;checkbox&gt; elementen zijn): </para>
		<programlisting
>function calculate () {
        echo ('x &lt;- &lt;' + getString ("x") + ')\n');
        echo ('results &lt;- list ()\n');

        if (getBoolean ("domean.state")) echo ("results$" + i18n ("Gemiddelde waarde") + " &lt;- mean (x)\n");
        if (getBoolean ("domedian.state")) echo ("results$" + i18n ("Mediaan") + " &lt;- median (x)\n");
        if (getBoolean ("dosd.state")) echo ("results$" + i18n ("Standaard deviatie") + " &lt;- sd (x)\n");
        //...
}
                </programlisting>
	</sect2>
</sect1>

<sect1 id="jstips">
<title
>Tips en trucs</title>
	<para
>U ziet hier een aantal trucs die het schrijven van plugins kunnen vereenvoudigen: </para>
	<para
>Als u de waarde in een &GUI;-instelling op meerdere plaatsen in uw plugin nodig heeft, kunt u overwegen er in JS een waarde aan te geven, en die te gebruiken in plaats van die keer op keer op te halen met  <function
>getString()/getBoolean()/getList()</function
>. Dit is sneller, leesbaarder, en u hoeft minder te typen: </para>
	<programlisting
>function calculate () {
        var narm = "";        // na.rm=FALSE is standaard in alle functies hieronder
        if (getBoolean ("remove_nas")) {
                $narm = ", na.rm=TRUE";
        }
        // ...
        echo ("results$foo &lt;- foo (x" + narm + ")\n");
        echo ("results$bar &lt;- bar (x" + narm + ")\n");
        echo ("results$foobar &lt;- foobar (x" + narm "\n");
        // ...
}
        </programlisting>
	<para
>De eenvoudige hulp-functie <function
>makeOption()</function
> kan het vaak eenvoudiger maken parameters weg te laten die een standaard waarde waarde hebben: </para>
	<programlisting
>function calculate () {
        var options
        //...
        // Dit doet niets, als VALUE is 0.95 (standaard). Anders voegt het ', conf.int=VALUE' toe aan options.
        options += makeOption ("conf.int", getString ("confint"), "0.95");
        //...
}
        </programlisting>
</sect1>
</chapter>

<chapter id="pluginhelp">
	<title
>Een help-pagina schrijven:</title>
	<para
>Als uw plugin in principe werkt, komt het moment dat u een help-pagina gaat maken. U wilt wellicht niet alle onderliggende concepten uitputtend uit de doeken doen, maar wel enige uitleg geven over sommige opties, en koppelen aan gerelateerde plugins en functies in &R;. </para>
	<tip>
		<para
>Na het lezen van dit hoofdstuk kunt u ook kijken op <link linkend="rkwarddev"
><application
>rkwarddev</application
> pakket</link
>. Hierin zijn enkele &R;-functies die de meeste &XML;-tags voor &rkward; voor u kunnen aanmaken. Het kan, om te beginnen, ook eenvoudige kale help-bestanden voor u aanmaken uit bestaande &XML;-bestanden voor plugins. </para>
	</tip>
	<para
>U kunt zich misschien herinneren dat u dit in uw plugin-&XML; plaatste (als u dit nog niet heeft gedaan, doe het nu): </para>
	<programlisting
>&lt;document&gt;
        [...]
        &lt;help file="bestandsnaam.rkh" /&gt;
        [...]
&lt;/document&gt;
        </programlisting>
	<para
>Waarin u, natuurlijk, <filename
>bestandsnaam</filename
> vervangt door de juiste naam. Het is nu tijd het <literal role="extension"
>.rkh</literal
>-bestand aan te maken. Hier volgt een voorbeeld dat voor zichzelf spreekt: </para>
	<programlisting
>&lt;!DOCTYPE rkhelp&gt;
&lt;document&gt;
        &lt;summary&gt;
In deze sectie plaatst u wat erg korte basisinformatie over het doel van uw plugin.
Deze sectie staat altijd helemaal bovenaan in de helppagina.
        &lt;/summary&gt;

        &lt;usage&gt;
De gebruikssectie kan wat meer praktische informatie bevatten. Niet alle instellingen worden tot in detail uitgelegd (maar dat gebeurt in de sectie “instellingen”).

U kunt een nieuwe alinea beginnen met een lege regel, zoals u hierboven ziet.
Deze regel, daarentegen, is in dezelfde alinea.

In alle secties kunt u eenvoudige HTML-code invoegen, zoals &lt;b&gt; bold&lt;/b&gt; of
&lt;i&gt;italic&lt;/i&gt; text. Maar beperk dit formatteren tot het minimum nodige.

De gebruikssectie is altijd de tweede sectie in de help-pagina.
        &lt;/usage&gt;

        &lt;section id="sectionid" title="Algemene sectie" short_title= "Algemeen"&gt;
Indien nodig kunt u secties toevoegen tussen de secties voor gebruiken instellingen.
Maar voor het documenteren van plugins heeft u dit gewoonlijk niet nodig. Het“id”-attribuut
geeft een ankerpunt voor het springen naar deze sectie vanuit het navigatiemenu.Het "short_title"
attribuut geeft een korte naam voor in de navigatiebalk. Dit is optioneel, standaard
wordt de hoofd"naam" gebruikt, zowel als kopnaam voor de sectie, als voor de naam van de koppeling
in de navigatiebalk.

In elke sectie kunt u koppelingen invoegen naar verdere informatie. U doet dit met het toevoegen van

&lt;link href="URL"&gt;link name&lt;/link&gt;

Waarin URL een externe koppeling kan zijn zoals http://rkward.kde.org .
Enkele speciale URL’s worden in de help-pagina’s ondersteund:

&lt;link href="rkward://pagina/pad/pagina_id"/&gt;

Dit koppelt naar een topniveau help-pagina in rkward (geen plugin).

&lt;link href="rkward://component/[namespace/]component_id"/&gt;

Dit koppelt naar de help-pagina van een andere plugin. Het [namespace/] deel kan worden weggelaten
(in dit geval wordt rkward aangenomen als standaard namespace, bv.:
&lt;link href="rkward://component/import_spss"/&gt; of
&lt;link href="rkward://component/rkward/import_spss"/&gt; zijn equivalent).
De component_id is dezelfde als die u opgaf in de <link linkend="pluginmap"
>&pluginmap;</link
>.

&lt;link href="rkward://rhelp/rfunction"/&gt;

Kopppelt naar de help-pagina van &R; voor "rfunction".

Merk op dat de namen van de koppelingen van dit type koppelingen automatisch worden gegenereerd.
        &lt;/section&gt;

        &lt;settings&gt;
                &lt;caption id="id_of_tab_or_frame"/&gt;
                &lt;setting id="id_of_element"&gt;
Beschrijving van het GUI-element behorend bij de gegeven id
                &lt;/setting&gt;
                &lt;setting id="id_of_elementb" title="beschrijving"&gt;
Gewoonlijk komt de naam van het GUI-element automatisch uit de
<link linkend="mainxml"
>XML-definitie van de plugin</link
>, Maar
voor sommige GUI-elementen is deze beschrijving onvoldoende voor betrouwbare identificatie.
In dat geval kunt u een expliciete naam toevoegen met het “title”-attribuut.
                &lt;/setting&gt;
                &lt;setting id="id_of_elementc"&gt;
Beschrijving van het GUI-element behorend bij "id_of_elementc"
                &lt;/setting&gt;
                [...]
        &lt;/settings&gt;

        &lt;related&gt;
De bijbehorende sectie bevat typisch slechts enkele koppelingen, zoals:

&lt;ul&gt;
        &lt;li&gt;&lt;link href="rkward://rhelp/mean"/&gt;&lt;/li&gt;
        &lt;li&gt;&lt;link href="rkward://rhelp/median"/&gt;&lt;/li&gt;
        &lt;li&gt;&lt;link href="rkward://component/related_component"/&gt;&lt;/li&gt;
&lt;/ul&gt;
        &lt;/related&gt;

        &lt;technical&gt;
De technische sectie (optioneel, altijd laatst) kan wat technische details over de implementatie van
de plugin bevatten, die alleen van belang zijn voor RKWard-ontwikkelaars. Dit is vooral van belang bij
plugins, die in veel andere plugins moeten worden ingebed, en kunnen vermelden welke opties
er zijn voor het aanpassen van de ingebedde plugins, en welke codesectieswelke
R code bevatten.
        &lt;/technical&gt;
&lt;/document&gt;
        </programlisting>
</chapter>


<chapter id="logic">
<title
>Logische interacties tussen &GUI;-elementen</title>
<sect1 id="sect_GUI_logic"
><title
>&GUI;-logica</title>
	<para
>Alle basisconcepten voor het maken van een plugin voor &rkward; zijn beschreven in de vorige hoofdstukken. Dit zou voldoende moeten zijn voor veel --  zo niet de meeste -- gevallen. Maar soms wilt u toch meer controle hebben over het gedrag van de &GUI; van uw plugin. </para>
	<para
>Bij voorbeeld, stel dat u het t-testvoorbeeld in deze documentatie wilt uitbreiden om beide mogelijk te maken: het vergelijken van een variabele met een andere variabele (zoals getoond), en het vergelijken van een variabele met een constante waarde. Nu, een manier is een radioknop toe te voegen die tussen beide mogelijkheden schakelt, of het toevoegen van een spinveld voor de invoer van de constante waarmee moet worden vergeleken. Zie dit vereenvoudigde voorbeeld: </para>
	<programlisting
>&lt;!DOCTYPE rkplugin&gt;
&lt;document&gt;
        &lt;code file="code.js"/&gt;

        &lt;dialog label="T-Test"&gt;
                &lt;row&gt;
                        &lt;varselector id="vars"/&gt;
                        &lt;column&gt;
                                &lt;varslot id="x" types="getal" source="vars" required="true" label="vergelijken"/&gt;
                                &lt;radio id="mode" label="Vergelijken met"&gt;
                                        &lt;option value="variabele" checked="true" label="een andere variabele (selecteer hieronder)"/&gt;
                                        &lt;option value="constante" label="een constante (hieronder instellen)"/&gt;
                                &lt;/radio&gt;
                                &lt;varslot id="y" types="getal" source="vars" required="true" label="variable" i18n_context="Zelfst, nw.; een variabele"/&gt;
                                &lt;spinbox id="constante" initial="0" label="constante" i18n_context="Zelfst. nw.; een constante"/&gt;
                        &lt;/column&gt;
                &lt;/row&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Nou, dat is dan mooi, maar er zijn met deze &GUI; wel een paar problemen. Ten eerste zijn de varslot en het spinveld altijd allebei zichtbaar, terwijl maar één ervan werkelijk wordt gebruikt. Erger is dat er voor de varslot altijd een geldige sectie aanwezig moet zijn, zelfs als er met een constante wordt vergeleken. Het is duidelijk, dat als we een voor meerdere doeleinden geschikte &GUI; willen maken, we wat meer flexibiliteit wensen. Dit leidt tot: de <command
>&lt;logic&gt;</command
> sectie (ingevoegd op het zelfde niveau als <command
>&lt;code&gt;</command
>, <command
>&lt;dialog&gt;</command
>, of <command
>&lt;wizard&gt;</command
>). </para>
	<programlisting
>[...]
        &lt;code file="code.js"/&gt;

        &lt;logic&gt;
                &lt;convert id="varmode" mode="gelijk aan" sources="mode.string" standard="variable" /&gt;

                &lt;connect client="y.visible" governor="varmode" /&gt;
                &lt;connect client="constant.visible" governor="varmode.not" /&gt;
        &lt;/logic&gt;

        &lt;dialog label="T-Test"&gt;
        [...]
        </programlisting>
	<para
>De eerste regel in de logische sectie is een <command
>&lt;convert&gt;</command
>- tag (conversie, omzetten). In principe geeft dit een nieuwe boolean (aan of uit, true of false) eigenschap, die later kan worden gebruikt. Deze eigenschap (<replaceable
>"varmode"</replaceable
>) is waar wanneer de bovenste radioknop geselecteerd is, en false wanneer de onderste is geselecteerd. Hoe komt dat? </para>
	<para
>Ten eerste, onder <parameter
>sources</parameter
>, worden de broneigenschappen waarmee wordt gewerkt in een lijst genoemd (in dit geval voor elk een; u kunt meerderebronnen opnemen met <parameter
>sources=</parameter
><replaceable
>"mode.string;ietsanders"</replaceable
>, dan is  <replaceable
>"varmode"</replaceable
> alleen waar indien zowel <replaceable
>"mode.string"</replaceable
> als <replaceable
>"ietsanders"</replaceable
> gelijk zijn aan de <replaceable
>"variable"</replaceable
>). Merk op dat in dit geval we niet alleen <replaceable
>"mode"</replaceable
> schrijven (zoals in <function
>getString("mode")</function
>), maar <replaceable
>"mode.string"</replaceable
>. Dit is in principe hoe een radioknop werkt: die heeft een eigenschap <quote
>string</quote
>, die zijn string-waarde bevat.<function
>getString("mode")</function
> is alleen maar korter, en gelijk aan <function
>getString("mode.string")</function
>. Zie ook de beschrijving van alle eigenschappen van de &GUI;-elementen. </para>
	<para
>Ten tweede, stellen we de conversiemodus in op <parameter
>mode=</parameter
><replaceable
>"gelijk aan"</replaceable
>. Dit betekent dat we willen controleren of de bron(nen) gelijk is (zijn) aan een bepaalde waarde. Tenslotte, is standaard de waarde waarmee we willen vergelijken, dus met <parameter
>standard=</parameter
><replaceable
>"variable"</replaceable
> controleren we of de eigenschap <replaceable
>"mode.string"</replaceable
> gelijk is aan de string <replaceable
>"variable"</replaceable
> (de waarde van de bovenste radio-optie). Indien gelijk, is de eigenschap varmode true, en anders false. </para>
	<para
>Nu komt waar het allemaal om draait: We <command
>&lt;connect&gt;</command
> (verbinden) de eigenschap <replaceable
>"varmode"</replaceable
> met y.visible, die bepaalt of de varslot <replaceable
>"y"</replaceable
> visible (zichtbaar) is of niet. Merk op  dat elk element dat onzichtbaar wordt gemaakt, impliciet niet vereist is. Dus als de bovenste radioknop wordt geselecteerd, is de varslot <replaceable
>"y"</replaceable
> vereist, en zichtbaar, en anders niet vereist en niet zichtbaar. </para>
	<para
>Voor het spinveld willen we precies het omgekeerde. Gelukkig hebben we hiervoor niet nog een <command
>&lt;convert&gt;</command
> nodig: Boolean eigenschappen kunnen zeer eenvoudig met <replaceable
>"not"</replaceable
> (dat is:niet), worden omgekeerd, dus  <command
>&lt;connect&gt;</command
> <replaceable
> (verbinden) we "varmode.not"</replaceable
> met de zichtbaarheid-eigenschap van het spinveld. Hierdoor wordt of de varslot zichtbaar en vereist, <emphasis
>of</emphasis
> het spinveld - afhankelijk van welke optie werd gekozen met de radio-knoppen. De &GUI; past zichzelf aan afhankelijk van welke optie wordt gekozen. U kunt dit voorbeeld als u dit wilt, zelf uitproberen. </para>
	<para
>Voor een complete lijst van eigenschappen, zie de  <link linkend="reference"
>naslag</link
>. Er is echter nog een eigenschap, die alle &GUI;-elementen hebben:  <quote
>aangezet</quote
>. Dit is iets minder drastisch dan <quote
>zichtbaar</quote
>. Het maakt het &GUI;-element niet zichtbaar of niet, maar zet het alleen maar aan of uit. Uitgezette elementen worden gewoonlijk grijs getoond, en reageren niet op acties van de gebruiker. </para>
	<note>
		<para
>Behalve <command
>&lt;convert&gt;</command
> en <command
>&lt;connect&gt;</command
>, zijn er nog meer elementen die in de <command
>&lt;logic&gt;</command
> sectie kunnen worden gebruikt. Bijv. conditionele constructs kunnen ook worden geïmplementeerd met het <command
>&lt;switch&gt;</command
>-element. Zie de <link linkend="logicelements"
>naslag voor logische elementen</link
> voor details.</para>
	</note>
</sect1>
<sect1 id="logic_scripted">
<title
>&GUI;-logica in scripts</title>
	<para
>Hoewel het verbinden van eigenschappen, zoals hierboven beschreven, vaak voldoende is, is het soms flexibeler of eenvoudiger, de &GUI;-logica in een script te beschrijven. Op die manier kan het bovenstaande voorbeeld worden herschreven naar: </para>
	<programlisting
>[...]
        &lt;code file="code.js"/&gt;
'
        &lt;logic&gt;
                &lt;script&gt;&lt;![CDATA[
                        // ECMAScript-code in dit blok
                        // de top-level statement wordt maar een keer aangeroepen
                        gui.addChangeCommand ("mode.string", "modeChanged ()");

                        // deze functie wordt aangeroepen als "mode" wordt gewijzigd
                        modeChanged = function () {
                                var varmode = (gui.getString ("mode.string") == "variable");
                                gui.setValue ("y.enabled", varmode);
                                gui.setValue ("constante.enabled", !varmode);
                        }
                ]]&gt;&lt;/script&gt;
        &lt;/logic&gt;

        &lt;dialog label="T-Test"&gt;
        [...]
        </programlisting>
	<para
>In de eerste regel staat dat &rkward; de functie <function
>modeChanged()</function
> (modusGewijzigd)moet aanroepen als de waarde van de radioknop <parameter
>id=</parameter
><replaceable
>"mode"</replaceable
> verandert. In deze functie definiëren we een hulpvariabele <replaceable
>"varmode"</replaceable
>  die true is wanneer de modus <replaceable
>"variabele"</replaceable
> is, en false als die   <replaceable
>"constante"</replaceable
> is. Daarna gebruiken we <function
>gui.setValue()</function
> om de eigenschappen op <quote
>aan</quote
> te zetten van <replaceable
>"y"</replaceable
> en <replaceable
>"constant"</replaceable
>, op precies dezelfde manier als we dat eerder deden met de <command
>&lt;connect&gt;</command
> statements. </para>
	<para
>Het maken van scripts voor de &GUI;-logica is bijzonder nuttig wanneer u de beschikbare optie wilt aanpassen aan het type object dat door de gebruiker wordt geselecteerd. Zie welke functies er zijn in <link linkend="guilogic_functions"
>de naslag</link
>. </para>
	<para
>Merk op dat dit maken van scripts voor de &GUI;-logica kan samengaan met de statements  <command
>&lt;connect&gt;</command
> en <command
>&lt;convert&gt;</command
> als u dat wilt.Ook maakt de  <command
>&lt;script&gt;</command
>-tag het mogelijk de bestandsnaam van een script op te geven naast, of in plaats van, het Inlinen (invoegen) van de scriptcode. Het inlinen, zoals hierboven, is echter gewoonlijk het eenvoudigst. </para>
</sect1>
</chapter>

<chapter id="embedding">
<title
>Plugins inbedden  in Plugins</title>
<sect1 id="sect_embedding"
><title
>Voorbeelden van plugins in plugins</title>
	<para
>Als u plugins schrijft, merkt u vaak dat u een aantal plugins aan het maken bent die maar op enkele punten van elkaar verschillen, maar veel met elkaar gemeen hebben. Bijvoorbeeld, voor plotten, zijn er een aantal algemene &R;-opties, die kunnen worden gebruikt in bijna alle typen van plots. Moet u nu een &GUI;- en JS-sjabloon (template) voor elk apart aanmaken? </para>
	<para
>Het is duidelijk dat dat niet echt handig zou zijn. Gelukkig hoeft dat niet. U kunt beter de gemeenschappelijke functionaliteit één keer aanmaken, en dit later in andere plugins invoegen. Het is in feite mogelijk elke plugin in te voegen in elke andere plugin, ook als de originele schrijver er nooit aan gedacht zou hebben dat zijn plugin daarvoor zou worden gebruikt. </para>
</sect1>
<sect1 id="embedding_dialog">
<title
>Invoegen in een dialoog</title>
	<para
>OK, genoeg. Hoe werkt dit? Eenvoudig: gebruik de <command
>&lt;embed&gt;</command
>-tag (embed is invoegen, opnemen, inbedden). Hier is een uitgekleed voorbeeld:  </para>
	<programlisting
>&lt;dialog&gt;
        &lt;tabbook&gt;
                &lt;tab [...]&gt;
                        [...]
                &lt;/tab&gt;
                &lt;tab label="Plot Opties" i18n_context="Opties voor de plot"&gt;
                        &lt;embed id="plotopties" component="rkward::plot_options"/&gt;
                &lt;/tab&gt;
                &lt;tab [...]&gt;
                        [...]
                &lt;/tab&gt;
        &lt;/tabbook&gt;
&lt;/dialog&gt;
        </programlisting>
	<para
>Wat hier gebeurt, is dat de gehele &GUI; of de plugin met de plotopties (behalve natuurlijk voor de standaard elementen zoals de knop <guibutton
>Indienen</guibutton
> &etc;) meteen in uw plugin worden opgenomen (probeer het maar!). </para>
	<para
>U ziet dat de syntaxis van de <command
>&lt;embed&gt;</command
>-tag tamelijk eenvoudig is. Zoals de meeste elementen heeft het een <parameter
>id</parameter
> (naam). De parameter-component geeft op welke plugin moet worden ingevoegd, zoals bepaald in het &pluginmap;-bestand (<replaceable
>"rkward::plot_opties"</replaceable
> is het  resultaat van het aan elkaar plakken van de naamruimte (namespace) <quote
>rkward</quote
>, een scheidingsteken <quote
>::</quote
>, en de naam van de component <quote
>plot_opties</quote
>). </para>
</sect1>
<sect1 id="embedding_code">
<title
>Het genereren van code tijdens het invoegen</title>
	<para
>Mooi dan, maar hoe is het met de gegenereerde code? Hoe worden de codes van de invoegende en ingevoegde plugins in elkaar geschoven (merged)? In de JS code van de invoegende plugin schrijft u eenvoudig zoiets als het volgende: </para>
	<programlisting
>function printout () {
        // ...
        echo ("myplotfunction ([...]" + getString ("plotopties.code.printout"); + ")\n");
        // ...
}
        </programlisting>
	<para
>Dus, in principe, halen we de code die gegenereerd is door de ingebedde plugin op, net zoals we elke andere &GUI;-instelling kunnen ophalen. Hier kan de string <replaceable
>"plotopties.code.printout"</replaceable
> worden ontrafeld tot: <quote
>de af te drukken sectie van de  gegenereerde code van het element met de <parameter
>id</parameter
> (naam) plotopties</quote
> (plotopties is de ID die we gaven aan de <command
>&lt;embed&gt;</command
>-tag hierboven). En ja, als u meer controle wilt, kunt u zelfs de waarden ophalen van de afzonderlijke &GUI;-elementen in deingebedde plugin (maar niet de andere kant op, omdat de ingebedde plugin niets weet over zijn omgeving). </para>
</sect1>
<sect1 id="embedding_wizard">
<title
>Inbedden in een assistent (wizard)</title>
	<para
>Indien uw plugin een &GUI; voor een assistent heeft, gaat het inbedden op dezelfde manier. Gewoonlijk gebruikt u: </para>
	<programlisting
>&lt;wizard [...]&gt;
                [...]
                &lt;page id="page12"&gt;
                        [...]
                &lt;/page&gt;
                &lt;embed id="plotopties" component="rkward::plot_opties"/&gt;
                &lt;page id="pagina13"&gt;
                        [...]
                &lt;/page&gt;
                [...]
        &lt;/wizard&gt;
        </programlisting>
	<para
>Indien de ingebedde plugin een assistent-interface heeft, worden de pagina's daarvan ingevoegd tussen de pagina's <replaceable
>"pagina12"</replaceable
> en <replaceable
>"pagina13"</replaceable
> van uw plugin. Indien de ingebedde plugin alleen een dialoog-interface heeft, wordt een enkele nieuwe pagina ingevoegd tussen die pagina's. De gebruiker zal hier niets van merken.  </para>
</sect1>
<sect1 id="embedding_as_button">
<title
>Minder ingebedde inbedding: knop voor verdere opties</title>
	<para
>Ook al is inbedden wel leuk, moet u toch oppassen dat niet te veel te doen. Teveel functies in een &GUI; maakt het moeilijk de relevante opties te vinden. Natuurlijk wilt u soms een groot aantal opties inbedden (zoals alle opties voor de <function
>plot()</function
>-functie), maar omdat die eigenlijk optioneel zijn, wilt u die niet prominent in uw &GUI; hebben. </para>
	<para
>Een alternatief voor inbedden is dit te doen <quote
>als een knop</quote
>: </para>
	<programlisting
>&lt;dialog&gt;
        &lt;tabbook&gt;
                [...]
                &lt;tab label="Opties"&gt;
                        [...]
                        &lt;embed id="plotopties" component="rkward::plot_opties" as_button="true" label="Plotopties opgeven"/&gt;
                &lt;/tab&gt;
                [...]
        &lt;/tabbook&gt;
&lt;/dialog&gt;
</programlisting>
	<para
>In dit geval wordt een enkele drukknop aan uw plugin toegevoegd, met de naam <guibutton
>Plotopties opgeven</guibutton
>. Wanneer u op die knop drukt, komt er een afzonderlijke dialoog op, met alle opties van de ingebedde plugin. Zelfs als deze ingebedde &GUI; meest  onzichtbaar is, kunt u de instellingen ervan ophalen zoals  <link linkend="embedding_code"
>hierboven</link
> beschreven. </para>
	<para>
		<caution>
			<para
>Waarschijnlijk moeten <quote
>knoppen</quote
> alleen worden worden gebruikt in plugins die nooit ongeldig kunnen zijn (door ontbrekende/ongeldige instellingen). Anders kan de gebruiker zijn code misschien niet indienen, en veel moeite hebben met het uitzoeken waarom dit niet kan, omdat de reden daarvan achter een of andere knop is verborgen. </para
>	
		</caution>
	</para>
</sect1>
<sect1 id="embedding_incomplete">
<title
>Inbedden/definiëren van onvolledige plugins</title>
	<para
>Sommige plugins -- en in feite behoren de plotopties zoals in het voorbeeld hierboven daartoe -- zijn op zichzelf incompleet. Zij bevatten domweg niet de &GUI;-elementen nodig voor het selecteren van enkele belangrijke waarden. Zij zijn alleen bedoeld om ingebed te worden in andere plugins. </para>
	<para
>In hoeverre is de plugin voor plotopties incompleet? Wel, voor sommige plotinstellingen moet die de naam kennen van de objecten/expressies voor de x- en de y-as (eigenlijk is een daarvan voldoende). Maar er is geen mechanisme aanwezig voor het selecteren van die objecten, of die op enige andere manier in te voeren. Dus hoe moet de plugin die kennen? </para>
	<para
>In de logische sectie van de plugin voor plot_opties, zijn twee extra regels, die nog niet zijn besproken: </para>
	<programlisting
>&lt;logic&gt;
                &lt;external id="xvar" /&gt;
                &lt;external id="yvar" /&gt;

                [...]
        &lt;/logic&gt;
        </programlisting>
	<para
>Hierin worden twee extra eigenschappen gedefinieerd in de plugin voor plot_opties, waarvan het enige doel is dat die worden verbonden (connected) aan enige (nu nog onbekende) eigenschap van de inbeddende plugin. In de plugin voor plot_opties worden die twee opties eenvoudigweg gebruikt zoals elke andere, en bijvoorbeeld zijn er aanroepen naar <function
>getString("xvar")</function
> in de JS sjabloon voor plot_opties. </para>
	<para
>Nu is er voor de incomplete plugin geen enkele manier waarop die weet waarin die zal worden ingebed, en welke relevante instellingen in de inbeddende plugin zullen worden gebruikt. Dus moeten we ook nog twee regels toevoegen aan de logische sectie van de inbeddende plugin: </para>
	<programlisting
>&lt;logic&gt;
                [...]

                &lt;connect client="plotoptions.xvar" governor="xvarslot.available" /&gt;
                &lt;connect client="plotoptions.yvar" governor="yvarslot.available" /&gt;
        &lt;/logic&gt;
        </programlisting>
	<para
>Hier is niets nieuws, in principe, we hebben de <command
>&lt;connect&gt;</command
>-statements besproken in het <link linkend="logic"
>hoofdstuk van de &GUI;-logica</link
>. U verbindt (connect) de waarden in twee varslots (genaamd <replaceable
>"xvarslot"</replaceable
> en <replaceable
>"yvarslot"</replaceable
> in dit voorbeeld) met de <quote
>externe</quote
> eigenschappen van de ingebedde plugin. En dat is het. Al het andere wordt verder automatisch geregeld. </para>
</sect1>
</chapter>

<chapter id="plugin_series">
<title
>Werken met vele soortgelijke plugins</title>
<sect1 id="sect_similar_plugins"
><title
>Overzicht van de verschillende werkwijzen</title>
	<para
>Soms wilt u misschien plugins ontwikkelen voor een aantal soortgelijke functies. Beschouw bijvoorbeeld de plots van verdelingsfuncties. Deze genereren tamelijk soortgelijke code, en het is natuurlijk wenselijk de grafische interfaces ervan op elkaar te laten lijken. En ook kunnen grote delen van de help-pagina's identiek zijn. In elke plugin zijn maar een klein aantal parameters verschillend. </para>
	<para
>De naïeve aanpak is één plugin te maken, en dan de gehele inhoud te kopiëren van de  <literal role="extension"
>.js</literal
>, <literal role="extension"
>.xml</literal
>, en <literal role="extension"
>.rkh</literal
>-bestanden, en daarna die paar onderdelen te wijzigen die verschillend zijn. Maar wat doet u als u later een spelfout ontdekt die in alle andere bestanden gekopieerd is? U zult ze allemaal stuk voor stuk moeten verbeteren. Een vermoeiend en taai werkje.  </para>
	<para
>Een tweede aanpak is met behulp van <link linkend="embedding"
>inbedding</link
>. Maar dit is voor dit probleem soms niet erg handig, vooral omdat de <quote
>brokken</quote
> die u in kunt bedden  soms te groot zijn, en de indeling (layout) er door wordt beperkt.In deze gevallen  kunnen concepten zoals het <link linkend="include_js"
>opnemen van <literal role="extension"
>.js</literal
>-bestanden</link
>, <link linkend="include_xml"
>opnemen van <literal role="extension"
>.xml</literal
>-bestanden</link
> en <link linkend="snippets"
>korte stukjes</link
> erg nuttig zijn (maar zie  <link linkend="include_snippets_vs_embedding"
>gedachten over wanneer inbedden verkiesbaar is</link
>). </para>
	<para
>Een waarschuwing echter, voordat u begint te lezen: deze concepten kunnen het eenvoudiger maken met soortgelijke plugins te werken, en de onderhoudbaarheid en leesbaarheid van die plugins verbeteren (onderhouden is het eventueel later aanbrengen van verbeteringen). Maar teveel kan al spoedig leiden tot het omgekeerde effect. Gebruik dit dus voorzichtig. </para>
</sect1>
<sect1 id="include_js">
<title
>Met behulp van de JS include statement</title>
	<para
>In &rkward;-plugins kunt u gemakkelijk een scriptbestand in een ander includen (insluiten, opnemen). De waarde hiervan is onmiddellijk duidelijk, indien gedeelten van uw JS-code in plugins met elkaar overeenkomen. U definieert eenvoudig die gedeelten in een apart <literal role="extension"
>.js</literal
>-bestand, en neemt die op in  al die <literal role="extension"
>.js</literal
>-bestanden van de plugins. Bijvoorbeeld, zoals in: </para>
	<programlisting
>// Dit is een bestand met de naam "common_functions.js"

function doCommonStuff () {
        // haal mogelijk wat opties op, etc.
        // ...
        comment ("Dit is R-code voor gebruik in andere plugins\n");
        // ...
}
        </programlisting>
	<programlisting
>// Dit is een van uw gewone plugin <literal role="extension"
>.js</literal
> bestanden

// includen (opnemen) van de gemene functies
include ("common_functions.js");

function calculate () {
        // doe iets
        // ...

        // invoegen gemene code
        doCommonStuff ();
}
        </programlisting>
	<para
>Merk op dat het soms zelfs nog nuttiger is, dit om te keren en een  <quote
>kale</quote
> <function
>preprocess()</function
>, <function
>calculate()</function
>, en <function
>printout()</function
> -functies in een gemeenschappelijk bestand te definiëren, en deze die gedeelten aan te laten roepen (call), die in de diverse plugins verschillend zijn. Bijv.: </para>
	<programlisting
>// Dit is een bestand met de naam "common_functions.js"

function calculate () {
        // doe dingen die in alle plugins hetzelfde zijn
        // ...

        // voeg iets toe dat verschillend is in de plugins
        getSpecifics ();

        // ...
}
        </programlisting>
	<programlisting
>// dit is een van uw gewone plugin <literal role="extension"
>.js</literal
>-bestanden

// includen van de gemene functies
include ("common_functions.js");

// merk op: geen calculate()-functie wordt hier gegeven.
// maar in plaats daarvan in de common_functions.js.

function getSpecifics () {
        // enige R-code afdrukken
}
        </programlisting>
	<para
>Een probleem waar u op moet letten, met deze techniek, is de scopes van de variabelen. Zie het handboek van JS voor scopes van variabelen. (de scope van een variabele is het codegebied waarin de variabele bestaat). </para>
	<para
>Deze techniek wordt veel gebruikt in de plugins voor (CLT)plots van verdelingsfuncties, dus kunt daar voorbeelden hiervan vinden. </para>
</sect1>

<sect1 id="include_xml">
<title
>Includen van <literal role="extension"
>.xml</literal
>-bestanden</title>
	<para
>In principe is de zelfde mogelijkheid van het insluiten (include) van bestanden ook aanwezig voor de <literal role="extension"
>.xml</literal
>, &pluginmap; en <literal role="extension"
>.rkh</literal
>-bestanden. Overal in deze bestanden kunt u een<command
>&lt;include&gt;</command
>-tag plaatsen, zoals u hieronder kunt zien. Het effect is dat de gehele inhoud van het &XML;-bestand (om precies te zijn: alles binnen  de <command
>&lt;document&gt;</command
>-tag van dat bestand) letterlijk op dit punt in het bestand wordt ingesloten. Merk op dat u alleen een ander  &XML;-bestand kunt includen. </para>
	<programlisting
>&lt;document&gt;
        [...]
        &lt;include file="een_ander_xml_bestand.xml"/&gt;
        [...]
&lt;/document&gt;
        </programlisting>
	<para
>Het <parameter
>file</parameter
>-attribuut is de bestandsnaam relatief tot de directory waarin het huidige bestand zich bevindt. </para>
</sect1>

<sect1 id="snippets">
<title
>&lt;snippets&gt; gebruiken</title>
	<para
>Waar met het includen van bestanden zoals in de <link linkend="include_xml"
>vorige sectie</link
> aan bod kwam tamelijk veel mogelijk is, wordt het het nuttigst in combinatie met de <command
>&lt;snippets&gt;</command
>-opdracht. Snippets zijn kleinere secties die u kunt invoegen in een ander deel van het bestand. Een voorbeeld maakt dit het duidelijkst: </para>
	<programlisting
>&lt;document&gt;
        &lt;snippets&gt;
                &lt;snippet id="notitie"&gt;
                        &lt;frame&gt;
                                &lt;text&gt;
                Dit wordt op twee plaatsen in de GUI ingevoegd
                                &lt;/text&gt;
                        &lt;/frame&gt;
                &lt;/snippet&gt;
        &lt;/snippets&gt;
        &lt;dialog label="test"&gt;
                &lt;column&gt;
                        &lt;insert snippet="notitie"/&gt;
                        [...]
                        &lt;insert snippet="notitie"/&gt;
                &lt;/column&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Dus u definieert een snippet op een plaats bovenin het &XML;-bestand, en daarna <command
>&lt;insert&gt;</command
> (invoegen) u die op elke plaats die u wenst. </para>
	<para
>Hoewel dit voorbeeld op zichzelf niet bijster nuttig is, kunt u denken aan het combineren hiervan met een <command
>&lt;include&gt;</command
>d <literal role="extension"
>.xml</literal
>-bestand. Merk op dat u in hetzelfde bestand ook snippets kunt plaatsen voor het <literal role="extension"
>.rkh</literal
>-bestand. U  <command
>&lt;include&gt;</command
> het bestand eenvoudig ook daar, en <command
>&lt;insert&gt;</command
> de relevante snippet: </para>
	<programlisting
>&lt;!-- Dit is een bestand genaamd "common_snippets.xml" --&gt;
&lt;document&gt;
        &lt;snippet id="common_opties"&gt;
                &lt;spinbox id="iets" [...]/&gt;
                [...]
        &lt;/snippet&gt;
        &lt;snippet id="common_notitie"&gt;
                &lt;text&gt;Een belangrijke notitie voor dit type plugin&lt;/text&gt;
        &lt;/snippet&gt;

        &lt;snippet id="common_help"&gt;
                &lt;setting id="iets"&gt;Dit doet iets&lt;/setting&gt;
                [...]
        &lt;/snippet&gt;
&lt;/document&gt;
        </programlisting>
	<programlisting
>&lt;!-- Dit is het .xml-bestand van de plugin --&gt;
&lt;document&gt;
        &lt;snippets&gt;
                &lt;!-- Importeer de common snippets --&gt;
                &lt;include file="common_snippets.xml"/&gt;
        &lt;/snippets&gt;

        &lt;dialog label="test2"&gt;
                &lt;insert snippet="common_notitie"/&gt;
                &lt;spinbox id="iets_plugin_specifiek" [...] /&gt;
                &lt;insert snippet="common_opties"/&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Gelijk aan <link linkend="include_js"
>inclusie in JS</link
>, is de omgekeerde aanpak vaak zelf nog nuttiger: </para>
	<programlisting
>&lt;!-- Dit is een bestand met de naam "common_layout.xml" --&gt;
&lt;document&gt;
        &lt;column&gt;
                &lt;insert snippet="notitie"&gt;
                [...]
                &lt;insert snippet="plugin_parameters"&gt;
        &lt;/column&gt;
        [...]
&lt;/document&gt;
        </programlisting>
	<programlisting
>&lt;!-- Dit is het .xml-bestand van de plugin --&gt;
&lt;document&gt;
        &lt;snippets&gt;
                &lt;snippet id="notitie"&gt;
                        &lt;text&gt;De notitie voor deze specifieke plugin&lt;/text&gt;
                &lt;/snippet&gt;

                &lt;snippet id="plugin_parameters"&gt;
                        &lt;frame label="Parameters specifiek voor deze plugin"&gt;
                                [...]
                        &lt;/frame&gt;
                &lt;/snippet&gt;
        &lt;/snippets&gt;

        &lt;dialog label="test3"&gt;
                &lt;include file="common_layout.xml"/&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Het is tenslotte ook mogelijk snippets <command
>&lt;in te voegen&gt;</command
> in andere snippets, als: a) ze niet in elkaar zijn genest, en b) de <command
>&lt;snippets&gt;</command
>-sectie bovenin het  bestand is geplaatst (voordat een geneste snippet wordt ingevoegd); dit omdat <command
>&lt;insert&gt;</command
>-statements worden gelezen van boven naar beneden. </para>
</sect1>

<sect1 id="include_snippets_vs_embedding">
<title
>&lt;include&gt; en &lt;snippets&gt; vs. &lt;embed&gt;</title>
	<para
>Op het eerste gezicht geven <command
>&lt;include&gt;</command
> en <command
>&lt;snippets&gt;</command
> mogelijkheden die nogal gelijk zijn aan  <link linkend="embedding"
>inbedden</link
>: zij maken het mogelijk dat stukjes code in de plugins worden hergebruikt. Dus wat is het verschil tussen deze methoden van aanpak, en wanneer moet u welke gebruiken? </para>
	<para
>Het voornaamste verschil tussen deze concepten is dat in te bedden plugins een wat strakker geheel zijn. Zij combineren een complete &GUI;, code om &R;-code hieruit te genereren, en een help-pagina. In contrast daarmee maken include en insert meer  fijncontrole mogelijk, maar ten koste van minder modulariteit. </para>
	<para
>Dit betekent dat een plugin die een andere plugin inbedt niets hoeft te weten over de interne details van de ingebedde plugin. Een goed voorbeeld hiervan is de plugin met plot-opties. Plugins waarin deze plugin wordt ingebed, hoeven niet noodzakelijk alle beschikbare opties te kennen, of hoe die te gebruiken. Dit is goed, omdat anders, als een plugin met plot_opties wordt gewijzigd, het nodig zal zijn om alle plugins die de plugin hebben ingebed, hieraan moeten worden aangepast. In tegenstelling daarmee, tonen include en insert al hun interne details, en plugins die daarvan gebruik maken, moeten -- bijvoorbeeld -- alle ids (namen) en misschien zelfs typen kennen van de gebruikte elementen. </para>
	<para
>De vuistregel is daarom als volgt: include en insert zijn prachtig als de relevante opties slechts nodig zijn in een duidelijk beperkte groep plugins. Ingebedde plugins zijn beter wanneer de groep plugins waarvoor ze bruikbaar zijn niet helder afgebakend is, en als hun functionaliteit gemakkelijk kan worden verdeeld over modules. Nog een vuistregel: als de gemeenschappelijke gedeelten in een enkel <quote
>brokstuk</quote
> kan worden gestopt, doe dat dan, en gebruik inbedden. Indien veel kleine snippets nodig zijn voor de gemeenschappelijke code -- wel -- gebruik dan <command
>&lt;snippets&gt;</command
>. Een laatste manier om het te bekijken: als alle plugins dezelfde <emphasis
>zeer</emphasis
> vergelijkbare functionaliteit hebben, zijn  includes en inserts  waarschijnlijk een goed idee. Indien zij  slechts een of twee gemeenschappelijke <quote
>modules</quote
> delen, is inbedden waarschijnlijk beter. </para>
</sect1>
</chapter>

<chapter id="specialized_plugins">
<title
>Te gebruiken concepten  voor gespecialiseerde plugins</title>
<para
>Dit hoofdstuk bevat informatie over een aantal onderwerpen die alleen bruikbaar zijn voor bepaalde klassen van plugins. </para>

<sect1 id="specialized_plugins_plots">
	<title
>Plugins die een plot maken</title>
	<para
>Het is gemakkelijk een plot te maken met een plugin. Maar er zijn een paar subtiele valkuilen die u moet vermijden, en ook wat handige algemene functionaliteit die u zou moeten kennen. In deze sectie vindt u de eenvoudigste concepten.Aan het eind is een eenvoudig voorbeeld dat u zou moeten volgen bij hetmaken van plot plugins. </para>
	<sect2 id="rk_graph_on">
		<title
>Een plot tekenen in het uitvoervenster</title>
		<para
>Om een plot te tekenen in het uitvoervenster, gebruikt u <function
>rk.graph.on()</function
> direct voor het tekenen van een plot, en <function
>rk.graph.off()</function
>, direct daarna. Dit is vergelijkbaar met &eg; het aanroepen van <function
>postscript()</function
> en <function
>dev.off()</function
> in een normale &R;-sessie. </para>
		<para
>Maar het is belangrijk dat u <emphasis
>altijd</emphasis
>  <function
>rk.graph.off()</function
> aanroept na de aanroep van <function
>rk.graph.on()</function
>. Anders wordt het uitvoerbestand beschadigd. Om er zeker van te zijn dat <function
>rk.graph.off()</function
> werkelijk wordt aangeroepen, moet u <emphasis
>alle</emphasis
> &R;-opdrachten tussen de twee statements inpakken in een <function
>try()</function
>-statement. Nooit van gehoord? Maak u geen zorgen, het is eenvoudig. Alles wat nodig is, is dat u het patroon volgt in onderstaand <link linkend="plot_plugin_example"
>voorbeeld</link
>. </para>
	</sect2>
	<sect2 id="preview_plots">
		<title
>Toevoegen mogelijkheid voorbeeldweergave</title>
		<note
><para
>In deze sectie praten we over het toevoegen van de mogelijkheid van een voorbeeldweergave van plugins die plots produceren. Er zijn hier aparte secties over op <link linkend="preview_output"
>voorbeelden (&HTML;) uitvoer</link
>, <link linkend="preview_data"
>voorbeelden van (geïmporteerde) gegevens</link
>, en <link linkend="preview_custom"
>eigen voorbeelden</link
>. Het is echter aan te raden dit eerst te lezen, omdat de aanpak in alle gevallen dezelfde is.</para
></note>
		<para
>Een erg nuttige eigenschap van alle plugins die plots/grafieken maken is dat ze een automatische voorbeeldweergave (preview) geven na een wijziging. Hiervoor moet u twee dingen doen: Een <command
>&lt;preview&gt;</command
> keuzevakje toevoegen aan de <link linkend="mainxml"
>&GUI;-definitie</link
>, en  de <link linkend="jstemplate"
>gegenereerde code</link
> voor de preview aanpassen. </para>
		<para
>Toevoegen van een <command
>&lt;preview&gt;</command
> keuzevakje is eenvoudig. Plaats het volgende ergens in uw &GUI;. Dit zorgt dan voor alles wat achter de schermen gebeurt wat nodig is voor het maken van een preview, waarbij deze wordt bijgewerkt wanneer er iets aan is gewijzigd, &etc;. Voorbeeld: </para>
		<note
><para
>Te beginnen met de versie 0.6.5 van &rkward; zijn de <command
>&lt;preview&gt;</command
> elementen speciale gevallen in plugin-dialogen (niet assistenten): zij worden geplaatst in de kolom voor knoppen, onafhankelijk van waar zij precies zijn gedefinieerd in de GUI. Het is toch nog een goed idee ze te definiëren op een logische plek in de indeling (layout), voor de compatibiliteit met oudere versies (backwards compatibility). </para
></note>
		<programlisting
>&lt;document&gt;
                [...]
                &lt;dialog [...]&gt;
                        [...]
                        &lt;preview id="voorbeeld"/&gt;
                        [...]
                &lt;/dialog&gt;
                [...]
        &lt;/document&gt;
                </programlisting>
		<para
>En dat is het dan wat de &GUI; betreft. </para>
		<para
>Aanpassen van de JS-sjabloon (template) is wat meer werk, hier moet u nagaan dat alleen de plot zelf wordt gegenereerd en getoond op een apparaat op het scherm, in plaats van gestuurd naar de uitvoer. D.w.z. geen afdrukken van koppen, <function
>rk.graphics.on()</function
>, of soortgelijke aanroepen. Om u te hiermee te assisteren zal &rkward; de functies <function
>preprocess()</function
>, <function
>calculate()</function
> en <function
>printout()</function
> aanroepen met een extra parameter die is ingesteld op <parameter
>true</parameter
>, wanneer de gegenereerde code voor een voorbeeld is. (De parameter wordt weggelaten bij genereren van de uiteindelijke code. In javascript zal dit geëvalueerd worden naar <parameter
>false</parameter
> indien gebruikt binnen een <function
>if</function
>-statement.) Zie het onderstaande <link linkend="plot_plugin_example"
>voorbeeld</link
>, voor het typische patroon dat u zult gebruiken. </para>
		<para
>Als alternatief zou u meer controle dan dit nodig moeten hebben, u kunt in plaats daarvan een nieuwe functie genaamd <function
>preview()</function
> toevoegen aan uw JS-sjabloon en de code genereren, die daar is vereist voor een voorbeeld (mogelijk, minstens gedeeltelijk, opnieuw door <function
>calculate()</function
> aan te roepen, etc.). </para>
	</sect2>
	<sect2 id="plot_options">
		<title
>Generieke plotopties</title>
		<para
>U zult gemerkt hebben dat de meeste plot-plugins in &rkward; een groot aantal generieke opties hebben, &eg; voor as-aanpassingen en ruimte om de cijfers heen. Deze opties toevoegen aan uw plugin is eenvoudig. Zij worden verzorgd door een <link linkend="embedding"
>inbedbare</link
> plugin met de naam <command
>rkward::plot_opties</command
>. U kunt die zo in uw plugin inbedden: </para>
		<programlisting
>&lt;document&gt;
                [...]
                &lt;logic [...]&gt;
                        &lt;connect client="plotopties.xvar" governor="x.beschikbaar"/&gt;
                        &lt;set id="plotopties.toestaan_type" to="true"/&gt;
                        &lt;set id="plotopties.toestaan_ylim" to="true"/&gt;
                        &lt;set id="plotopties.toestaan_xlim" to="false"/&gt;
                        &lt;set id="plotopties.toestaan_log" to="false"/&gt;
                        &lt;set id="plotopties.toestaan_grid" to="true"/&gt;
                &lt;/logic&gt;
                &lt;dialog [...]&gt;
                        [...]
                        &lt;embed id="plotopties" component="rkward::plot_opties" as_button="true" label="Plot Opties"/&gt;
                        [...]
                &lt;/dialog&gt;
                [...]
        &lt;/document&gt;
                </programlisting>
		<para
>Hierdoor wordt een knop aan uw UI (User Interface) toegevoegd die een venster doet verschijnen met plotopties. De logische sectie is slechts een voorbeeld. U krijgt hiermee enige controle over de plugin voor de plotopties. U kunt hierover meer lezen op de help-pagina van de plugin voor plotopties (een link hiernaar is aanwezig in de help-pagina van alle plugins met de generieke opties). </para>
		<para
>Vervolgens moet u ervoor zorgen dat de code voor uw plotopties wordt toegevoegd aan de gegenereerde code voor uw plot. Dit doet u door de eigenschappen  <command
>code.preprocess</command
>, <command
>code.printout</command
>, en <command
>code.calculate</command
> op te halen uit de ingebedde plugin voor plotopties, en in uw code in te voegen, zoals u kunt zien in het onderstaande <link linkend="plot_plugin_example"
>voorbeeld</link
>. </para>
	</sect2>
	<sect2 id="plot_plugin_example">
		<title
>Een kaal voorbeeld</title>
		<para
>U ziet hier een .JS-bestand als voorbeeld, dat u kunt gebruiken als sjabloon voor het maken van een plotplugin: </para>
		<programlisting
>function preprocess () {
    // de "een_of_ander_pakket" is nodig om de plot aan te maken
    echo ("vereist (een_of_ander_pakket)\n");
  }

  function printout (is_voorbeeld) {
    // If "is_voorbeeld"  false/ongedefinieerd is, wordt de volledige code aangemaakt, inclusief kopteksten.
    // If "is_voorbeeld" true is, wordt allen het essentiële aangemaakt.

    if (!is_voorbeeld) {
      echo ('rk.header (' + i18n ("Een voorbeeldplot") + ')\n\n');
      echo ('rk.graph.on ()\n');
    }
    // Alleen de volgende sectie wordt aangemaakt als is_voorbeeld=true

    // onthoud: alles tussen rk.graph.on() en rk.graph.off() moet worden  ingepakt in een try() statement:
    echo ('try ({\n');
    // voeg optie-instellende coderegels in, die moeten worden uitgevoerd voor de werkelijke plotopdrachten.
    // De code zelf  komt uit de ingebedde plugin met plot-opties. printIndentedUnlessEmpty() zorgt voor een mooi afdrukresultaat.
    printIndentedUnlessEmpty ('\t', getString ("plotoptions.code.preprocess"), '', '\n');

    // maak de werkelijke plot. plotoptions.code.printout geeft het deel van de algemene plot opties
    // dat moeten worden toegevoegd aan de plotaanroep zelf.
    echo ('plot (5, 5' + getString ("plotoptions.code.printout") + ')\n');

    // voeg optie-instellende coderegels toe die moeten worden uitgevoerd na de werkelijke plot.
    printIndentedUnlessEmpty ('\t', getString ("plotoptions.code.calculate"), '\n');
    echo ('})'\n);  // Het afsluiten van de try() statement

    if (!is_preview) {
      echo ('rk.graph.off ()\n');
    }
  }
                </programlisting>
	</sect2>
</sect1>
<sect1>
	<title
>Voorbeeldweergaven (previews) voor gegevens, uitvoer en andere resultaten</title>
	<sect2 id="preview_output">
		<title
>Previews van (HTML)-uitvoer</title>
		<note
><para
>In deze sectie bespreken we het toevoegen van preview functionaliteit voor plugins die uitvoer / HTML afdrukken. U wordt aangeraden eerst de aparte sectie over <link linkend="preview_plots"
>plot previews</link
> te lezen.</para
></note>
		<para
>Het maken van een preview van HTML-uitvoer is bijna dezelfde procedure als het maken van een plot preview. In dit geval verzekert u zich ervan dat <command
>preview()</command
> de relevante <command
>rk.print()/rk.results()</command
> opdrachten genereert. Echter, in het algemeen is het handig de statements voor de kopregel in de preview weg te laten. Hier is een uitgekleed voorbeeld: </para>
		<programlisting
>&lt;!-- In the plugin's XML file --&gt;>
        &lt;dialog label="Importeer CSV-data" &gt;
                &lt;browser id="bestand" type="bestand" label="Bestandnaam"/&gt;
                &lt;!-- [...] --&gt;>
                &lt;preview id="preview" mode="output"/&gt;
        &lt;/dialog&gt;
>
                </programlisting>
		<para
>Merk de specificatie op van <parameter
>mode="output"</parameter
> in het <command
>&lt;preview&gt;</command
>-element. </para>
		<programlisting
>// In het plugin's JS-bestand
        function preview () {
                // genereert code voor preview
                printout (true);
        }

        function printout (is_preview) {
                // genereert alleen een koptekst als is_preview==false
                if (!is_preview) {
                        new Header ("Dit is een koptekst").print ();
                }
                echo ('rk.print (result)');
        }
                </programlisting>
	</sect2>
	<sect2 id="preview_data">
		<title
>Voorbeeldweergaven (previews) van (geïmporteerde) gegevens</title>
		<note
><para
>In deze sectie bespreken we het toevoegen van preview functionaliteit voor plugins die gegevens aanmaken (importeren). U wordt aangeraden eerst de aparte sectie over <link linkend="preview_plots"
>plot previews</link
> te lezen.</para
></note>
		<para
>Het maken van een preview van geïmporteerde gegevens (elk type gegevens dat door <command
>rk.edit()</command
> kan worden verwerkt), is bijna gelijk aan het maken van een <link linkend="preview_plots"
>plot preview</link
>. Hier is een uitgekleed voorbeeld van het maken van een preview van gegevens: </para>
		<programlisting
>&lt;!-- In het plugin's XML-bestand --&gt;>
        &lt;dialog label="Importeer CSV-data" &gt;
                &lt;browser id="bestand" type="bestand" label="Bestandnaam"/&gt;
                &lt;!-- [...] --&gt;>
                &lt;preview id="preview" active="true" mode="data"/&gt;
        &lt;/dialog&gt;
>
                </programlisting>
		<para
>Merk op dat het <command
>&lt;preview&gt;</command
>-element deze keer de <parameter
>mode="data"</parameter
> specificeert. <parameter
>active="true"</parameter
> maakt eenvoudig de preview standaard actief. </para>
		<programlisting
>// In het plugin's JS-bestand
        function preview () {
                // genereert de code voor preview
                calculate (true);
        }

        function calculate (is_preview) {
                echo ('imported &lt;- read.csv (file="' + getString ("bestand") /* [+ opties] */);
                if (is_preview) {
                        echo ('preview_data &lt;- imported\n');
                } else {
                        echo ('.GlobalEnv$' + getString ("name") + ' &gt;- imported\n');
                }
        }

        function printout () {
                // [...]
        }
                </programlisting>
		<para
>Ook nu weer genereert de functie <command
>preview()</command
> bijna dezelfde &R;-code als de functie <command
>calculate()</command
>, dus maken we een hulpfunctie <command
>doCalcuate()</command
>voor het ontbinden van de gemeenschappelijkeonderdelen. Het belangrijkste waar u op moet letten, is dat u de geïmporteerde gegevens moet toewijzen aan een object genaamd <parameter
>preview_data</parameter
> (binnen de huidige - lokale - omgeving). <emphasis
>Al het andere gebeurt automatisch</emphasis
> (grof gezegd, roept &rkward; <command
>rk.edit(preview_data)</command
> aan, opgenomen in een aanroep van <command
>.rk.with.window.hints()</command
>). </para>
		<note
><para
>Hoewel previews een mooie eigenschap is, gebruiken zij wel hulpbronnen (resources). In het geval van voorbeeldweergaven van gegevens, kan het voorkomen dat het systeem dit niet aankan. Dit kan gebeuren bij het invoeren van enorme gegevensverzamelingen (datasets) (die te groot zijn om te kunnen worden geopend voor bewerking in het bewerkingsvenster van &rkward;). Maar ook "normale" gegevensverzamelingen kunnen verkeerd worden geïmporteerd, waardoor een enorm aantal rijen of kolommen worden aangemaakt. <emphasis
>Het is sterk aan te raden dat u de <parameter
>preview_data</parameter
></emphasis
> parameter beperkt tot dimensies die de preview mogelijk maakt, zonder dat het systeem merkbaar traag wordt (&eg; 50 rijen bij 50 kolommen zou meer dan genoeg zijn in de meeste gevallen). </para
></note>
	</sect2>
	<sect2 id="preview_custom">
		<title
>Aangepaste voorbeeldweergaven (previews)</title>
		<para
>Het <command
>&lt;preview&gt;</command
>-element kan worden gebruikt voor het maken van previews voor elk type type "document"-venster dat kan worden gekoppeld aan een workplace van &rkward;. Behalve <link linkend="preview_plots"
>plots</link
> en <link linkend="preview_data"
>gegevensvensters</link
>, zijn dit HTML -bestanden, &R;-scripts, en object opsommingsvensters (object summary windows). Voor deze laatste, moet u <command
>&lt;preview mode="custom"&gt;</command
> gebruiken. </para>
		<para
>Als u de secties die plot preview en gegevens previews beschrijven heeft gelezen, heeft u al een algemene indruk van de werkwijze, maar "custom" (aangepast, eigen) previews eisen iets meer handwerk achter de schermen. De belangrijkste &R;-functie hier is <command
>rk.assign.preview.data()</command
>. De volgende korte code laat zien hoe uw gegenereerde (preview) &R;-code eruit kan zien voor een plugin die een tekstbestand als uitvoer genereert: </para>
		<programlisting
>## Moet worden gegenereerd in de preview() code-sectie van een plugin
        pdata &lt;- rk.get.preview.data("EENID")
        if (is.null (pdata)) {
                outfile &lt;- rk.get.tempfile.name(prefix="preview", extension=".txt")
                pdata &lt;- list(bestandnaam=outfile, on.delete=function (id) {
                        unlink(rk.get.preview.data(id)$bestandnaam)
                })
                rk.assign.preview.data("SOMEID", pdata)
        }
        try ({
                cat ("Dit is een test", pdata$bestandnaam)
                rk.edit.files(file=pdata$bestandnaam)
        })
                </programlisting>
		<para
>U moet  hier de waarde <parameter
>EENID</parameter
> verkrijgen uit de  <parameter
>id</parameter
>-eigenschap van het <command
>&lt;preview&gt;</command
>-element. Bv. met behulp van <command
>getString ("preview.id")</command
> in het .js-bestand van de plugin. </para>
	</sect2>
</sect1>

<sect1 id="contextualized_plugins">
	<title
>Context-afhankelijke plugins</title>
	<para
>Tot dusverre hebben we aangenomen dat alle plugins altijd nuttig zijn, en allemaal geplaatst in het hoofdmenu. Echter,  sommige plugins hebben alleen betekenis (of geven iets extra's), in een bepaalde context. Bijvoorbeeld een plugin die de inhoud van een &R; X11 graphics-apparaat exporteert, heeft duidelijk alleen nut wanneer die geplaatst wordt in het menu van een X11-apparaat, en niet in de hoofdmenubalk. Ook moet zo'n plugin het nummer kennen van het apparaat waarvoor het zou moeten werken, zonder ernaar te moeten vragen. </para>
	<para
>We noemen zulke plugins context-afhankelijk. In overeenstemming daarmee worden zij in het <link linkend="pluginmap"
>&pluginmap;-bestand</link
> niet (of niet alleen) geplaatst in de hoofd  <command
>&lt;hiërarchie&gt;</command
>, maar eerder in een <command
>&lt;context&gt;</command
>-element. Tot nu toe worden slechts twee soorten contexts ondersteund (later meer hierover): X11 en het importeren van bestanden. We zullen dit nog bespreken. Zelfs als u alleen belangstelling heeft voor de context voor importeren, moet u ook even kijken naar die voor X11, aangezien die iets bewerkelijker is. </para>

	<sect2 id="context_x11">
		<title
>Context voor X11-apparaat</title>
		<para
>Om een plugin in de context van een X11-apparaat te gebruiken - dit betekent het plaatsen ervan in de menubalk van het venster dat u ziet na het in de console aanroepen van <function
>x11()</function
>, moet u het eerst als gebruikelijk declareren in het <link linkend="pluginmap"
>&pluginmap;-bestand</link
>: </para>
		<programlisting
>&lt;document [...]&gt;
        &lt;components&gt;
                [...]
                &lt;component id="mijn_x11_plugin" file="mijn_x11_plugin.xml" label="Een X11 context-plugin"/&gt;
                [...]
        &lt;/components&gt;
                </programlisting>
		<para
>Echter, u hoeft die niet te definiëren in de hiërarchie (het kan wel, indien die ook nuttig is als top-level plugin): </para>
		<programlisting
>&lt;hierarchy&gt;
                [...]
        &lt;/hierarchy&gt;
                </programlisting>
		<para
>In plaats daarvan, voeg een definitie toe van de "x11"-context, en voeg het toe aan de menu's daar: </para>
		<programlisting
>&lt;context id="x11"&gt;
                [...]
                &lt;menu id="bewerken"&gt;
                        [...]
                        &lt;entry id="mijn_x11_plugin"/&gt;
                &lt;/menu&gt;
        &lt;/context&gt;
&lt;/document&gt;
                </programlisting>
		<para
>In de <link linkend="logic"
>logische sectie van de plugin xml</link
>, kunt u nu twee <command
>&lt;externe&gt;</command
> eigenschappen declareren: <parameter
>devnum</parameter
> en <parameter
>context</parameter
>. <parameter
>context</parameter
> (indien gedeclareerd) wordt ingesteld op <replaceable
>"x11"</replaceable
> als de plugin in deze context wordt geactiveerd. <parameter
>devnum</parameter
> wordt ingesteld op het nummer van het graphics-apparaat waarin het moet werken. En dat is alles. </para>
	</sect2>

	<sect2 id="context_import">
		<title
>Context voor importeren van gegevens</title>
		<para
>Voordat u deze sectie leest, is het handig eerst de sectie te lezen over de <link linkend="context_x11"
>context voor X11-apparaat</link
>, omdat hierin de grondbeginselen staan. </para>
		<para
>De context <replaceable
>"import"</replaceable
> wordt gebruikt voor het declareren van filter plugins voor import-bestanden . U plaatst die gewoon in een context met  <parameter
>id=</parameter
><replaceable
>"import"</replaceable
> in het &pluginmap;-bestand. Maar er is nog een probleempje bij het declareren van deze plugins: om een algemene selectiedialoog voor alle ondersteunde bestandstypen aan te bieden, moet u nog een beetje extra informatie declareren over uw component: </para>
		<programlisting
>&lt;document [...]&gt;
        &lt;components&gt;
                [...]
                &lt;component id="mijn_xyz_import_plugin" file="mijn_xyz_import_plugin.xml" label="Importeren XYZ-bestanden"&gt;
                        &lt;attribute id="format" value="*.xyz *.zyx" label="XYZ-gegevensbestanden"/&gt;
                &lt;/component&gt;
                [...]
        &lt;/components&gt;
        &lt;hierarchy&gt;
                [...]
        &lt;/hierarchy&gt;
        &lt;context id="importeren"&gt;
                [...]
                &lt;menu id="importeren"&gt;
                        [...]
                        &lt;entry id="mijn_xyz_import_plugin"/&gt;
                &lt;/menu&gt;
        &lt;/context&gt;
        [...]
&lt;/document&gt;
                </programlisting>
		<para
>In de attribuutregel staat eenvoudig, dat bijbehorende extensies voor bestandsnamen <literal role="extension"
>*.xyz</literal
> of <literal role="extension"
>*.zyx</literal
> zijn, en de filterdialoog moet de naam <quote
>XYZ-gegevensbestanden</quote
> hebben in de dialoog voor het filteren van bestanden. </para>
		<para
>U kunt twee <command
>&lt;externe&gt;</command
> eigenschappen declareren in uw plugin. <parameter
>bestandnaam</parameter
> wordt ingesteld op de geselecteerdebestandnaam, en <parameter
>context</parameter
> wordt ingesteld op <replaceable
>"importeren"</replaceable
>. </para>
	</sect2>
</sect1>

<sect1 id="querying_r_for_info">
<title
>&R; bevragen naar informatie</title>
	<para
>In enkele gevallen wilt u misschien verdere informatie uit &R; ophalen, die dan in de UI van uw plugin wordt weergegeven. U wilt, bijvoorbeeld, een selectie aanbieden van de levels van een factor die de gebruiker heeft geselecteerd voor analyse. Vanaf versie 0.6.2 van &rkward; is dit mogelijk. Voordat we beginnen, is het belangrijk dat u op de hoogte bent van een aantal valkuilen:</para>
	<para
>&R;-code, die gestart wordt vanuit de logica van een UI van een plugin, wordt verwerkt tijdens de event loop van &R;, wat betekent dat die kunnen lopen <emphasis
>terwijl</emphasis
> andere berekeningen aan de gang zijn. Dit is om er zeker van te zijn, dat de UI van uw plugin bruikbaar is, ook al is &R; druk bezig met andere dingen. Maar, dit maakt het werkelijk belangrijk dat uw code geen bijeffecten heeft, in het bijzonder:</para>
	<itemizedlist>
		<listitem
><para
>Maak <emphasis
>geen</emphasis
> toewijzingen (assignments) in .GlobalEnv of welke andere niet-lokale omgeving dan ook.</para
></listitem>
		<listitem
><para
>Stuur <emphasis
>niets</emphasis
> naar het uitvoerbestand.</para
></listitem>
		<listitem
><para
>Plot <emphasis
>niets</emphasis
> op het scherm.</para
></listitem>
		<listitem
><para
>Doe, in het algemeen, <emphasis
>niets</emphasis
> dat zij-effecten heeft. Uw code kan <emphasis
>informatie inlezen</emphasis
>, maar niets "<emphasis
>doen</emphasis
>".</para
></listitem>
	</itemizedlist>
	<para
>Met dit in gedachten, is hier het algemene patroon. U gebruikt dit in een sectie van <link linkend="logic_scripted"
>ge-scripte UI-logica</link
>:</para>
	<programlisting
>&lt;script&gt;&lt;![CDATA[
                                last_command_id = -1;
                                gui.addChangeCommand ("variable", "update ()");
                                update = function () {
                                        gui.setValue ("selector.enabled", 0);
                                        variable = gui.getValue ("variabele");
                                        if (variabele == "") return;

                                        last_command_id = doRCommand ('levels (' + variabele + ')', "commandFinished");
                                }

                                commandFinished = function (result, id) {
                                        if (id != last_command_id) return;  // een ander antwoord is op komst
                                        als (typeof (result) == "undefined") {
                                                gui.setListValue ("selector.available", Array ("ERROR"));
                                                return;
                                        }
                                        gui.setValue ("selector.enabled", 1);
                                        gui.setListValue ("selector.available", result);
                                }
                ]]&gt;&lt;/script&gt;
        </programlisting>
	<para
>Hierin is, <parameter
>variabele</parameter
> een eigenschap met een objectnaam (&eg; in een <command
>&lt;varslot&gt;</command
>). Wanneer die verandert, wilt u het tonen van levels in de <command
>&lt;valueselector&gt;</command
>, met de naam <parameter
>selector</parameter
> bijwerken. De sleutelfunctie hier is <command
>doRCommand()</command
>, met als eerste parameter de opdracht welke string te starten, en als tweede parameter de naam van een aan te roepen functie, na de opdracht. Let erop dat de opdracht asynchroon wordt gedaan, wat de zaak wat complexer maakt. Ten eerste moet u er voor zorgen dat uw <command
>&lt;valueselector&gt;</command
> uit blijft staan, zolang het geen bijgewerkte informatie bevat. En verder kan het zijn dat er mogelijk meerdere opdrachten in een wachtrij staan, voordat u de eerste resultaten krijgt. Daarom krijgt elke opdracht een "id", die we opslaan in <parameter
>last_command_id</parameter
> voor een later gebruik.</para>
	  <para
>Als de opdracht klaar is, wordt de daarin opgegeven functie aangeroepen (in dit geval dus <parameter
>commandFinished</parameter
>), met twee parameters: het antwoord zelf, en de id van bijbehorende opdracht. Het type van het antwoord is vergelijkbaar met dat in R, &ie; een numerieke array, als het antwoord numeriek (een getal) is. Het kan zelfs een <command
>list()</command
> in &R; zijn, maar in dit geval wordt het een JS <command
>Array()</command
> zonder namen.</para>
	  <para
>Let erop dat zelfs dit voorbeeld een beetje eenvoudiger is gemaakt. In werkelijkheid moet u verdere voorzorgsmaatregelen treffen, &eg; het voorkomen van een extreem aantal levels in de selector. Het goede nieuws is dat u dit waarschijnlijk niet allemaal zelf moet  doen. Bovenstaand voorbeeld komt uit de <command
>rkward::level_select</command
>-plugin, bijvoorbeeld, die u eenvoudig kunt <link linkend="embedding"
>inbedden</link
> in uw eigen plugin. U kunt zelfs een  andere te starten expressie opgeven in plaats van <command
>levels()</command
>.</para>
</sect1>

<sect1 id="current_object">
<title
>Naar het huidige object of bestand verwijzen</title>
	<para
>In veel plugins is het gewenst te werken met het <quote
>huidige</quote
> object. Bijvoorbeeld zou een <quote
>sorteer</quote
>-plugin de dataframe die op dit ogenblik wordt bewerkt voor sorteren, alvast kunnen selecteren. De naam van het huidige object is beschikbaar voor plugins als een voorgedefinieerde eigenschap met de naam <parameter
>current_object</parameter
>. U kunt met deze eigenschap op de gebruikelijke manier verbinden. Is er geen huidig object, dan wordt de eigenschap een lege string. Op dezelfde manier is de &URL; van het huidige scriptbestand bereikbaar als een voorgedefinieerde eigenschap met de naam van het <parameter
>huidige bestand</parameter
>. Deze eigenschap is leeg indien er geen huidig bestand wordt bewerkt, of als het scriptbestand nog niet is opgeslagen. </para>
	<para
>Op dit ogenblik kan de <parameter
>current_object</parameter
> alleen maar van de class <function
>data.frame</function
> zijn, maar vertrouw hier aub. niet op, omdat dit in de toekomst zal worden uitgebreid tot andere gegevenstypen. Indien u alleen belangstelling heeft voor <function
>data.frame</function
>-objecten, verbindt u in plaats daarvan met de eigenschap <parameter
>current_dataframe</parameter
>. Of anders kunt u type-vereisten forceren door de juiste beperkingen te gebruiken voor uw <command
>&lt;varslot&gt;</command
>s, of met behulp van <link linkend="logic_scripted"
>scripts voor de &GUI;-logica</link
>. </para>
</sect1>

<sect1 id="optionset">
	<title
>Een (aantal) opties herhalen</title>
	<para
>Soms wilt u een aantal opties herhalen voor een willekeurig aantal items. Bijv. stel dat u een plugin voor het sorteren van een data.frame wilt maken. U zou dit kunnen doen met het sorteren van een willekeurig aantal kolommen (in het geval dat de eerste kolommen met elkaar overeenkomen). Dit kan eenvoudig door de gebruiker meerdere variabelen te laten selecteren in een  <command
>&lt;varslot&gt;</command
> met <parameter
>multi="true"</parameter
>. Maar als u dit uitbreidt, &eg; door de gebruiker voor elke variabele te laten opgeven of die naar karakter/numeriek wordt omgezet, of dat het sorteren in de ene of in de andere richting moet, dan heeft u meer flexibiliteit nodig. Andere voorbeelden zouden zijn het plotten van meerdere lijnen in een plot (met keuze van object, lijnstijl, lijnkleur, &etc;, voor elke lijn), of een afbeelding (mapping) op te geven voor het terug-coderen van een verzameling oude naar nieuwe waarden. </para>
	<para
>Dit leidt tot de <command
>&lt;optionset&gt;</command
>. Laten we eerst een eenvoudig voorbeeld bekijken: </para>
		<programlisting
>&lt;dialog [...]&gt;
        [...]
        &lt;optionset id="verzameling" min_rows="1"&gt;
                &lt;content&gt;
                        &lt;row&gt;
                                &lt;input id="voornaam" label="Voornamen" size="klein"&gt;
                                &lt;input id="achternaam" label="Familienaam" size="small"&gt;
                                &lt;radio id="geslacht" label="Geslacht"&gt;
                                        &lt;optioncolumn label="Mannelijk" value="m"/&gt;
                                        &lt;optioncolumn label="Vrouwelijk" value="f"/&gt;
                                &lt;/radio&gt;
                        &lt;/row&gt;
                &lt;/content&gt;

                &lt;optioncolumn id="voornamen" label="Voornamen" connect="firstname.text"&gt;
                &lt;optioncolumn id="achternaam" label="Familienaam" connect="lastname.text"&gt;
                &lt;optioncolumn id="geslacht" connect="geslacht.string"&gt;
        &lt;/optionset&gt;
        [...]
&lt;/dialog&gt;
                </programlisting>
	<para
>Hier hebben we een UI gemaakt voor het opgeven van aantal personen (&eg; auteurs). De UI vereist de invoer van tenminste een persoon (<parameter
>min_rows="1"</parameter
>). In het <command
>&lt;optionset&gt;</command
>-element beginnen we met het opgevenvan de <command
>&lt;content&gt;</command
>, &ie; die elementen die behoren tot de verzameling van opties. U kent de meeste elementen wel in de  <command
>&lt;content&gt;</command
> al. </para
><para
>Vervolgens geven we de gewenste variabelen op die we willen lezen uit de optieverzameling (optionset)in ons JS-bestand. Om dat we te maken zullen hebben met een willekeurig aantal items, kunnen we ons niet beperken tot het lezen van <function
>getString ("voornaam")</function
> in JS. In plaats daarvan moeten we voor elke gewenste waarde, een <command
>&lt;optioncolumn&gt;</command
> opgeven. Voor de eerste optiekolom in het voorbeeld, betekent <command
>&lt;connect="voornaam.text"&gt;</command
> dat de inhoud van het <command
>&lt;input&gt;</command
>-element "voornaam" wordt gelezen voor elk item. <command
>&lt;optioncolumn&gt;</command
>s waarvoor een <parameter
>label</parameter
> (naam) is gegeven, worden getoond, in een kolom met die naam. In JS kunnen we nu de voornamen ophalen van alle auteurs met behulp van <function
>getList("verzameling.voornaam")</function
>, <function
>getList("set.achternamen")</function
> voor de achternamen, en <function
>getList("set.geslacht")</function
> voor een array van "m"/"v"strings. </para>
	<para
>Merk op dat er geen beperkingen zijn voor wat u in een <command
>&lt;optionset&gt;</command
> kunt plaatsen. U kunt zelfs <link linkend="embedding"
>ingebedde</link
>-componenten gebruiken. Net als met elk ander element is alles wat u moet doen het verzamelen van de gewenste uitvoervariabelen in een <command
>&lt;optioncolumn&gt;</command
>-specificatie. In het geval van ingebedde plugins, is dit vaak een sectie van de "code"-eigenschap. Bijv.: </para>
		<programlisting
>&lt;dialog [...]&gt;
        [...]
        &lt;optionset id="verzameling" min_rows="1"&gt;
                &lt;content&gt;
                        [...]
                        &lt;embed id="kleur" component="rkward::kleur_kiezer" label="Kleur"/&gt;
                &lt;/content&gt;

                [...]
                &lt;optioncolumn id="kleur_params" connect="kleur.code.afdruk"&gt;
        &lt;/optionset&gt;
        [...]
&lt;/dialog&gt;
                </programlisting>
	<para
>Natuurlijk kunt u ook <link linkend="logic"
>UI-logica</link
> in een optionset gebruiken. Hiervoor zijn er twee manieren: U kunt dit zoals gebruikelijk doen door het maken van een verbinding (of script) in de hoofdsectie <command
>&lt;logic&gt;</command
> van uw plugin. Echter, u krijgt toegang tot de UI-elementen in het contents-gebied, met  (&eg;) "verzameling.contents.voornaam.XYZ". Let op het voorvoegsel (prefix) "verzameling" (de <parameter
>id</parameter
> die u heeft toegekend aan de set (verzameling) en "contents" (inhoud). En anders kunt u een aparte <command
>&lt;logic&gt;</command
>-sectie als child element van uw <command
>&lt;optionset&gt;</command
> toevoegen. In dit geval zijn <parameter
>id</parameter
>s  relatief ten opzichte van het contents-gebied, &eg; "voornaam.XYZ". Alleen het <command
>&lt;script&gt;</command
>-element is niet toegestaan in de  sectie van een optionset. Als u een script wilt maken, moet u ook de  <command
>&lt;logic&gt;</command
>-sectie gebruiken van de hoofdsectie  <command
>&lt;logic&gt;</command
> van de plugin. </para>
	<note>
		<para
>Bij het maken van logische scripts in een optionset, kunt u alleen  toegang krijgen tot de <emphasis
>huidige</emphasis
> content region (inhoudsgebied). Het is dus alleen mogelijk om elementen  binnen een content region met elkaar te verbinden. Het verbinden van een eigenschap buiten de  <command
>&lt;optionset&gt;</command
> met een eigenschap binnen de content region kan misschien nuttig zijn bij de initialisatie. Maar het wijzigen van de contents region na de initialisatie zal <emphasis
>niet</emphasis
> van toepassing zijn voor elementen die door de gebruiker al zijn gedefinieerd. Slechts de huidig geselecteerde item in de set (verzameling). </para>
	</note>
	<sect2 id="optionset_driven">
		<title
>"Driven" optionsets</title>
		<para
>Tot dusver hebben we een <command
>&lt;optionset&gt;</command
> beschouwd, die knoppen levert voor het toevoegen / verwijderen van items. In sommige gevallen, echter, is het natuurlijker items te selecteren buiten de <command
>&lt;optionset&gt;</command
>, en alleen opties te leveren voor het aanpassen van sommige aspecten van elk item in een <command
>&lt;optionset&gt;</command
>. Bijv. stel dat u de gebruiker wilt toestaan een aantal objecten in een plot te plotten. Voor elk object moet de gebruiker in staat zijn de kleur op te geven. U <emphasis
>zou</emphasis
> dit kunnen oplossen door het plaatsen van een <command
>&lt;varselector&gt;</command
> en <command
>&lt;varslot&gt;</command
> in het <command
>&lt;content&gt;</command
>-gebied, waardoor de gebruiker de items een voor een kan selecteren. De gebruiker zal echter veel minder hoeven te klikken als u in plaats daarvan <command
>&lt;varslot multi="true"&gt;</command
> <emphasis
>buiten</emphasis
> de <command
>&lt;optionset&gt;</command
> gebruikt. Daarna verbindt u deze selectie van objecten aan een zogenoemde  "driven" optionset. Hier volgt hoe u dit doet: </para>
		<programlisting
>&lt;dialog [...]&gt;
        &lt;logic&gt;
                &lt;connect client="verzameling.vars" governor="vars.beschikbaar"/&gt;
                &lt;connect client="verzameling.varnamen" governor="vars.available.shortname"/&gt;
        &lt;/logic&gt;
        [...]
        &lt;varselector id="varsel"/&gt;
        &lt;varslot id="vars" label="Te plotten objecten"/&gt;
        &lt;optionset id="verzameling" keycolumn="var"&gt;
                &lt;content&gt;
                        [...]
                        &lt;embed id="kleur" component="rkward::kleur_kiezer" label="Lijnkleur"/&gt;
                &lt;/content&gt;

                [...]
                &lt;optioncolumn id="vars" external="true"&gt;
                &lt;optioncolumn id="varnamen" external="true" label="Variabele"&gt;
                &lt;optioncolumn id="kleur_params" connect="kleur.code.afdruk"&gt;
        &lt;/optionset&gt;
        [...]
&lt;/dialog&gt;
                </programlisting>
		<para
>We beginnen met het bekijken van het voorbeeld onderaan. U ziet dat twee <command
>&lt;optioncolumn&gt;</command
> specificaties <parameter
>external="true"</parameter
> hebben. Dit vertelt &rkward; dat deze bestuurd  bestuurd worden van buiten de <command
>&lt;optionset&gt;</command
>. Hier is het enige doel van de "varnamen"-option column (optiekolom) is het leveren van gemakkelijk leesbare namen bij het tonen van de optionset (het is verbonden met de "shortname" modifier(veranderen in korte naam) van de eigenschap die de geselecteerde objecten inhoudt). Het doel van de "vars"-option column is te dienen als de "key"-column (sleutelkolom), zoals opgegeven door  <command
>&lt;optionset keycolumn="vars"...&gt;</command
>. Dit betekent dat  voor elk item in de lijst de verzameling een van de beschikbare opties zal aanbieden, en opties hier logisch verbonden zijn met deze items. Deze kolom is verbonden met de eigenschap die de geselecteerde objecten inhoudt in <command
>&lt;varslot&gt;</command
>. Dus voor elk element dat daar wordt gekozen, kan met de <command
>&lt;optionset&gt;</command
> de kleur worden opgegeven. </para>
		<note>
			<para
>Een externe kolom kan ook worden <parameter
>verbonden</parameter
> met eigenschappen in het <command
>&lt;content&gt;</command
>-gebied. Maar het is belangrijk op te merken dat optioncolumns die <parameter
>external="true"</parameter
> zijn gedeclareerd,  nooit binnen <command
>&lt;optionset&gt;</command
> mogen worden gewijzigd, en optioncolumns die <parameter
>external="false"</parameter
> (de standaard) zijn gedeclareerd, nooit buiten de <command
>&lt;optionset&gt;</command
> mogen worden gewijzigd.. </para>
		</note>
	</sect2>
	<sect2 id="optionset_alternatives">
		<title
>Alternatieven: wanneer optionsets niet te gebruiken</title>
		<para
>Optionsets zijn een krachtig gereedschap, maar zij kunnen soms meer kwaad doen dan goed, omdat zij een enorme complexiteit toevoegen, zowel voor een plugin-ontwikkelaar, als voor een gebruiker. Denk dus twee keer na voordat u die gebruikt. Hier volgt wat advies: </para>
		<itemizedlist>
			<listitem
><para
>In eenvoudige gevallen, is het<command
>&lt;matrix&gt;</command
>-element misschien een nuttig lichtgewicht alternatief.</para
></listitem>
			<listitem
><para
>Laat uw plugin niet te veel doen. We gaven een voorbeeld van het gebruik van een optionset (verzameling van opties) voor een plugin voor het tekenen van een aantal lijnen in een plot. Maar in het algemeen is het geen goed idee een plugin te maken voor aparte plots voor elk item in een optionset. Beter is het dat de plugin een plot produceert, die de gebruiker meerdere keren kan aanroepen. </para
></listitem>
			<listitem
><para
>Indien u niet meer dan twee of drie items in een set verwacht, overweeg dan de opties met de hand te herhalen.</para
></listitem>
		</itemizedlist>
	</sect2>
</sect1>

</chapter>

<chapter id="chapter_dependencies">
<title
>Omgaan met afhankelijkheden (dependencies) en compatibiliteitsproblemen.</title>
<sect1 id="sect_dependencies_rkward_version"
><title
>Versie-compatibiliteit van &rkward;</title>
	<para
>We doen ons best, ervoor te zorgen dat een plugin, gemaakt voor een oude versie van &rkward;, ook werkt in latere versies. Echter, het omgekeerde is niet altijd het geval, omdat nieuwe eigenschappen zijn toegevoegd. Omdat niet iedereen de laatste versie van &rkward; gebruikt, betekent dit dat uw plugin niet voor iedereen werkt.</para>
	<para
>Indien u weet heeft van zulke problemen met compatibiliteit, moet u dit melden in de documentatie in uw&pluginmap;-bestand, met het <command
>&lt;dependencies&gt;</command
> (afhankelijkheden)-element. De <command
>&lt;dependencies&gt;</command
> kunnen ofwel worden opgegeven als &pluginmap;'s &lt;document&gt;-element, of als een child element van afzonderlijke <command
>&lt;component&gt;</command
>-definities. In het eerste geval zijn afhankelijkheden van toepassing op <emphasis
>alle</emphasis
> plugins in de map. In het andere geval  alleen maar op het/de afzonderlijke <command
>&lt;component&gt;</command
>(en). U kunt ook top "globale" en "specifieke" afhankelijkheden mixen. In dat geval worden de "globale" afhankelijkheden toegevoegd aan die van de afzonderlijke component.</para>
	<para
>Bekijken we een klein voorbeeld:</para>
	<programlisting
>&lt;document ...&gt;
        &lt;dependencies rkward_min_version="0.5.0c" /&gt;
        &lt;components ...&gt;
                &lt;component id="mijnplugin" file="gereduceerde_versie_van_mijnplugin.xml" ...&gt;
                        &lt;dependencies rkward_max_version="0.6.0z" /&gt;
                &lt;/component&gt;
                &lt;component id="mijnplugin" file="fantasie_version_van_mijnplugin.xml" ...&gt;
                        &lt;dependencies rkward_min_version="0.6.1" /&gt;
                &lt;/component&gt;
                ...
x        &lt;/components ...&gt;
&lt;/document&gt;
        </programlisting>
	<para
>In dit voorbeeld werken alle plugins alleen in versies 0.5.0c of later van &rkward;. Een plugin, met  <replaceable
>id="mijnplugin"</replaceable
> wordt beschikbaar gesteld in twee alternatieve varianten. De eerste, uitgeklede, versie wordt gebruikt in versies van &rkward; eerder dan 0.6.1. De tweede gebruikt eigenschappen die nieuw zijn in versies 0.6.1 van &rkward;.</para>
	<para
>Het beschikbaar maken van alternatieve varianten als deze is een erg gebruiksvriendelijke manier van het gebruik maken van nieuwe eigenschappen, terwijl toch de eerdere versies van &rkward; bruikbaar blijven. Alternatieve versies moeten de zelfde <parameter
>id</parameter
> delen (anders komen er waarschuwingen), en kunnen alleen <emphasis
>in hetzelfde</emphasis
> &pluginmap;-bestand worden gedefinieerd.</para>
	<para
>Plugins die niet compatibel zijn met (niet werken in) de gebruikte versie van &rkward;, en die geen alternatieve versie bevatten, worden genegeerd met een waarschuwing.</para>
	<note
><para
>In werkelijkheid is &rkward; 0.6.1 de eerste versie die sowieso afhankelijkheden herkent - en die meldt met foutmeldingen - . Dus, in tegenstelling tot wat het voorbeeld misschien suggereert, zal het opgeven van eerdere versies in de afhankelijkheden niet direct effect hebben (maar toch wel een goed idee zijn voor documentatie-doeleinden).</para
></note>
	<para
><emphasis
>Soms</emphasis
> is het zelfs mogelijk om met incompatibiliteitsproblemen van versies om te gaan <emphasis
>in</emphasis
> een enkel &pluginmap;-bestand met het <command
>&lt;dependency_check&gt;</command
>-element, dat in de volgende sectie wordt beschreven.</para>
</sect1>
<sect1 id="sect_dependencies_r_version"
><title
>&R; versie-compatibiliteit</title>
	<para
>Net zoals <parameter
>rkward_min_version</parameter
> en <parameter
>rkward_max_version</parameter
>, maakt het <command
>&lt;dependencies&gt;</command
>-element het mogelijk de attributen <parameter
>R_min_version</parameter
> en <parameter
>R_max_version</parameter
> op te geven. Maar er zijn de volgende verschillen:</para>
	<itemizedlist>
		<listitem
><para
>Plugins die niet voldoen aan de vereisten voor de &R;-versie worden op dit moment <emphasis
>niet</emphasis
> overgeslagen bij het inlezen van het &pluginmap;-bestand. De gebruiker kan nog steeds de plugin aanroepen (call) en krijgt niet direct een waarschuwing krijgen (in toekomstige versies komt er waarschijnlijk wel een waarschuwing).</para
></listitem>
		<listitem
><para
>Als gevolg daarvan is het ook <emphasis
>niet</emphasis
> mogelijk alternatieve versies van een plugin te definiëren, afhankelijk van de gebruikte versie van &R;.</para
></listitem>
		<listitem
><para
>Echter, het is vaak eenvoudig terugwaartse compatibiliteit (backwards compatibility) te bereiken, zoals u hieronder kunt zien. Indien u compatibiliteitsproblemen van &R; onderkent, kunt u, als u dit wilt, deze methode gebruiken, in plaats van het definiëren van een afhankelijkheid (dependency) van een afzonderlijke versie van &R;.</para
></listitem>
	</itemizedlist>
	<para
>In veel gevallen is het eenvoudig mogelijk een verminderde functionaliteit beschikbaar te stellen, indien een bepaalde eigenschap niet beschikbaar is in de gebruikte versie van &R;. Zie het volgende korte voorbeeld van een .<literal role="extension"
>.xml</literal
>-bestand van een plugin:</para>
	<programlisting
>&lt;dialog [...]&gt;
        &lt;logic&gt;
                &lt;dependency_check id="ris210" R_min_version="2.10.0"/&gt;
                &lt;connect client="compression.xz.enabled" governor="ris210"/&gt;
        &lt;/logic&gt;
        [...]
        &lt;radio id="compressie" label="Compressie-methode"&gt;
                &lt;option label="Geen" value=""&gt;
                &lt;option label="gzip" value="gzip"&gt;
                &lt;option id="xz" label="xz" value="xz"&gt;
        &lt;/radio&gt;
        [...]
&lt;/dialog&gt;
        </programlisting>
	<para
>In dit voorbeeld wordt de compressie-optie "xz" eenvoudig uitgezet indien de gebruikte versie van &R; ouder is dan 2.10.0 (waarin xz-compressie niet wordt ondersteund).  Het <command
>&lt;dependency_check&gt;</command
>-element ondersteunt hetzelfde <command
>&lt;dependencies&gt;</command
>-element als in &pluginmap;-bestanden. Het maakt een booleaanse eigenschap aan, die true is, indien aan de opgegeven afhankelijkheden wordt voldaan, en anders false.</para>
</sect1>
<sect1 id="sect_dependencies_r_packages"
><title
>Afhankelijkheden van &R;-pakketten</title>
<para
>Afhankelijkheden van specifieke &R;-pakketten kunnen worden gedefinieerd, maar vanaf &rkward; 0.6.1 worden deze afhankelijkheden automatisch noch gecontroleerd, noch geïnstalleerd / ingelezen. Maar zij zijn te zien in de plugin help-bestanden. Hier is een voorbeeld van een definitie:</para>
<programlisting
>&lt;dependencies&gt;
                &lt;package 
                        name="heisenberg"
                        min_version="0.11-2"
                        repository="http://rforge.r-project.org"
                /&gt;
        &lt;/dependencies&gt;
</programlisting>
<note
><para
>Zorg er altijd voor dat u de geëigende  <function
>require()</function
>aanroepen (calls) toevoegt wanneer voor uw plugin bepaalde pakketten nodig zijn.</para
></note>
<note
><para
>Indien u uw <link linkend="external_plugins"
>&pluginmap; als een &R;-pakket uitgeeft</link
>, en alle plugins van één bepaald pakket afhankelijk zijn, dan moet u die afhankelijkheid definiëren op het niveau van het &R;-pakket. Het definiëren van afhankelijkheden van &R;-pakketten op het niveau van de  &rkward;-&pluginmap; is het nuttigst, indien alleen enkele van uw plugins die nodig hebben, de afhankelijkheid niet in CRAN beschikbaar is, of wanneer uw &pluginmap; niet uitgegeven wordt als een &R;-pakket.</para
></note>
</sect1>
<sect1 id="sect_dependencies_other_pluginmaps"
><title
>Dependencies (afhankelijkheden) van andere &rkward; &pluginmap;s</title>
	<para
>Indien uw plugins afhankelijk zijn van plugins in een andere &pluginmap; (die <emphasis
>geen</emphasis
> onderdeel is van uw pakket) kunt u deze dependency als volgt definiëren:</para>
<programlisting
>&lt;dependencies&gt;
                &lt;pluginmap 
                        name="heisenberg_plugins"
                        url="http://eternalwondermaths.example.org/hsb"
                /&gt;
        &lt;/dependencies&gt;
</programlisting>
<para
>Op dit moment wordt niet ingelezen, noch geïnstalleerd, en zelfs niet gewaarschuwd voor ontbrekende &pluginmap;s, maar u krijgt u tenminste informatie  over dependencies (en waar die te verkrijgen) in de help-pagina van de plugin. U hoeft niet (en moet niet) dependencies declareren van &pluginmap;s die mee worden geleverd met de officiële &rkward;-distributie, of van &pluginmap;s in uw eigen pakket.Verder, indien een vereiste &pluginmap; wordt <link linkend="external_plugins"
> uitgegeven als een &R;-pakket</link
>, moet u een dependency van het pakket declareren (zoals getoond in de vorige sectie), en niet van de map.</para>
	<para
>Om er zeker van te zijn dat de vereiste &pluginmap;s werkelijk wordeningelezen, moet u de <command
>&lt;require&gt;</command
>-tag gebruiken (zie de <link linkend="pluginmapelements"
>naslag</link
> voor details).</para>
</sect1>
<sect1 id="sect_dependencies_example"
><title
>Een voorbeeld</title>
	<para
>Om uit te leggen hoe definities van dependencies (afhankelijkheden) door elkaar kunnen worden gebruikt, is hier een gecombineerd voorbeeld:</para>
<programlisting
>&lt;document ...&gt;
        &lt;dependencies rkward_min_version="0.5.0c"&gt;
                &lt;package 
                        name="heisenberg"
                        min_version="0.11-2"
                        repository="http://rforge.r-project.org"
                /&gt;
                &lt;package 
                        name="DreamsOfPi"
                        min_version="0.2"
                /&gt;
                &lt;pluginmap 
                        name="heisenberg_plugins"
                        url="http://eternalwondermaths.example.org/hsb"
                /&gt;
        &lt;dependencies&gt;

        &lt;require map="heisenberg::heisenberg_plugins"/&gt;

        &lt;components ...&gt;
                &lt;component id="mijnplugin" file="gereduceerde_versie_van_mijnplugin.xml" ...&gt;
                        &lt;dependencies rkward_max_version="0.6.0z" /&gt;
                &lt;/component&gt;
                &lt;component id="mijnplugin" file="fantasie_versie_van_mijnplugin.xml" ...&gt;
                        &lt;dependencies rkward_min_version="0.6.1" /&gt;
                &lt;/component&gt;
                ...
x        &lt;/components ...&gt;
&lt;/document&gt;
</programlisting>
</sect1>
</chapter>

<chapter id="i18n">
	<title
>Plugin vertalingen</title>
	<para
>Tot dusver hebben we in het voorbijgaan een paar concepten gebruikt met betrekking tot vertalingen (of kortweg "i18n": "internationalization" dat met 18  karakters  tussen de i en de n wordt geschreven). In dit hoofdstuk vertellen we meer over de i18n-functionaliteit in plugins voor &rkward;. Meestal heeft u die <emphasis
>niet</emphasis
> allemaal nodig voor uw plugins. Maar het kan toch wel handig zijn dit hoofdstuk in zijn geheel aandachtig te lezen, omdat het begrip van deze concepten u in staat kan stellen plugins te maken die goed vertaalbaar zijn, en een hoge kwaliteit mogelijk maakt van de vertalingen. </para>
	<sect1 id="i18n_general"
><title
>Algemene beschouwingen</title>
		<para
>Een belangrijk aspect van software-vertalingen, dat u moet begrijpen, in tegenstelling tot dat van teksten, is dat het voor vertalers vaak heel lastig is een compleet plaatje te hebben van <emphasis
>wat</emphasis
> ze eigenlijk vertalen. Vertalingen van software berusten noodzakelijkerwijs op korte tekstfragmenten: elke label (naam) die u aan een <command
>&lt;option&gt;</command
> in een <command
>&lt;radio&gt;</command
> geeft, elke string die u markeert voor vertaling in een aanroep (call) van de <command
>i18n()</command
>-functie, vormen een aparte "vertaaleenheid". In essentie wordt elk zo'n fragment geïsoleerd aan de vertaler aangeboden. Wel, niet helemaal geïsoleerd, omdat we proberen de vertaler zoveel mogelijk betekenisvolle context aan te bieden als dat maar automatisch mogelijk is. Maar in een aantal gevallen moeten vertalers extra context hebben, om een string te kunnen begrijpen, vooral bij korte strings. </para>
	</sect1>
	<sect1 id="i18n_xml"
><title
>i18n in &rkward;'s xml-bestanden</title>
		<para
>Voor &rkward;'s &XML;-bestanden, is i18n meestal geen probleem. Als u uw eigen <command
>.pluginmap</command
> schrijft (&eg; voor een <link linkend="external_plugins"
>externe plugin</link
>), moet u een <replaceable
>po_id</replaceable
> opgeven naast de pluginmap's <replaceable
>id</replaceable
> (naam). Dit definieert de te gebruiken zogenoemde "message catalog" (berichtencatalogus). In het algemeen moet die gelijk zijn aan de <replaceable
>id</replaceable
> van uw <command
>.pluginmap</command
>, maar indien u meerdere bestanden <command
>.pluginmap</command
> levert binnen één pakket, dan wilt u waarschijnlijk in uw kaarten een gezamelijke <replaceable
>po_id</replaceable
> specificeren. De <replaceable
>po_id</replaceable
> van een bestand <command
>.pluginmap</command
> wordt geërfd door alle erin gedeclareerde plug-ins, tenzij die een andere <replaceable
>po_id</replaceable
> declareert. </para>
		<para
>Voor plugins en help-pagina's hoeft u &rkward; niet te vertellen welke strings vertaald moeten worden, omdat dit gewoonlijk uit hun gebruik blijkt. Maar, zoals hier boven uitgelegd, moet u letten op strings die op meer manieren kunnen worden begrepen, of waar wat uitleg bij nodig is voor de juiste vertaling. <replaceable
>i18n_context</replaceable
> zoals dit: </para>
		<programlisting
>&lt;checkbox id="schaal" label="Schaal" i18n_context="Schaal tonen"/&gt;
&lt;checkbox id="schaal" label="Schaal" i18n_context="De plot schalen"/&gt;
                </programlisting>
		<para
>Door <replaceable
>i18n_context</replaceable
> op te geven worden de twee strings afzonderlijk vertaald. Bovendien ziet de vertaler de context. Het <replaceable
>i18n_context</replaceable
>-attribuut wordt ondersteund in alle elementen die ergens vertaalbare strings bevatten,  met inbegrip van elementen waarbinnen tekst aanwezig is (&eg; <command
>&lt;text&gt;</command
>-elementen). </para>
		<para
>In andere gevallen heeft de te vertalen string een enkele niet-dubbelzinnige betekenis, maar is er toch nog wat uitleg gewenst. In dat geval kunt u commentaar toevoegen die zichtbaar is voor vertalers. Voorbeelden hiervan kunnen zijn: </para>
		<programlisting
>&lt;!-- i18n: Nee, dit is geen typefout voor screen plot! --&gt;
&lt;component id="scree_plot" label="Scree plot"/&gt;

&lt;!-- i18n: Houd zo mogelijk deze string kort. Meer dan  zo'n 15 karakters
ziet er hier niet goed uit, en de betekenis moet duidelijk zijnvoor de 
gebruiker (selectie uit lijst met waarden naast dit element) --&gt;
&lt;valueslot id="geselecteerd" label="Een kiezen"/&gt;
                </programlisting>
		<para
>Merk op dat zulk commentaar vooraf moet gaan aan het element waarop het betrekking heeft, en moet beginnen met of "i18n:" of "VERTALERS:" </para>
		<para
>Tenslotte, in zeldzame gevallen, wilt u dat bepaalde strings niet vertaald zullen worden. Dit is begrijpelijk, bijvoorbeeld, als u laat kiezen tussen diverse &R;-functienamen met behulp van  <command
>&lt;radio&gt;</command
>-rondjes. U wilt dan niet dat deze worden vertaald, (maar afhankelijk van de context, moet u duidelijke namen overwegen): </para>
		<programlisting
>&lt;radio id="transformatie" label="toe te passen R-functie"&gt;
  &lt;option id="as.list" noi18n_label="as.list()"/&gt;
  &lt;option id="as.vector" noi18n_label="as.vector()"/&gt;
  [...]
&lt;/radio&gt;
                </programlisting>
		<para
>Merk op dat u dan het <replaceable
>label</replaceable
>-attribuut weglaat, en in plaats daarvan <replaceable
>noi18n_label</replaceable
> opgeeft. Ook, dat in tegenstelling tot <replaceable
>i18n_context</replaceable
> en commentaar, het gebruiken van <replaceable
>noi18n_label</replaceable
> uw plugin incompatibel maakt met versies van &rkward; eerder dan 0.6.3. </para>
	</sect1>
	<sect1 id="i18n_js"
><title
>i18n in &rkward;'s js-bestanden en secties</title>
		<para
>In tegenstelling tot de <literal role="extension"
>.xml</literal
>-bestanden vereist het vertaalbaar maken van de <literal role="extension"
>.js</literal
>-bestanden van een plugin meer aanpasarbeid. Het grote verschil is hier dat er geen goede automatische manier is, aan te geven dat een string moet worden weergegeven als een voor een mens leesbare tekst, of als een stuk code. Dus zult u dit zelf moeten aanmerken. We hebben hier gaandeweg  al voorbeelden van gezien. Hier volgt een completere beschrijving van de i18n-functies in js-code, en een aantal tips voor complexere gevallen: </para>
<variablelist>
<varlistentry>
	<term
><command
>i18n (msgid, [...])</command
></term>
	<listitem
><para
>De belangrijkste functie. Merkt de string aan om vertaald te worden. De string (vertaald of niet) wordt teruggegeven tussen dubbele aanhalingstekens (""). Een willekeurig aantal plaatshouders (open plaatsen, place holders) kunnen in de string worden gebruikt zoals hieronder te zien is. Zulke plaatshouders in plaats van het aan elkaar plakken van kleine substrings is veel eenvoudiger voor vertalers:</para>
		<programlisting
>i18n ("Vergelijken objecten %1 en %2", getString ('x'), getString ('y'));
                </programlisting
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>i18nc (msgctxt, msgid, [...])</command
></term>
	<listitem
><para
>Zelfde als <command
>i18n()</command
>, maar geeft ook nog eencontext voor de message:</para>
		<programlisting
>i18nc ("eigen naam, niet geestestoestand", "Mood test"); (Vert.: Engels: Mood is stemming, humeur, én er bestaat een statistische test met de naam Mood test)
                </programlisting
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>i18np (msgid_singular, msgid_plural, n, [...])</command
></term>
	<listitem
><para
>Zelfde als  <command
>i18n()</command
>, maar voor messages die in enkelvoud en meervoud verschillend zijn (en in sommige talen zijn er zelfs meer numerieke vormen). Merk op dat precies zoals met <command
>i18n()</command
>, u een willekeurig aantal vervangingen (place holders) kunt gebruiken, maar de eerste ('%1')  is verplicht, en moet een geheel getal zijn.</para>
		<programlisting
>i18np ("Vergelijken enkel paar", "Vergelijken "%1" verschillende paren", n_paren);
                </programlisting
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>i18ncp (msgctxt, msgid_singular, msgid_plural, n, [...])</command
></term>
	<listitem
><para
><command
>i18np()</command
> met toegevoegde message context.</para
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>comment (comment, [indentation])</command
></term>
	<listitem
><para
>Echo't een commentaar bij de code, gemerkt voor vertaling. In tegenstelling tot de andere i18n()-functies, niet tussen aanhalingstekens, maar met een '#' voor iedere commentaarregel.</para>
		<programlisting
>comment ("Transponeer de matrix");
                        echo ('x &lt;- t (x)\n');
                </programlisting
></listitem>
</varlistentry>
</variablelist>
	<para
>Voor het toevoegen van commentaar voor de vertalers (zie <link linkend="i18n_xml"
>boven</link
> voor een discussie over de verschillen tussen commentaar en context), voeg commentaar toe dat begint met "i18n:" of "translators:" onmiddellijk boven de <command
>i18n()</command
>-aanroep voor commentaar. Bijv.: </para>
	<programlisting
>// i18n: Spelling is correct: Scree plot.
                echo ('rk.header (' + i18n ("Scree plot") + ')\n');
        </programlisting>

		<sect2 id="i18n_js_quoting"
><title
>i18n en aanhalingstekens</title>
			<para
>Meestal hoeft u zich geen zorgen te maken over het gedrag van i18n() met betrekking tot aanhalingstekens. Omdat vertaalbare strings meestal string literals (stringconstanten) zijn, is het aanhalen ervan prima, en bespaart dit u veel typewerk. En ook, in functies zoals <command
>makeHeaderCode()/Header()</command
> die gewoonlijk hun argumenten aanhalen, worden ge-i18n()'de strings beschermd tegen dubbel aanhalen.In wezen werkt dit door het sturen van de vertaalde string, eerst  door <command
>quote()</command
> (om het aangehaald te maken), daarna door <command
>noquote()</command
> (om te voorkomen dat die nog een keer wordt aangehaald). Mocht u een vertaalbare string nodig hebben zonder aanhalingstekens, dan gebruikt u <command
>i18n(noquote ("Mijn bericht"))</command
>. Indien u een vertaalbare string nodig heeft die nog een keer moet worden aangehaald, dan stuurt u die <emphasis
>twee keer</emphasis
> door <command
>quote()</command
>. </para>
			<para
>Dat gezegd hebbende, is het gewoonlijk geen goed idee om zaken zoals functienamen of namen van variabelen vertaalbaar te maken. Ten eerste is &R; de programmeertaal in wezen Engels, en is de taal zelf niet geïnternationaliseerd. Commentaar bij code is iets geheel anders, maar daarvoor moet u de <command
>comment()</command
>-functie gebruiken. Tweedens, het vertaalbaar maken van syntactisch relevante stukken van de gegenereerde code betekent dat vertalingen uw plugin onbruikbaar kunnen maken. Bijv. als een nietsvermoedende vertaler een variabelenaam vertaalt in twee aparte woorden, met daar tussen een spatie

(Vert.: ik heb de stukjes programmacode zo voorzichtig mogelijk vertaald, maar ik ben me ervan bewust, dat dit wel eens mis kan zijn gegaan. Maar die stukjes programmacode zijn ook bedoeld als illustratie, en dat kan het best in het Nederlands. Elders in dit document worden alle stukjes programmacode als één groot geheel weergegeven, en daar heb ik NIET aangezeten). </para>
		</sect2>
	</sect1>
	<sect1 id="i18n_workflow"
><title
>Onderhoud van vertalingen</title>
		<para
>Nu uw plugin vertaalbaar is gemaakt, hoe kunt u het werkelijk laten vertalen? In het algemeen hoeft u zich daar alleen zorgen over te maken bij het ontwikkelen van een<link linkend="external_plugins"
> externe plugin</link
>. Voor plugins in de hoofd-repository van &rkward; wordt al deze magie voor u gedaan. Hier is in principe hoe dit werkt voor externe plug-ins. Merk op dat u de hulpmiddelen "gettext" moet hebben geïnstalleerd: </para>
		<itemizedlist>
			<listitem
><para
>Merk alle strings aan, en geef context op en commentaar waar nodig</para
></listitem>
			<listitem
><para
>Laat <command
>python3 scripts/update_plugin_messages.py --extract-only /pad/naar/mijn.pluginmap</command
> werken. scripts/update_plugin_messages.py is thans niet aanwezig in de bronuitgaven (source releases), maar kan worden gevonden in de repository voor bronbestanden.</para
></listitem>
			<listitem
><para
>Geef het resulterende <command
>rkward__<replaceable
>POID</replaceable
>.pot</command
>-bestand uit aan uw vertalers. Voor externe plugins wordt aangeraden ze te plaatsen in een submap "po" in inst/rkward.</para
></listitem>
			<listitem
><para
>De vertaler opent het bestand in een vertaalhulpmiddel zoals <command
>lokalize</command
>. Eigenlijk zou u, ook als u niet van plan bent een vertaling voor te bereiden, deze stap zelf eens moeten doen. Bekijk de strings en zoek naar mogelijke problemen / dubbelzinnigheden.</para
></listitem>
			<listitem
><para
>De vertaler slaat de vertaling op als <command
>rkward__<replaceable
>POID</replaceable
>.<replaceable
>xx</replaceable
>.po</command
> (waarin <replaceable
>xx</replaceable
> de taalcode is, Nederlands is nl), en stuurt het aan u terug.</para
></listitem>
			<listitem
><para
>Kopieer <command
>rkward__<replaceable
>POID</replaceable
>.<replaceable
>xx</replaceable
>.po</command
> naar uw bronbestanden, naast <command
>rkward__<replaceable
>POID</replaceable
>.pot</command
>. Laat <command
>python3 scripts/update_plugin_messages.py /pad/naar/mijn.pluginmap</command
> werken. (Merk op: nu zonder <replaceable
>--extract-only</replaceable
>). Hierdoor wordt de vertaling samengevoegd (merge) met alle tussentijdse veranderingen in de strings, de vertaling gecompileerd, en geïnstalleerd in <command
><replaceable
>DIR_OF_PLUGINMAP</replaceable
>/po/<replaceable
>xx</replaceable
>/LC_MESSAGES/rkward__<replaceable
>POID</replaceable
>.mo</command
> (waarin <replaceable
>xx</replaceable
> weer de taalcode (Nederlands: nl) is).</para
></listitem>
			<listitem
><para
>U moet ook de niet-gecompileerde vertaling (&ie; <command
>rkward__<replaceable
>POID</replaceable
>.<replaceable
>xx</replaceable
>.po</command
>) bijsluiten in uw distributie, in de "po" subdirectory.</para
></listitem>
			<listitem
><para
>Voor elke update van uw plugin, laat u <command
>python3 scripts/update_plugin_messages.py /pad/naar/mijn.pluginmap</command
> werken, zodat het .pot-bestand wordt bijgewerkt, maar ook de bestaande .po-files, en de catalogus van gecompileerde messages (berichten).</para
></listitem>
		</itemizedlist>
	</sect1>
	<sect1 id="i18n_translators"
><title
>Schrijven van vertalingen van plugins</title>
		<para
>We nemen aan dat u kunt vertalen, of ergens anders hierover wilt lezen. Maar niettemin nog een paar opmerkingen over het vertalen van plugins voor &rkward;: </para>
		<itemizedlist>
			<listitem
><para
>Plugins van &rkward; waren onvertaalbaar tot aan versie 0.6.3, en werden voordien niet geschreven met i18n in het achterhoofd. Dus ontmoet u wat meer ambigue strings en andere i18n-problemen, dan in andere, gerijpte projecten. Werk hier aub. niet stilletjes omheen, maar laat ons (of de plugin maintainers) dit weten, zodat we er wat aan kunnen doen.</para
></listitem>
			<listitem
><para
>Veel plugins van &rkward; verwijzen naar zeer gespecialiseerde termen, zoals data handling (omgaan met gegevens) en statistieken, maar ook uit andere wetenschapsgebieden. In veel gevallen is er voor vertalen, hiervan tenminste enige kennis nodig. In sommige gevallen  <emphasis
>is</emphasis
> er domweg geen goede vertaling van een technische term, en de beste optie is de term niet te vertalen, of de Engelse term er tussen haakjes achter te zetten. Probeer niet de strings 100% letterlijk te vertalen, maar geef liever een goede vertaling, ook al betekent dit dat er soms wat wordt overgeslagen, (of zelfs het overslaan van gehele message catalogs). Andere gebruikers zijn misschien wel in staat de gaten in de vertaalde technische termen aan te vullen.</para
></listitem>
		</itemizedlist>
	</sect1>
</chapter>

<chapter id="chapter_about_information">
<title
>Auteur, licentie en versie-informatie</title>
<para
>U heeft dus een aantal plugins geschreven, en u wilt <link linkend="external_plugins"
>uw werk ter beschikking stellen aan anderen</link
>. Om er zeker van te zijn dat gebruikers weten waar uw werk over gaat, onder welke voorwaarden u het uitgeeft, en bij wie ze moeten zijn bij problemen of met ideeën, moet u wat extra informatie geven <emphasis
>over</emphasis
> uw plugins. Dit kan met het <command
>&lt;about&gt;</command
>-element, of in de &pluginmap; of in afzonderlijke plugin <literal role="extension"
>.xml</literal
>-bestanden (in beide  gevallen als een directe child van de document-tag). Wanneer dit in de  &pluginmap; wordt opgegeven, geldt het voor alle plugins. Indien <command
>&lt;about&gt;</command
> op beide plaatsen wordt opgegeven, heeft  <command
>&lt;about&gt;</command
> -informatie in het plugin  <literal role="extension"
>.xml</literal
>-bestand voorrang boven die in het &pluginmap; -bestand. U kunt ook een <command
>&lt;about&gt;</command
>-element toevoegen aan .rkh-pagina's, die niet bij een plugin behoren, indien dat nodig is.</para>
<para
>Hier volgt een voorbeeld van een &pluginmap;-bestand met slechts een beetje informatie. In geval van twijfel kan er meer informatie beschikbaar zijn in de naslag (reference).</para>
<programlisting
>&lt;document 
        namespace="rkward"
        id="SquaretheCircle_rkward"
&gt;
        &lt;about 
                name="Square the Circle"
                shortinfo="Cirkel-kwadratuur met Heisenberg compensatie."
                version="0.1-3"
                releasedate="2011-09-19"
                url="http://eternalwondermaths.example.org/23/stc.html"
                license="GPL"
                category="Meetkunde"
        &gt;
                &lt;author 
                        given="E.A."
                        family="Dölle"
                        email="doelle@eternalwondermaths.example.org"
                        role="aut"
                 /&gt;
                &lt;author 
                        given="A."
                        family="Assistant"
                        email="alterego@eternalwondermaths.example.org"
                        role="cre, ctb"
                 /&gt;
        &lt;/about&gt;
        &lt;dependencies&gt;
                ...
        &lt;/dependencies&gt;
        &lt;components&gt;
                ...
        &lt;/components&gt;
        &lt;hierarchy&gt;
                ...
        &lt;/hierarchy&gt;
&lt;/document&gt;
</programlisting>
<para
>Het meeste is vanzelfsprekend, dus bespreken we niet elk tag-element. Maar laten we enkele details bekijken waar wat meer uitleg bij nodig zou kunnen zijn (SquaretheCircle : "Kwadratuur van de cirkel", een van de drie grote meetkundige problemen uit de oudheid, onoplosbaar met passer en liniaal). </para>
<para
>Het <parameter
>category</parameter
>-element in <command
>&lt;about&gt;</command
> kan wat ruim worden gedefinieerd, maar moet betekenisvol zijn, omdat de bedoeling is dat het wordt gebruikt om plugins in groepen in te delen. Alle andere attributen in deze openingstag zijn verplicht en moeten worden ingevuld met een redelijke inhoud.  </para>
<para
>Ook moet minstens een <command
>&lt;author&gt;</command
> met een geldig emailadres en de role <quote
>aut</quote
> (<quote
>author</quote
>) worden opgegeven. Voor het geval dat er een probleem is met uw plugin, of als iemand u wilt bedanken, moet het eenvoudig zijn even contact met u op te nemen. Voor verdere informatie over andere valide rollen, zoals <quote
>ctb</quote
> voor mensen die code hebben bijgedragen (contribute), of <quote
>cre</quote
> voor pakketonderhoud (creator), zie <ulink url="http://stat.ethz.ch/R-manual/R-patched/library/utils/html/person.html"
>R-documentatie over <function
>person()</function
></ulink
>. </para>
<note
><para
>Onthoud dat u <command
>&lt;include&gt;</command
> en / of <command
>&lt;insert&gt;</command
> kunt gebruiken  voor het herhalen van informatie in diverse <literal role="extension"
>.xml</literal
>-bestanden (&eg; informatie over een auteur die betrokken was bij verschillende plugins). <link linkend="sect_similar_plugins"
>Verdere informatie</link
>. </para
></note>
<tip
><para
>U hoeft deze &XML;-code niet zelf te schrijven. Als u de functie <function
>rk.plugin.skeleton()</function
> gebruikt uit het <link linkend="rkwarddev"
><application
>rkwarddev</application
>-pakket</link
> en alle nodige informatie aanlevert via de optie <parameter
>about</parameter
>, wordt er voor u automatisch een &pluginmap;-bestand aangemaakt met een werkende &lt;about&gt;-sectie.</para
></tip>
</chapter>

<chapter id="external_plugins">
<title
>Uw werk met anderen delen</title>
<sect1 id="sect_external_plugins"
><title
>Externe plugins</title>
	<para
>Vanaf versie 0.5.5 biedt &rkward; een gemakkelijke manier voor het installeren van extra plugins van derden, die niet behoren tot het kernpakket zelf. Deze worden <quote
>externe plugins</quote
> genoemd. Zij komen in de vorm van een &R;-pakket, en kunnen direct vanuit het gebruikelijke pakketbeheer van &R; en/of &rkward; worden beheerd. </para>
	<para
>Deze sectie van de documentatie beschrijft hoe externe plugins tot een pakket moeten worden gemaakt (packaged), zo dat ze met &rkward; kunnen worden gebruikt. Het maken van de plugins zelf is natuurlijk hetzelfde als in de vorige secties. U moet dus waarschijnlijk eerst een werkende plugin maken, en daarna hier zien hoe die beschikbaar te maken voor anderen (distribute it). </para>
	<para
>Omdat externe plugins relatief iets nieuws zijn, kunnen in toekomstige uitgaven de details mogelijk veranderen. Wij horen gaarne van u als u nieuwe ideeën heeft waarmee het proces kan worden verbeterd. </para>
	<tip>
		<para
>In deze docs worden de details uitgelegd van externe plugins, opdat u kunt leren hoe zij werken. Bovendien kunt u een blik werpen op het <link linkend="rkwarddev"
><application
>rkwarddev</application
>-pakket</link
>, dat bedoeld is om veel van het ontwikkelingsproces te automatiseren. </para>
	</tip>
</sect1>
<sect1 id="why_external_plugins">
<title
>Waarom externe plugins?</title>
	<para
>Het aantal pakketten waarmee de functionaliteit van &R; wordt uitgebreid, is al immens, en wordt steeds groter. Aan de ene kant moedigen we aan plugins te maken voor zelfs de meest gespecialiseerde taken die u moet oplossen. Aan de andere kant moet de gemiddelde gebruiker niet verdwalen in een oerwoud van menu's vol met onbekende statistische termen. Daarom leek het verstandig het beheren van plugins in &rkward; heel modulair te houden. Het team van &rkward; onderhoudt zijn eigen publieke repository van pakketten op <ulink url="https://files.kde.org/rkward/R/"
>https://files.kde.org/rkward/R/</ulink
>, bestemd voor het bewaren van uw externe plugins. </para>
	<para
>Een vuistregel hiervoor is dat plugins die een wijdverspreid doel dienen (&eg; t- Tests) deel zouden moeten uitmaken van het kernpakket (core package), en die alleen voor een heel beperkt aantal mensen met gespecialiseerde belangstelling nuttig zijn, moeten worden geleverd als een optioneel pakket. Voor u als een schrijver van plugins, is het het beste als u met een externe plugin begint. </para>
</sect1>
  
<sect1 id="structure_of_a_plugin_package">
<title
>Structuur van een plugin-pakket</title>
	<para
>Opdat externe plugins goed installeren en werken, is het nodig dat zij voldoen aan enkele structurele regels met betrekking tot hun bestandshiërarchie. </para>
    
	<sect2 id="file_hierarchy"
><title
>Bestandshiërarchie</title>
		<para
>Kijken we naar de prototype bestandshiërarchie van een bewerkelijk pluginarchief. U heeft niet alle genoemde directories en/of bestanden nodig om het te laten werken (lees verder voor wat werkelijk nodig is). Beschouw dit als een <quote
>best practice</quote
>-voorbeeld: </para>
		<programlisting
>plugin_name/
                inst/
                        rkward/
                                plugins/
                                        plugin_naam.xml
                                        plugin_naam.js
                                        plugin_naam.rkh
                                        ...
                                po/
                                        ll/
                                                LC_MESSAGES/
                                                        rkward__plugin_naam_rkward.mo
                                        rkward__plugin_naam_rkward.ll.po
                                        rkward__plugin_naam_rkward.pot
                                tests/
                                        testsuite_naam/
                                                RKTestStandards.eentest_naam.rkcommands.R
                                                RKTestStandards.eentest_naam.rkout
                                                ...
                                        testsuite.R
                                plugin_name.pluginmap
                                ...
        ChangeLog
        README
        AUTHORS
        LICENSE
        DESCRIPTION
                </programlisting>
		<note>
			<para
>In dit voorbeeld moeten alle voorkomens van <token
>plugin_naam</token
>, <token
>testsuite_naam</token
> en <token
>eentest_naam</token
> worden vervangen door de juiste namen. Ook is <token
>ll</token
> een plaatshouder voor een taalcode (&eg;, <quote
>nl</quote
> (Nederlands), <quote
>en</quote
> of <quote
>es</quote
>). </para>
		</note>
		<tip>
			<para
>U hoeft deze bestandshiërarchie niet zelf te maken. Indien u de  functie <function
>rk.plugin.skeleton()</function
> uit het <link linkend="rkwarddev"
><application
>rkwarddev</application
>-pakket</link
> gebruikt, maakt  het automatisch alle nodige bestanden en directories voor u aan, behalve de <filename
>po</filename
>-directory, die wordt aangemaakt en beheerd door de <link linkend="i18n_workflow"
>vertaalscript</link
>. </para>
		</tip>
		<sect3 id="basic_plugin_components">
		<title
>Basis plugin-componenten</title>
			<para
>Het is verplicht ten minste drie bestanden bij te sluiten: een <link linkend="pluginmap"
>&pluginmap;</link
>, een plugin <link linkend="mainxml"
>.xml</link
> -beschrijving en een plugin <link linkend="jstemplate"
>.js</link
>-bestand. Dat betekent dat zelfs de "plugins"-directory optioneel is. Het kan helpen als u uw bestandenenigszins ordent, zeker als u meerdere plugins/dialogen  in het archief opneemt, wat natuurlijk geen probleem is. U kunt net zoveel directories gebruiken voor de pluginbestanden als u nodig vindt, zij hoeven slechts te lijken op de <link linkend="pluginmap"
>&pluginmap;</link
>. Het is ook mogelijk diverse  &pluginmap;-bestanden bij te sluiten, indien dit nodig is, maar u moet ze in dat geval allemaal opnemen in <quote
>plugin_naam.pluginmap</quote
>. </para>
			<para
>Elk &R;-pakket moet een geldig <filename
>DESCRIPTION</filename
>-bestand (bestand met een BESCHRIJVING) hebben, dat ook cruciaal is voor &rkward; en waarin staat dat het een plugin bevat. De meeste informatie erin is ook nodig in de plugin <link linkend="chapter_about_information"
>Meta-informatie</link
> (informatie over de plugin) en mogelijke <link linkend="chapter_dependencies"
>dependencies</link
>, maar in een ander format (de &R;-documentatie verklaart <ulink url="http://cran.r-project.org/doc/manuals/R-exts.html#The-DESCRIPTION-file"
>het <filename
>DESCRIPTION</filename
>-bestand in detail</ulink
>). </para>
			<para
>Naast de algemene inhoud van een <filename
>DESCRIPTION</filename
>- bestand, moet u ook zorgen voor de regel <quote
>Enhances: rkward</quote
> (verbetert rkward). Hierdoor zal &rkward; automatisch het pakket naar plugins doorzoeken bij installatie. Een voorbeeld van een <filename
>DESCRIPTION</filename
>-bestand ziet er als volgt uit: this: </para>
			<programlisting
>Package: SquaretheCircle
        Type: Package
        Title: Square the circle
        Version: 0.1-3
        Date: 2011-09-19
        Author: E.A. Dölle &lt;doelle@eternalwondermaths.example.org&gt;
        Maintainer: A. Assistant &lt;alterego@eternalwondermaths.example.org&gt;
        Enhances: rkward
        Description: Cirkelkwadratuur met Heisenberg compensation.
        License: GPL
        LazyLoad: yes
        URL: http://eternalwondermaths.example.org/23/stc.html
        Authors@R: c(person(given="E.A.", family="Dölle", role="aut",
                        email="doelle@eternalwondermaths.example.org"),
                        person(given="A.", family="Assistant", role=c("cre",
                        "ctb"), email="alterego@eternalwondermaths.example.org"))
                        </programlisting>
			<tip>
				<para
>U hoeft dit bestand niet zelf te schrijven. Indien u de functie <function
>rk.plugin.skeleton()</function
> uit het <link linkend="rkwarddev"
><application
>rkwarddev</application
>-pakket</link
> gebruikt en alle nodige informatie geeft via de <quote
>about</quote
>-optie, dan maakt het automatisch een werkend <filename
>DESCRIPTION</filename
>-bestand aan voor u. </para>
			</tip>
		</sect3>
		<sect3 id="additional_information">
		<title
>Bijkomende informatie (optioneel)</title>
			<para
><filename
>ChangeLog</filename
>, <filename
>README</filename
>, <filename
>AUTHORS</filename
>, <filename
>LICENSE</filename
> moeten voor zichzelf spreken en zijn geheel optioneel. In feite worden die niet geïnterpreteerd door &rkward;, dus zijn die alleen bedoeld voor het doorgeven van informatie die van belang kan zijn voor &eg; distributeurs. De meeste informatie  (over de auteurs, licentiebepalingen &etc;) worden toch wel gegeven in  de plugin-bestanden (zie de <link linkend="chapter_about_information"
>sectie over meta-informatie</link
>). Merk op dat al deze bestanden ook kunnen worden geplaatst ergens in de "inst"-directory, indien u wilt dat ze niet alleen in het bronarchief (source archive), maar ook in het geïnstalleerde pakket aanwezig zijn. </para>
		</sect3>
		<sect3 id="automated_plugin_testing">
		<title
>Geautomatiseerd testen van plugins (optioneel)</title>
			<para
>Een andere optionele directory is "tests", met daarin bestanden die nodig zijn voor het <ulink url="http://sourceforge.net/apps/mediawiki/rkward/index.php?title=Automated_Plugin_Testing"
>automatisch testen van plugins</ulink
>.  Deze tests zijn nuttig voor het snel controleren of uw plugins nog wel werken met de nieuwe versies van &R; of &rkward;. Indien u deze tests wilt gebruiken, dan moet u u heel goed houden aan het het hier beschreven namenschema en hiërarchie. Dit betekent dat de tests in een directory met de naam <filename
>tests</filename
> moeten zijn, waaronder een bestand <filename
>testsuite.R</filename
> en een map met teststandaarden die genoemd zijn naar de bijbehorende test-suite. U kunt echter meerdere test-suites beschikbaar stellen. In dat geval hoeft u ze niet allemaal in één <filename
>testsuite.R</filename
>-bestand op te nemen. U kunt ze opsplitsen in &eg; een bestand voor elke test-suite en een <filename
>testsuite.R</filename
> aanmaken met <function
>source()</function
>-aanroepen voor elk bestand in de suite. In beide gevallen moet u aparte subdirectories aanmaken met teststandaarden voor elke gedefinieerde suite. Een suite (zeg: swiet) is een aantal bij elkaar behorende programma's. </para>
			<para
>Het nut van het zich houden aan deze structuur is dat het testen van plugin eenvoudig kan worden gedaan met <function
>rktests.makplugintests()</function
> in het <ulink url="rkward://rhelp/rkwardtests"
>rkwardtests</ulink
>-pakket zonder extra argumenten. Zie ook de online-documentatie <ulink url="http://sourceforge.net/apps/mediawiki/rkward/index.php?title=Automated_Plugin_Testing"
>Automatisch plugin-testen</ulink
> voor nadere details. </para>
		</sect3>
	</sect2>
</sect1>
  
	<sect1 id="building_the_plugin_package">
		<title
>Het compileren (build) van het plugin-pakket</title>
		<para
>Zoals eerder is uitgelegd, zijn externe &rkward;-plugins feitelijk &R;-pakketten, en dus is het proces van het maken van pakketten identiek. In tegenstelling tot "echte" &R;-pakketten, heeft een zuiver plugin-pakket geen verdere &R;-code (hoewel u natuurlijk ook &rkward;-plugins aan gewone &R;-pakketten  kunt toevoegen, op dezelfde manier als hier uitgelegd). Het wordt hierdoor nog eenvoudiger een werkend pakket te maken, als u maar zorgt voor een geldig <filename
>DESCRIPTION</filename
>-bestand (BESCHRIJVING), en u u houdt aan de bestanden hiërarchie zoals uitgelegd in de  <link linkend="structure_of_a_plugin_package"
>vorige secties</link
>.</para>
		<para
>De gemakkelijkste manier voor het daadwerkelijk compileren (build) en testen van uw plugin, is met de  opdracht <application
>R</application
> op de opdrachtregel, bijvoorbeeld:</para>
		<para
><userinput
><command
>R</command
> <option
>CMD build</option
> <parameter
><filename
>SquaretheCircle</filename
></parameter
>  </userinput
></para>
		<para
><userinput
><command
>R</command
> <option
>CMD INSTALL</option
> <parameter
><filename
>SquaretheCircle_0.1-3.tar.gz</filename
></parameter
> </userinput
></para>
		<tip
><para
>U hoeft dit compileren van het pakket niet op de opdrachtregel te doen, met de functie <function
>rk.build.package()</function
> in het <link linkend="rkwarddev"
><application
>rkwarddev</application
> pakket</link
>, kunt u uw plugin-pakket compileren en/of controleren.</para
></tip>
	</sect1>
</chapter>

<chapter id="rkwarddev">
	<title
>Plugin ontwikkelen met het <application
>rkwarddev</application
> pakket.</title>
	<sect1 id="rkdev_overview"
><title
>Overzicht</title>
		<para
>Het schrijven van plugins houdt het schrijven in van bestanden in drie talen (&XML;,&javascript; en R) en het aanmaken van een standaard hiërarchie van directories. Om dit voor degenen die plugins willen ontwikkelen (developers), eenvoudiger te maken, leveren wij het <application
>rkwarddev</application
>-pakket. Hierin zijn een aantal eenvoudige &R;-functies aanwezig, voor het aanmaken van &XML;-code voor alle dialoog-elementen zoals tabbooks, keuzevakjes, keuzelijsten of bestands-browsers, naast functies voor het aanmaken van &javascript;-code en help-bestanden voor &rkward;, om er maar een paar te noemen. De functie <function
>rk.plugin.skeleton()</function
> maakt een verwachte directory-boom aan en alle nodige bestanden, daar waar je die zou verwachten (skeleton is zoiets als geraamte, al het kale nodige).</para>
		<para
>Dit pakket wordt niet standaard geïnstalleerd, maar moet zelf worden geïnstalleerd uit <ulink url="https://files.kde.org/rkward/R/"
>&rkward;'s eigen repository</ulink
>. U kunt dit doen met  (<menuchoice
><guimenu
>Instellingen</guimenu
><guimenuitem
>Pakketten instellen</guimenuitem
></menuchoice
>) in de &GUI; (Grafisch), of in een lopende &R;-sessie.</para>
		<programlisting
>install.packages("rkwarddev", repos="https://files.kde.org/rkward/R")
                library(rkwarddev)
                </programlisting>
		<para
><application
>rkwarddev</application
> is afhankelijk van een klein pakket met de naam <quote
>XiMpLe</quote
>, dat een heel eenvoudig programma is voor het lezen (parser) en aanmaken van &XML;-bestanden, en dat ook aanwezig is in dezelfde repository.</para>
		<para
>De volledige <ulink url="https://files.kde.org/rkward/R/pckg/rkwarddev/rkwarddev.pdf"
>documentatie in PDF-formaat</ulink
> kunt u daar ook vinden. Een gedetailleerdere inleiding in het werken met het pakket vindt u in de <ulink url="http://files.kde.org/rkward/R/pckg/rkwarddev/rkwarddev_vignette.pdf"
>rkwarddev vignette</ulink
>.</para>
	</sect1>

	<sect1 id="rkdev_example"
><title
>Praktijk-voorbeeld</title>
		<para
>Om u een idee te geven van wat het <quote
>scripten van een plugin</quote
> inhoudt, in vergelijking met de directe aanpak die u in voorgaande hoofdstukken heeft gezien, maken we opnieuw een volledige t-test plugin aan -- deze keer met alleen de &R;-functies van het <application
>rkwarddev</application
> pakket.</para>

		<tip
><para
>Het pakket voegt een nieuwe &GUI;-dialoog toe aan &rkward; in het menu  <menuchoice
><guimenu
>Bestand</guimenu
><guimenuitem
>Exporteren</guimenuitem
><guimenuitem
>&rkward; plugin-script aanmaken</guimenuitem
></menuchoice
>. Uit de naam blijkt, dat u kale (skeleton) plugins kunt aanmaken, die nader kunnen worden uitgewerkt. Deze plugin werd op zijn beurt gegenereerd door een <application
>rkwarddev</application
>-script die u kunt vinden in de <quote
>demo</quote
>-directory van het geïnstalleerde pakket en pakketbronnen (sources), als een extra voorbeeld. U kunt het ook laten werken met de aanroep (calling) <function
>demo("skeleton_dialog")</function
></para
></tip>

		<sect2 id="rkdev_gui"
><title
>Beschrijving van de &GUI;</title>
		<para
>U zult onmiddellijk merken dat de manier van werken heel anders is: In tegenstelling tot het direct schrijven van de XML-code, begint u niet met de <command
>&lt;document&gt;</command
>-definitie, maar met de plugin- elementen die u in de dialoog wilt hebben. U kunt elk interface- element toekennen -- of het nu keuzevakjes, neerklapmenu's, slots voor variabelen of wat anders zijn -- aan individuele &R;-objecten, en daarna deze objecten combineren met de actuele &GUI;. Het pakket heeft functies voor <link linkend="interfaceelements"
>elke XML tag</link
> die kan worden gebruikt voor het definiëren van de plugin-&GUI;, en de meeste daarvan hebben dezelfde naam, maar dan met het voorvoegsel <function
>rk.XML.*</function
>. Bijvoorbeeld kan het definiëren van een <command
>&lt;varselector&gt;</command
> en twee <command
>&lt;varslot&gt;</command
>-elementen voor de variabelen <replaceable
>"x"</replaceable
> en <replaceable
>"y"</replaceable
> van het t-test voorbeeld worden gedaan met:</para>
		<programlisting
>variables &lt;- rk.XML.varselector(id.name="vars")
var.x &lt;- rk.XML.varslot("compare", source=variables, types="number", required=TRUE, id.name="x")
var.y &lt;- rk.XML.varslot("against", source=variables, types="number", required=TRUE, id.name="y")
                </programlisting>
		<para
>Het interessantste hierbij is waarschijnlijk <parameter
>source=</parameter
><replaceable
>variables</replaceable
>: een prominente eigenschap van het pakket is dat alle functies automatische ID's kunnen genereren, zodat u niet zelf <parameter
>id</parameter
>-waarden hoeft te bedenken, of eraan te denken dat ze naar een specifiek plugin-element moeten verwijzen. U kunt eenvoudig verwijzen naar de &R;-objecten, omdat alle functies die een ID nodig hebben van enig ander element die ook uit deze objecten kunnen lezen. <function
>rk.XML.varselector()</function
> is een beetje bijzonder, omdat die gewoonlijk geen inhoud (content) heeft waaruit een ID kan worden verkregen (het is mogelijk, maar alleen als u een naam opgeeft),  dus moeten we zelf een ID-naam instellen. Maar <function
>rk.XML.varslot()</function
> zou hier geen <parameter
>id.name</parameter
> argumenten nodig hebben, en dus is dit voldoende:</para>
		<programlisting
>variables &lt;- rk.XML.varselector(id.name="vars")
var.x &lt;- rk.XML.varslot("compare", source=variables, types="number", required=TRUE)
var.y &lt;- rk.XML.varslot("against", source=variables, types="number", required=TRUE)
                </programlisting>
		<para
>Om alle voorbeeldcode precies zo opnieuw aan te maken zou u alle ID-waarden handmatig moeten instellen. Maar omdat het pakket het ons gemakkelijker moet maken, maken we ons daarover geen zorgen meer.</para>
		<tip>
			<para
><application
>rkwarddev</application
> kan veel automatiseren bij het compileren van uw plugins. Maar het kan de voorkeur hebben dit niet volledig te gebruiken. Als u als doel heeft niet alleen werkende code te produceren, maar ook dat die door een mens gemakkelijk kan worden gelezen en vergeleken met uw genererende script, moet u overwegen altijd zelfverklarende ID's (namen) in te stellen met <parameter
>id.name</parameter
>. Als u uw &R;-objecten dezelfde namen geeft helpt dit ook met het verkrijgen van script-code die gemakkelijk(er) te begrijpen is. </para>
		</tip>
		<para
>Indien u wilt zien hoe de XML-code van het gedefinieerde element eruit ziet als u het naar een bestand exporteert, moet u het object met zijn naam aanroepen (call by name). Dus, als u nu  <quote
>var.x</quote
> aanroept in uw &R;-sessie, moet u iets zien dat er ongeveer zo uitziet:</para>
		<programlisting
>&lt;varslot id="vrsl_vergelijk" label="vergelijken" source="vars" types="number" required="true" /&gt;
                </programlisting>
		<para
>Sommige tags zijn alleen nuttig in de context van andere. Daarom, bijvoorbeeld, vindt u geen functie voor de <command
>&lt;option&gt;</command
>-tag. In plaats daarvan worden beide radioknoppen en neerklapmenu's gedefinieerd met inbegrip van hun opties als een lijst met naam (named list) waarin de namen gelijk zijn aan de de in de dialoog getoonde namen, en hun waardes een vector zijn met naam (named vector) die twee ingangen kan hebben, <parameter
>val</parameter
> voor de waarde van een optie, en de boolean <parameter
>chk</parameter
> om op te geven of deze optie standaard aan is.</para>
		<programlisting
>test.hypothesis &lt;- rk.XML.radio("met test-hypothese",
        options=list(
                "Twee-zijdig"=c(val="two.sided"),
                "Eerste is groter"=c(val="greater"),
                "Tweede is groter"=c(val="less")
        )
)
                </programlisting>
		<para
>Het resultaat ziet er als volgt uit:</para>
		<programlisting
>&lt;radio id="rad_usngtsth" label="met test-hypothese"&gt;
        &lt;option label="Twee-zijdig" value="two.sided" /&gt;
        &lt;option label="Eerste is groter" value="greater" /&gt;
        &lt;option label="Tweede is groter" value="less" /&gt;
&lt;/radio&gt;
                </programlisting>
		<para
>Alles wat ontbreekt voor de elementen van het tabblad <quote
>Basisinstellingen</quote
> is het keuzevakje voor gepaarde voorbeelden, en het structureren van al deze elementen in rijen en kolommen:</para>
		<programlisting
>check.paired &lt;- rk.XML.cbox("Gepaard voorbeeld", value="1", un.value="0")
basic.settings &lt;- rk.XML.row(variables, rk.XML.col(var.x, var.y, test.hypothesis, check.paired))
                </programlisting>
		<para
><function
>rk.XML.cbox()</function
> is een zeldzame uitzondering, waarin de functienaam niet de volledige tag-naam bevat, om wat typewerk uit te sparenvoor dit veelgebruikte element. De <function
>basic.settings</function
> (basisinstellingen) bevat nu:</para>
		<programlisting
>&lt;row id="row_vTFSPP10TF"&gt;
        &lt;varselector id="vars" /&gt;
        &lt;column id="clm_vrsTFSPP10"&gt;
                &lt;varslot id="vrsl_compare" label="vergelijk" source="vars" types="number" required="true" /&gt;
                &lt;varslot id="vrsl_against" label="met" i18n_context="vergelijken met" source="vars" types="number" required="true" /&gt;
                &lt;radio id="rad_usngtsth" label="met test-hypothese"&gt;
                        &lt;option label="Twee-zijdig" value="two.sided" /&gt;
                        &lt;option label="Eerste is groter" value="greater" /&gt;
                        &lt;option label="Tweede is groter" value="less" /&gt;
                &lt;/radio&gt;
                &lt;checkbox id="chc_Pardsmpl" label="Gepaard voorbeeld" value="1" value_unchecked="0" /&gt;
        &lt;/column&gt;
&lt;/row&gt;
                </programlisting>
		<para
>Op een soortgelijke manier maken de volgende regels &R;-objecten aan voor de elementen van het tabblad <quote
>Opties</quote
>, voor functies voor spinvelden, frames en stretch:</para>
		<programlisting
>check.eqvar &lt;- rk.XML.cbox("gelijke varianties aannemen", value="1", un.value="0")
conf.level &lt;- rk.XML.spinbox("vertrouwensniveau", min=0, max=1, initial=0.95)
check.conf &lt;- rk.XML.cbox("druk vertrouwensniveau af", val="1", chk=TRUE)
conf.frame &lt;- rk.XML.frame(conf.level, check.conf, rk.XML.stretch(), label="Vertrouwensinterval")
                </programlisting>
		<para
>Hierna is alles wat we nog moeten doen de objecten samen in een tabbook zetten en dat in een dialoogsectie plaatsen:</para>
		<programlisting
>full.dialog &lt;- rk.XML.dialog(
        label="t-Test met twee variabelen",
        rk.XML.tabbook(tabs=list("Basisinstellingen"=basic.settings, "Opties"=list(check.eqvar, conf.frame)))
)
                </programlisting>
		<para
>We kunnen ook nog de assistent-sectie aanmaken met zijn twee pagina's met dezelfde objecten, dus hun ID's worden gehaald voor de <command
>&lt;copy&gt;</command
>-tags:</para>
		<programlisting
>full.wizard &lt;- rk.XML.wizard(
                label="Twee-variabelen t-Test",
                rk.XML.page(
                        rk.XML.text("Ten eerste, selecteer de twee te vergelijken variabelen. En geef op, welke volgens uw theorie de grootste is. Selecteer twee-zijdig,
                                als uw theorie niet uitwijst, welke variabele de grootste is."),
                        rk.XML.copy(basic.settings)),
                rk.XML.page(
                        rk.XML.text("Hieronder zijn wat gevorderde opties. Het  is gewoonlijk veilig niet aan te nemen dat
                                de varianties van de variabelen gelijk zijn. Een toepasselijke correctie wordt in dat geval toegepast.
                                Maar het kiezen van  \"gelijke varianties aannemen\" kan de sterkte van de test gunstig beïnvloeden."),
                        rk.XML.copy(check.eqvar),
                        rk.XML.text("Soms is het verkrijgen nuttig van een schatting van het betrouwbaarheidsinterval van 
                                het verschil van de gemiddelde waarden. Hieronder kunt u opgeven of er een moet worden getoond, en
                                welk vertrouwensniveau moet worden toegepast (95% komt overeen met een 5%
                                significantie-niveau)."),
                        rk.XML.copy(conf.frame)))
                </programlisting>
		<para
>Voor zover de &GUI;. Het gehele document wordt tenslotte gecombineerd met <function
>rk.plugin.skeleton()</function
>.</para>
		</sect2>

		<sect2 id="rkdev_jscode"
><title
>&javascript;-code</title>
			<para
>Tot dusver heeft het gebruiken van het  <application
>rkwarddev</application
>-pakket naar het lijkt niet zo veel nut gehad. Dit gaat nu echt veranderen.</para>
			<para
>Ten eerste, precies zoals we niet hoefden te zorgen voor ID's voor elementen bij het maken van de indeling van de &GUI;, hoeven we nu niet te zorgen voor de namen van variabelen in &javascript; in de volgende stap. Indien u wat meer controle wilt, kunt u gewone &javascript;-code schrijven, en dit plakken in het gegenereerde bestand. Maar het is waarschijnlijk efficiënter het op de <application
>rkwarddev</application
>- manier te doen.</para>
			<para
>U hoeft werkelijk geen enkele variabele zelf te definiëren, omdat de <function
>rk.plugin.skeleton()</function
> uw &XML;-code kan scannen en automatisch alle variabelen kan definiëren die u mogelijk nodig heeft -- bijvoorbeeld, u hoeft niet te zorgen voor een keuzevakje als u die later toch niet nodig heeft. Dus kunnen we direct beginnen met het schrijven van de actuele &R;-code voor het genereren van JS:</para>
			<tip
><para
>De functie <function
>rk.JS.scan()</function
> kan ook bestaande &XML;-bestanden scannen, op zoek naar variabelen.</para
></tip>
			<para
>Het pakket heeft ook een aantal functies voor JS code constructs die gewoonlijk worden gebruikt in &rkward;-plugins, zoals de <function
>echo()</function
>-functie of <function
>if() {...} else {...}</function
> condities. Er zijn enkele verschillen tussen JS en &R;, &eg;, bij <function
>paste()</function
> in &R; wordt de komma gebruikt voor het aan elkaar plakken van karakter-strings, waar bij <function
>echo()</function
> in JS daarvoor de <quote
>+</quote
> wordt gebruikt, en regels moeten worden afgesloten met een puntkomma. Door &R;-functies te gebruiken, kunt u deze verschillen bijna vergeten en &R;-code blijven schrijven.</para>
			<para
>Deze functies hebben verschillende classes van invoerobjecten nodig: of gewone tekst, &R;-objecten zoals hier boven met &XML;-code, of op hun beurt resultaten van enige andere JS-functies in het pakket. Uiteindelijk roept u altijd <function
>rk.paste.JS()</function
> aan, die zich net zo gedraagt als <function
>paste()</function
>, maar afhankelijk van de invoerobjecten vervangt het die door hun XML-ID, variabelenaam in &javascript; of zelfs complete &javascript;-code.</para>
			<para
>In het t-test voorbeeld hebben we twee JS-objecten nodig: een voor de berekening van de resultaten, en een om die af te drukken met de <function
>printout()</function
> functie:</para>
		<programlisting
>JS.calc &lt;- rk.paste.JS(
        echo("res &lt;- t.test (x=", var.x, ", y=", var.y, ", hypothesis=\"", test.hypothesis, "\""),
        js(
                if(check.paired){
                        echo(", paired=TRUE")
                },
                if(!check.paired &amp;&amp; check.eqvar){
                        echo(", var.equal=TRUE")
                },
                if(conf.level != "0.95"){
                        echo(", conf.level=", conf.level)
                },
                linebreaks=TRUE
        ),
        echo(")\n"),
        level=2
)

JS.print &lt;- rk.paste.JS(echo("rk.print (res)\n"), level=2)
                </programlisting>
		<para
>Zoals u ziet geeft <application
>rkwarddev</application
> ook een &R;- implementatie van de <function
>echo()</function
> functie. Die geeft precies één karakterstring terug met een geldige JS-versie van zichzelf. U merkt misschien ook op dat hierin alle &R;-objecten dezelfde zijn als die we eerder hebben aangemaakt. Die worden automatisch vervangen door hun variabelenamen, dus moet dit heel intuïtief zijn. Telkens wanneer u alleen deze vervanging wenst, kan de functie  <function
>id()</function
> worden gebruikt, die ook precies één karakterstring teruggeeft voor alle erin ingevoerde objecten (u zou kunnen zeggen dat die zich net zo gedraagt als  <function
>paste()</function
>, met een zeer specifieke object-substitutie.</para>
    <para
>De <function
>js()</function
>-functie is een wrapper (functie waarin een andere functie is "verpakt") waarmee u &R;'s <command
>if(){...} else {...}</command
> condities op dezelfde manier kunt gebruiken zoals u gewend bent. Die wordt direct naar JS-code vertaald. Hierin worden ook enkele operators zoals <command
>&lt;</command
>, <command
>&gt;=</command
> of <command
>||</command
> behouden, zodat u uw  &R;-objecten logisch met elkaar kunt vergelijken zonder de noodzaak ze steeds weer tussen aanhalingstekens te plaatsen. Bekijken we het resulterende <quote
>JS.calc</quote
>-object, dat nu een karakterstring met inhoudt bevat:</para>
		<programlisting
>echo("res &lt;- t.test (x=" + vrslCompare + ", y=" + vrslAgainst + ", hypothesis=\"" + radUsngtsth + "\"");
        if(chcPardsmpl) {
                echo(", paired=TRUE");
        } else {}
        if(!chcPardsmpl &amp;&amp; chcAssmqlvr) {
                echo(", var.equal=TRUE");
        } else {}
        if(spnCnfdnclv != "0.95") {
                echo(", conf.level=" + spnCnfdnclv);
        } else {}
        echo(")\n");
                </programlisting>
    <note>
      <para
>U kunt ook voor <function
>if()</function
> condities, genest in <function
>js()</function
>, de functie <function
>ite()</function
> gebruiken, die zich net zo gedraagt als &R;'s <function
>ifelse()</function
>. Echter, conditie-statements gemaakt met <function
>ite()</function
> zijn gewoonlijk moeilijk leesbaar, en zouden waar mogelijk door <function
>js()</function
> moeten worden vervangen. </para>
    </note>
		</sect2>

		<sect2 id="rkdev_pluginmap"
><title
>Plugin map</title>
		<para
>Deze sectie is heel kort: we hoeven helemaal geen &pluginmap; te schrijven, omdat die automatisch kan worden gegenereerd door <function
>rk.plugin.skeleton()</function
>. De menu-hiërarchie kan worden opgegeven via de <parameter
>pluginmap</parameter
>-optie:</para>
			<programlisting
>[...]
        pluginmap=list(
                name="Twee-variabele t-Test",
                hierarchy=list("analyse", "gemiddelden", "t-Test"))
        [...]
                        </programlisting>
		</sect2>

		<sect2 id="rkdev_rkh"
><title
>Help-pagina</title>
			<para
>Ook deze sectie is heel kort: <function
>rk.plugin.skeleton()</function
> kan geen volledige help-pagina aanmaken met de beschikbare informatie. Maar die kan wel  het &XML;-document scannen naar elementen die mogelijk thuishoren in een help-pagina, en automatisch een sjabloon (template) maken voor de help-pagina van onze plugin. We moeten daarna voor elk daarvan wat regels tekst toevoegen.</para>
			<tip
><para
>De functie <function
>rk.rkh.scan()</function
> kan ook bestaande &XML;- bestanden scannen en daarna een  kaal help-bestand aanmaken.</para
></tip>
		</sect2>

		<sect2 id="rkdev_plugin_generator"
><title
>De plugin-bestanden genereren</title>
			<para
>Nu komt de laatste stap, waarin we alle gegenereerde objecten overdragen aan <function
>rk.plugin.skeleton()</function
>:</para>
			<programlisting
>plugin.dir &lt;- rk.plugin.skeleton("t-Test",
        xml=list(
                dialog=full.dialog,
                wizard=full.wizard),
        js=list(
                results.header="Twee-variabele t-Test",
                calculate=JS.calc,
                printout=JS.print),
        pluginmap=list(
                name="Twee-variabele t-Test",
                hierarchy=list("analyse", "gemiddelden", "t-Test")),
        load=TRUE,
        edit=TRUE,
        show=TRUE)
                        </programlisting>
			<para
>Standaard worden de bestanden aangemaakt in een tijdelijke directory. De laatste drie opties zijn niet nodig, maar wel erg handig: <parameter
>load=</parameter
><replaceable
>TRUE</replaceable
> plaatst automatisch de nieuwe plugin in &rkward;s configuratie (omdat het in een tijdelijke directory is en dus  ophoudt te bestaan als &rkward; wordt afgesloten, wordt het automatisch weer verwijderd door &rkward; bij de volgende start), <parameter
>edit=</parameter
><replaceable
>TRUE</replaceable
> opent alle aangemaakte bestanden voor bewerking in &rkward;'s editor tabs, en <parameter
>show=</parameter
><replaceable
>TRUE</replaceable
> probeert direct de plugin te starten, zodat u die kunt bekijken zonder een enkele klik. U zou kunnen overwegen  <parameter
>overwrite=</parameter
><replaceable
>TRUE</replaceable
> toe te voegen, indien u uw script herhaaldelijk wilt starten (&eg; na wijzigingen in de code), omdat standaard bestanden niet worden overschreven.</para>
			<para
>Het resulterende object <quote
>plugin.dir</quote
> bevat het pad naar de directory waarin de plugin is aangemaakt. Dit kan nuttig zijn, samen met de functie <function
>rk.build.package()</function
>, voor het aanmaken van een actueel &R;-pakket om uw plugin met anderen te delen -- &eg; door die te sturen naar het  &rkward; development team, zodat die kan worden toegevoegd aan uw plugin repository.</para>
		</sect2>
		<sect2 id="rkdev_ttest_script"
><title
>Het volledige script</title>
		<para
>Om al het bovenstaande samen te vatten, volgt hier het volledige script voor een werkend voorbeeld van de t-test. Behalve de reeds uitgelegde code, leest het ook het pakket in, indien nodig, en gebruikt het de  <function
>local()</function
> omgeving, zodat niet alle aangemaakte objecten terecht komen in uw huidige  workspace (behalve <quote
>plugin.dir</quote
>). Hierin is door de mij, vertaler, NIETS gewijzigd, zodat u dit ook als het origineel kunt beschouwen van de wel vertaalde delen:</para>
		<programlisting
>require(rkwarddev)

local({
        variables &lt;- rk.XML.varselector(id.name="vars")
        var.x &lt;- rk.XML.varslot("compare", source=variables, types="number", required=TRUE)
        var.y &lt;- rk.XML.varslot("against", source=variables, types="number", required=TRUE)
        test.hypothesis &lt;- rk.XML.radio("using test hypothesis",
                options=list(
                        "Two-sided"=c(val="two.sided"),
                        "First is greater"=c(val="greater"),
                        "Second is greater"=c(val="less")
                )
        )
        check.paired &lt;- rk.XML.cbox("Paired sample", value="1", un.value="0")
        basic.settings &lt;- rk.XML.row(variables, rk.XML.col(var.x, var.y, test.hypothesis, check.paired))

        check.eqvar &lt;- rk.XML.cbox("assume equal variances", value="1", un.value="0")
        conf.level &lt;- rk.XML.spinbox("confidence level", min=0, max=1, initial=0.95)
        check.conf &lt;- rk.XML.cbox("print confidence interval", val="1", chk=TRUE)
        conf.frame &lt;- rk.XML.frame(conf.level, check.conf, rk.XML.stretch(), label="Confidence Interval")

        full.dialog &lt;- rk.XML.dialog(
                label="Two Variable t-Test",
                rk.XML.tabbook(tabs=list("Basic settings"=basic.settings, "Options"=list(check.eqvar, conf.frame)))
        )

        full.wizard &lt;- rk.XML.wizard(
                        label="Two Variable t-Test",
                        rk.XML.page(
                                rk.XML.text("As a first step, select the two variables you want to compare against
                                        each other. And specify, which one you theorize to be greater. Select two-sided,
                                        if your theory does not tell you, which variable is greater."),
                                rk.XML.copy(basic.settings)),
                        rk.XML.page(
                                rk.XML.text("Below are some advanced options. It's generally safe not to assume the
                                        variables have equal variances. An appropriate correction will be applied then.
                                        Choosing \"assume equal variances\" may increase test-strength, however."),
                                rk.XML.copy(check.eqvar),
                                rk.XML.text("Sometimes it's helpful to get an estimate of the confidence interval of
                                        the difference in means. Below you can specify whether one should be shown, and
                                        which confidence-level should be applied (95% corresponds to a 5% level of
                                        significance)."),
                                rk.XML.copy(conf.frame)))

        JS.calc &lt;- rk.paste.JS(
                echo("res &lt;- t.test (x=", var.x, ", y=", var.y, ", hypothesis=\"", test.hypothesis, "\""),
                js(
                        if(check.paired){
                        echo(", paired=TRUE")
                        },
                        if(!check.paired &amp;&amp; check.eqvar){
                        echo(", var.equal=TRUE")
                        },
                        if(conf.level != "0.95"){
                        echo(", conf.level=", conf.level)
                        },
                        linebreaks=TRUE
                ),
                echo(")\n"), level=2)

        JS.print &lt;- rk.paste.JS(echo("rk.print (res)\n"), level=2)

        plugin.dir &lt;&lt;- rk.plugin.skeleton("t-Test",
                xml=list(
                        dialog=full.dialog,
                        wizard=full.wizard),
                js=list(
                        results.header="Two Variable t-Test",
                        calculate=JS.calc,
                        printout=JS.print),
                pluginmap=list(
                        name="Two Variable t-Test",
                        hierarchy=list("analysis", "means", "t-Test")),
                load=TRUE,
                edit=TRUE,
                show=TRUE,
                overwrite=TRUE)
})
                </programlisting>
		</sect2>

  </sect1>
  <sect1 id="rkwarddev_rkh"
><title
>Toevoegen van help-pagina's</title>
    <para
>Indien u een help-pagina voor uw plugin wilt schrijven, is de meest directe manier het toevoegen van de betreffende instructies aan de definities van de bijbehorende &XML;-elementen: </para>
    <programlisting
>variables &lt;- rk.XML.varselector(
  id.name="vars",
  help="Selecteer het te analyseren gegevensobject.",
  component="Data"
)
    </programlisting>
    <para
>De tekst in de <parameter
>help</parameter
>-parameter kan dan worden opgehaald door <function
>rk.rkh.scan()</function
> en worden geschreven naar de help-pagina van deze plugin-component. Maar om dit technisch te laten werken moet <function
>rk.rkh.scan()</function
> weten welke &R;-objecten tot één plugin-component behoren. Daarom moet u ook de <parameter
>component</parameter
>-parameter opgeven, en er voor zorgen dat die hetzelfde is voor alle bij elkaar behorende objecten. </para>
    <para
>Omdat u gewoonlijk vele objecten in een dialoog zult willen combineren, en misschien ook objecten zult willen hergebruiken, zoals de <command
>&lt;varslot&gt;</command
> in meerdere componenten van uw plugins, is het mogelijk globaal een component te definiëren met de <function
>rk.set.comp()</function
>. Indien ingesteld, wordt aangenomen dat alle volgende objecten in uw script tot die component behoren, totdat <function
>rk.set.comp()</function
> opnieuw wordt aangeroepen met een andere componentnaam. Daarna kunt u de <parameter
>component</parameter
> parameter weglaten: </para>
    <programlisting
>rk.set.comp("Data")
variables &lt;- rk.XML.varselector(
  id.name="vars",
  help="Selecteer het te analyseren gegevensobject."
)
    </programlisting>
    <para
>U kunt globale secties zoals <command
>&lt;summary&gt;</command
> (opsomming) of <command
>&lt;usage&gt;</command
> (gebruik) aan de help-pagina toevoegen met functies zoals <function
>rk.rkh.summary()</function
> of <function
>rk.rkh.usage()</function
>. De resultaten daarvan worden dan gebruikt voor het instellen van de list elements zoals <parameter
>summary</parameter
> of <parameter
>usage</parameter
> in de <parameter
>rkh</parameter
>-parameter van <function
>rk.plugin.component()</function
>/<function
>rk.plugin.skeleton()</function
>. </para>
	</sect1>
  <sect1 id="rkwarddev_i18n"
><title
>Plugins vertalen</title>
    <para
>Met het <application
>rkwarddev</application
>-pakket kunnen externe  plugins worden gemaakt met volledige ondersteuning voor i18n. Bijvoorbeeld hebben alle relevante functies die XML-objecten genereren een optionele parameter voor het opgeven van <replaceable
>i18n_context</replaceable
> of <replaceable
>noi18n_label</replaceable
>: </para>
    <programlisting
>varComment &lt;- rk.XML.varselector(id.name="vars", i18n=list(comment="Hoofd variabele-selector"))
varContext &lt;- rk.XML.varselector(id.name="vars", i18n=list(context="Hoofd variabele-selector"))
cboxNoi18n &lt;- rk.XML.cbox(label="Macht", id.name="macht", i18n=FALSE)
    </programlisting>
    <para
>Bovenstaande voorbeelden hebben uitvoer als volgt:</para>
    <programlisting
># varComment
&lt;!-- i18n: Hoofd variable-selector --&gt;
  &lt;varselector id="vars" /&gt;

# varContext
&lt;varselector id="vars" i18n_context="Hoofd variable-selector" /&gt;

# cboxNoi18n
&lt;checkbox id="macht" noi18n_label="Macht" value="true" /&gt;
    </programlisting>
    <para
>Er is ook ondersteuning voor vertaalbare JS-code. In feite probeert het pakket standaard  <function
>i18n()</function
>-aanroepen toe te voegen op plaatsen waar dit gewoonlijk nuttig is. De functie  <function
>rk.JS.header()</function
> is hiervan een goed voorbeeld: </para>
    <programlisting
>jsHeader &lt;- rk.JS.header("Test-resultaten")
    </programlisting>
    <para
>Dit produceert de volgende JS-code:</para>
    <programlisting
>new Header(i18n("Test-resultaten")).print();
    </programlisting>
    <para
>Maar u kunt ook zelf strings in uw JS-code markeren als vertaalbaar, met de functie  <function
>i18n()</function
>, precies zoals wanneer u het JS-script direct zou schrijven.</para>
  </sect1>
</chapter>

<appendix id="reference">
<title
>Naslag</title>

<sect1 id="propertytypes"
><title
>Typen van Eigenschappen/mModifiers</title>
<para
>Op enkele plaatsen in de inleiding hebben we gesproken over <quote
>eigenschappen</quote
> van &GUI;-elementen en andere. In feite zijn er meerdere verschillende typen van eigenschappen. Gewoonlijk hoeft u zich hier niet om te bekommeren, omdat we met wat gezond verstand elke eigenschap met elke andere kunnen verbinden. Maar intern zijn er verschillende typen van eigenschappen. Dit is van belang wanneer er sommige speciale waarden worden opgehaald in het JS-sjabloon (JS template). In getString ("id")/getBoolean ("id")/getList ("id")-statements kunt u ook  enkele zogenoemde <quote
>modifiers</quote
> (veranderaars) opgeven zoals <function
>getString ("id.modifier")</function
>. Deze modifier heeft invloed op hoe de waarde wordt  afgedrukt. Lees verder voor de lijst van eigenschappen en de modifiers die elk ervan beschikbaar maakt: </para>
<variablelist>
<varlistentry>
<term
>String-eigenschappen</term>
<listitem
><para
>Het eenvoudigste type eigenschap, gebruikt voor het bevatten van een stuk tekst. Modifiers: <variablelist>
	<varlistentry>
	<term
>Geen modifier ("")</term>
	<listitem
><para
>De string zoals gedefinieerd / ingesteld.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>met aanhalingstekens</term>
	<listitem
><para
>De string met aanhalingstekens (geschikt voor doorgeven aan &R; als karakter).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Booleaanse eigenschappen</term>
<listitem
><para
>Eigenschappen die aan of uit kunnen zijn, waar of onwaar, true of false. Bijvoorbeeld de eigenschappen die worden aangemaakt door &lt;convert&gt;-tags (conversie, omzetten), en ook de eigenschap bij een &lt;keuzevakje&gt; (zie onder). De volgende waarden worden teruggegeven, volgens de gegeven modifier: <variablelist>
	<varlistentry>
	<term
>Geen modifier ("")</term>
	<listitem
><para
>Standaard geeft de eigenschap 1 terug als die true is (waar), en anders 0. De aanbevolen manier voor het ophalen van booleaanse waarden is met <function
>getBoolean()</function
>. Merk op dat bij <function
>getString()</function
> de string "0" wordt teruggegeven als de eigenschap false is (onwaar). De waarde van deze string is in JS true, en niet false.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"labeled" (met naam)</term>
	<listitem
><para
>Geeft de string "true" terug indien true, "false" indien false, of welke eigen opgegeven strings ook (typisch in een &lt;keuzevakje&gt;).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"waar"</term>
	<listitem
><para
>Geef de string terug als true, ook al is de eigenschap false</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"onwaar"</term>
	<listitem
><para
>Geef de string terug als false, ook al is de eigenschap true</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"niet"</term>
	<listitem
><para
>Dit geeft een andere booleaanse eigenschap terug, die het omgekeerde is van de huidige (&ie; false indien true, true indien false)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"numeriek"</term>
	<listitem
><para
>Verouderd, dient voor achterwaartse compatibiliteit (backwards compatibility) Zelfde als de modifier "". Geeft "1" terug als de eigenschap true is, of "0" als die false is.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Integer eigenschappen (integers zijn gehele getallen)</term>
<listitem
><para
>Een eigenschap die een geheel getal moet bevatten (maar natuurlijk toch een numerieke karakterstring teruggeeft aan de JS-sjabloon (JS template)). Er zijn hier geen modifiers voor. Wordt in &lt;spinveld&gt;en gebruikt (zie onder)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>Eigenschappen voor real numbers (kommagetallen)</term>
<listitem
><para
>Een eigenschap die een kommagetal moet bevatten (maar natuurlijk toch een numerieke karakterstring teruggeeft aan de JS-sjabloon (JS template)). Wordt in &lt;spinveld&gt;en gebruikt (zie onder) <variablelist>
	<varlistentry>
	<term
>Geen modifier ("")</term>
	<listitem
><para
>Voor <function
>getValue() / getString()</function
>, geeft dit hetzelfde terug als "formatted". In volgende versies zal het mogelijk zijn in plaats hiervan een numerieke weergave te verkrijgen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"formatted"</term>
	<listitem
><para
>Geeft het getal geformatteerd terug (als een string).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>RObject eigenschappen</term>
<listitem
><para
>Een eigenschap, bedoeld als een selectie van een of meer &R;-objecten. Het meest gebruikt in varselectors en varslots. De volgende waarden worden teruggegeven volgens de opgegeven modifier: <variablelist>
	<varlistentry>
	<term
>Geen modifier ("")</term>
	<listitem
><para
>Standaard geeft de eigenschap de volledige naam terug van het geselecteerde object. Indien meerdere objecten zijn geselecteerd, worden de objectnamen gescheiden door einde regels ("\").</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"shortname" (korte naam)</term>
	<listitem
><para
>Net als hierboven, maar nu worden alleen korte namen van de objecten teruggegeven. Bijvoorbeeld, een object in een lijst krijgt alleen de naam die het in de lijst heeft, zonder de naam van de lijst.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"label" (naam)</term>
	<listitem
><para
>Zoals hierboven, maar nu worden de &rkward;-label(s) (namen) van object(en) teruggegeven. (als er geen label beschikbaar is, is die gelijk aan de shortname).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Eigenschappen van string lists</term>
<listitem
><para
>Deze eigenschap bevat een list van strings  (lijst met karakterrijen). <variablelist>
	<varlistentry>
	<term
>Geen modifier ("")</term>
	<listitem
><para
><function
>getValue()/getString()</function
> geeft alle strings terug gescheiden door "\n". Alle "\n" karakters in elke item worden ge-escaped  met "\n". Echter, aanbevolen wordt de waarde op te halen met  <function
>getList()</function
>, die een array van strings teruggeeft.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"joined"</term>
	<listitem
><para
>Geeft een lijst terug als een enkele string, waarin de items verbonden (joined) zijn door "\n". In tegenstelling tot geen modifier (""), worden de individuele strings _not_ escaped (niet_escaped).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Code-eigenschappen (code is programmacode)</term>
<listitem
><para
>Een eigenschap van plugins die code hebben gegenereerd. Dit is van belang voor het inbedden (embedding) van plugins, om de code, gegenereerd door de ingebedde plugin, in te bedden in de code gegenereerd door de inbeddende (bovenliggende niveau) plugin. De volgende waarden worden teruggegeven volgens de opgegeven modifier: <variablelist>
	<varlistentry>
	<term
>Geen modifier ("")</term>
	<listitem
><para
>Geeft de volledige code terug, &ie; de secties "preprocess", "calculate" (berekenen), "printout" (afdrukken), en  samengevoegd tot een string (maar niet "preview" (voorbeeld)).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"preprocess" (onvertaalbaar, want vaste programmeerterm, maar zoiets als voorbewerking)</term>
	<listitem
><para
>Geeft alleen de preprocess-sectie terug van de code.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"calculate"</term>
	<listitem
><para
>Geeft alleen de berekenen-sectie terug van de code</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"printout"</term>
	<listitem
><para
>Geeft alleen de afdruk-sectie terug van de code</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"preview"  (voorbeeld, voorvertoning)</term>
	<listitem
><para
>Geeft alleen de voorbeeld-sectie terug van de code</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="globalxmlelements">
	<title
>Elementen voor algemeen gebruik (general purpose) in elk &XML;-bestand (<literal role="extension"
>.xml</literal
>, <literal role="extension"
>.rkh</literal
>, &pluginmap;)</title>
	<variablelist>
	<varlistentry>
	<term
>&lt;snippets&gt;  (brokstukjes, snippertjes)</term>
	<listitem
><para
>Toegestaan als een directe child van de &lt;document&gt;-node en daar alleen. Moet bovenaan in het bestand worden geplaatst. Zie <link linkend="snippets"
>sectie over snippets</link
>. Er mag slechts één &lt;snippets&gt;-element aanwezig zijn. Optioneel, geen attributen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;snippet&gt;</term>
	<listitem
><para
>Definieert een enkele snippet. Alleen toegestaan als een directe child van het &lt;snippets/&gt;-element. Attributen: <variablelist
> <varlistentry>
		<term
>&lt;id&gt;</term>
		<listitem
><para
>Een identificerende string voor de snippet. Vereist.</para
></listitem>
		</varlistentry>
		</variablelist
></para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;insert&gt;  (invoegen)</term>
	<listitem
><para
>Voegt de inhoud in van een &lt;snippet&gt;. Overal toegestaan. Attributen: <variablelist
> <varlistentry>
		<term
>&lt;snippet&gt;</term>
		<listitem
><para
>De in te voegen identificerende string van de snippet. Vereist.</para
></listitem>
		</varlistentry>
		</variablelist
></para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;include&gt;  (opnemen, bijsluiten, inclusief maken)</term>
	<listitem
><para
>Voegt de inhoud toe van een ander &XML;-bestand  (alles in het &lt;document&gt;-element van dat bestand). Overal toegestaan. Attributen: <variablelist
> <varlistentry>
		<term
>&lt;file&gt;  (bestand)</term>
		<listitem
><para
>De bestandsnaam, relatief tot de directory waarin het huidige bestand zich bevindt. Vereist.</para
></listitem>
		</varlistentry>
		</variablelist
></para
></listitem>
	</varlistentry>
	</variablelist>
</sect1>

<sect1 id="xmlelements"
><title
>Te gebruiken elementen in de &XML;-beschrijving van de plugin</title>
<para
>Eigenschappen van de elementen staan worden genoemd in een <link linkend="elementproperties"
>aparte sectie</link
>.</para>

<sect2 id="generalelements"
><title
>Algemene elementen</title>
<variablelist>
<varlistentry>
<term
>&lt;document&gt;</term>
<listitem
><para
>Moet aanwezig zijn in elk beschrijvend .xml-bestand als de root-node. Geen speciale functie. Geen attributen</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;about&gt;  (over)</term>
<listitem
><para
>Informatie over deze plugin (auteur, licentie, &etc; ) Dit element is toegestaan in zowel een afzonderlijk <literal role="extension"
>.xml</literal
>-bestand van een plugin, als in &pluginmap;-bestanden. Zie de <link linkend="pluginmapelements"
>naslag &pluginmap;-bestanden</link
> voor details, <link linkend="chapter_about_information"
>het  hoofdstuk over 'about'-informatie</link
> voor een inleiding.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;code&gt;  (programmacode)</term>
<listitem
><para
>Definieert waar een JS-sjabloon (template) voor de plugin kan worden gevonden. Gebruik dit slechts een keer per bestand, als een directe child van de document-tag. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>bestand</parameter
></term>
	<listitem
><para
>Bestandsnaam van het JS-sjabloon, relatief tot de directory waarin de plugin-xml is</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;help&gt;</term>
<listitem
><para
>Definieert waar het help-bestand van de plugin kan worden gevonden. Gebruik dit slechts een keer per bestand, als een directe child van de document-tag. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>bestand</parameter
></term>
	<listitem
><para
>Bestandsnaam van het help-bestand, relatief tot de directory waarin de plugin-xml is</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;copy&gt;  (kopieer)</term>
<listitem
><para
>Kan worden gebruikt als een child (direct of indirect) van de elementen in de hoofdindeling, &ie; &lt;dialog&gt; en &lt;wizard&gt;. Dit wordt gebruikt om een geheel blok van 1:1-attributen van een &XML;-element te kopiëren. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>De te zoeken ID. De  &lt;copy&gt; tag zoekt naar een eerder &XML;-element dat dezelfde ID heeft gekregen, en kopieert dit met alle daarvan afgeleide elementen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>copy_element_tag_name</parameter
></term>
	<listitem
><para
>In enkele gevallen wilt u een bijna letterlijke kopie hebben, maar de tag-naam van het gekopieerde element wijzigen. Het belangrijkste voorbeeld hiervan is wanneer u een hele &lt;tab&gt; wilt kopiëren uit een dialoog-interface naar de &lt;pagina&gt; van een assistent- interface. In dat geval stelt u copy_element_tag_name="page" in om deze conversie automatisch te doen.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="interfaceelements"
><title
>Interface-definities</title>
<variablelist>
<varlistentry>
<term
>&lt;dialog&gt;</term>
<listitem
><para
>Definieert een dialoog-type interface. Plaats de &GUI;-definitie in deze tag. Gebruik dit slechts een keer per bestand, als een directe child van de document-tag. Ten minste een van de "dialog" (dialoog) of "wizard" (assistent) -tags is vereist voor een plugin. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Koptekst van de dialoog</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aanbevolen</parameter
></term>
	<listitem
><para
>Moet de dialoog gebruikt worden als de "aanbevolen" interface (&ie; de interface die standaard wordt getoond, tenzij de gebruiker in &rkward; een specifieke standaard interface heeft ingesteld)? Dit attribuut heeft op dit moment geen effect, omdat het impliciet "true" is, tenzij de assistent (wizard) aanbevolen is.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;wizard&gt;  (assistent)</term>
<listitem
><para
>Definieert een assistent-achtige interface. Plaats de &GUI;-definitie in deze tag. Gebruik dit slechts een keer per bestand, als een directe child van de document-tag. Ten minste een van de "dialog" of "wizard" -tags is vereist voor een plugin. Accepteert alleen &lt;page&gt; of &lt;embed&gt;-tags als directe children. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Koptekst voor de assistent</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aanbevolen</parameter
></term>
	<listitem
><para
>Moet de dialoog gebruikt worden als de "aanbevolen" interface (&ie; de interface die standaard wordt getoond, tenzij de gebruiker in &rkward; een specifieke standaard interface heeft ingesteld)? Optioneel, standaard is "false".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="layoutelements"
><title
>Elementen voor de indeling (layout)</title>
<para
>Alle elementen in deze sectie accepteren een attribuut id="naamstring".Dit attribuut is optioneel voor alle elementen. Het kan bijvoorbeeld worden gebruikt om het hele indelingselement te tonen/verbergen, samen met alle elementen die erin zijn (zie <link linkend="logic"
>hoofdstuk &GUI;-logica</link
>). De id-naamstring mag geen "." (punt) of ";" (puntkomma) bevatten, en moet algemeen gesproken worden beperkt tot alfanumerieke karakters en de lage streep  ("_"). Alleen de extra attributen worden genoemd:</para>
<variablelist>
<varlistentry>
<term
>&lt;page&gt;  (pagina)</term>
<listitem
><para
>Definieert een nieuwe pagina in een assistent. Alleen toegestaan als directe child van een &lt;wizard&gt;-element.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;row&gt; (rij)</term>
<listitem
><para
>Alle directe children van een "row"-tag worden van links naar rechts geplaatst.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;column&gt;</term>
<listitem
><para
>Alle directe children van een "column"-tag worden van boven naar beneden geplaatst.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;stretch&gt; (uitrekken)</term>
<listitem
><para
>Standaard nemen elementen van een &GUI; alle beschikbare ruimte in beslag. Bijvoorbeeld, als u twee kolommen naast elkaar heeft, de linkse volgepakt met elementen, en de rechtse bevat alleen maar een eenzame <command
>&lt;radio&gt;</command
>, zal de <command
>&lt;radio&gt;</command
> verticaal uit worden gerekt, ook al heeft die niet werkelijk al die ruimte nodig, en ziet het er niet fraai uit. In dit geval heeft u eigenlijk lege ruimte nodig onder de <command
>&lt;radio&gt;</command
>. Dan gebruikt u het &lt;stretch&gt;-element. Dat zal alleen maar wat ruimte in beslag nemen. Gebruik dit element niet al teveel, Meestal is het goed dat &GUI;-elementen alle beschikbare ruimte krijgen, slechts een enkele keer niet. Voor het &lt;stretch&gt;-element zijn geen argumenten nodig, zelfs geen ïd" (naam). U kunt ook geen children plaatsen in het &lt;stretch&gt; element (met andere woorden: u gebruikt het alleen maar als "&lt;stretch&gt;".)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;frame&gt;  (onvertaalbaar, zoiets als raamwerk)</term>
<listitem
><para
>Tekent een lijst/vakje rondom zijn directe children. Kan worden gebruikt voor het visueel in groepen plaatsen van bij elkaar behorende opties. De indeling binnen een frame is van boven naar beneden, tenzij u er een &lt;row&gt; in plaatst. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Koptekst voor de frame (optioneel)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>activeerbaar</parameter
></term>
	<listitem
><para
>Frames kunnen activeerbaar (checkable) worden gemaakt. In dat geval worden alle elementen erin uitgeschakeld, wanneer de frame niet wordt geactiveerd, en aangezet wanneer die wel wordt geactiveerd. (optioneel, standaard is "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>geactiveerd</parameter
></term>
	<listitem
><para
>Alleen voor activeerbare  frames. Moet een frame standaard worden geactiveerd? Standaard is "true". Niet geïnterpreteerd voor niet-activeerbare frames.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;tabbook&gt;  (aantal tabbladen)</term>
<listitem
><para
>Organiseert elementen in een tabbook. Accepteert alleen &lt;tab&gt;-tags als directe children.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;tab&gt;  (tabblad)</term>
<listitem
><para
>Definieert een pagina in een tabbook. Plaats de &GUI;-definitie voor de tab in deze tag. Kan alleen worden gebruikt als een directe child van een &lt;tabbook&gt;-tag. Een &lt;tabbook&gt; moet minstens twee gedefinieerde tabs hebben. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Koptekst voor de tab-pagina (vereist)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;text&gt;  (tekst)</term>
<listitem
><para
>Toont de tekst in deze tag in het &GUI;-element. Wat eenvoudige &HTML;-markeringen worden ondersteund (zoals <markup
>&lt;b&gt;</markup
>, <markup
>&lt;i&gt;</markup
>, <markup
>&lt;p&gt;</markup
>, en <markup
>&lt;br/&gt;</markup
>). Maar beperk u hierbij tot een minimum. Het invoegen van een lege regel resulteert in een einde-regel (line break). Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>type</parameter
></term>
	<listitem
><para
>Type van de tekst. Een van "normal", "warning" (waarschuwing) of "error" (fout). Dit heeft invloed op hoe de tekst eruit ziet (optioneel, normal is standaard)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="activeelements"
><title
>Actieve elementen</title>
<para
>Alle elementen  in deze sectie accepteren een attribuut  id="naamstring". Dit attribuut is vereist voor alle elementen. Alleen de extra attributen worden genoemd. De id-string mag geen "." (punten) bevatten.</para>
<variablelist>

<varlistentry>
<term
>&lt;varselector&gt;  (variabelekiezer)</term>
<listitem
><para
>Geeft een lijst van beschikbare objecten waaruit de gebruiker een of meer van kan kiezen. Heeft alleen nut als er een of meer &lt;varslot&gt;s zijn. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de varselector (optioneel, standaard is "Select variable(s)")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;varslot&gt;</term>
<listitem
><para
>Wordt samen gebruikt met een "varselector" om het mogelijk te maken een of meer variabelen te selecteren. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de varslot (aangeraden, standaard is "Variable:")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>source</parameter
></term>
	<listitem
><para
>De bron waaruit de varslot  de selectie moet ophalen (vereist, behalve als u zelf de verbinding maakt of met behulp van source_property (bron_eigenschap))</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>source_property  (bron_eigenschap)</parameter
></term>
	<listitem
><para
>Een willekeurige bron_eigenschap waaruit waarden moeten worden gekopieerd wanneer er op de selecteer-knop wordt geklikt. Indien opgegeven wordt het "source"-attribuut genegeerd.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>vereist</parameter
></term>
	<listitem
><para
>Of - voor het indienen van de code - het vereist is dat deze varslot een geldige waarde bevat. Zie  See <link linkend="elementproperties"
>vereist-eigenschap</link
> (optioneel, standaard is false)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>multi</parameter
></term>
	<listitem
><para
>Of de varslot slechts een (standaard, "false") of meerdere objecten bevat</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_duplicates (duplicaten_ toestaan)</parameter
></term>
	<listitem
><para
>Of de varslot alleen unieke objecten (standaard, "false") mag bevatten, of dat hetzelfde object er meerdere keren er aan kan worden toegevoegd.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_vars</parameter
></term>
	<listitem
><para
>Alleen zinvol als multi="true". Minimum aantal variabelen dat gekozen moet worden voor een geldige selectie (optioneel, standaard is "1")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_vars_if_any  (minimum_aantal_variabelen_indien_aanwezig)</parameter
></term>
	<listitem
><para
>Alleen zinvol als multi="true": Sommige varslots kunnen als geldig worden beschouwd, als bijvoorbeeld de varslot of leeg is, of tenminste twee waarden bevat. Hiermee wordt opgegeven hoeveel variabelen er moeten worden geselecteerd, als er sowieso variabelen worden geselecteerd  (2 in het voorbeeld). (optioneel, standaard is "1")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_vars</parameter
></term>
	<listitem
><para
>Alleen zinvol als multi="true". Maximum aantal variabelen dat gekozen kan worden (optioneel, standaard is "0", wat betekent geen maximum)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>classes  (klassen, maar onvertaalbaar, want term uit de programmeertaal)</parameter
></term>
	<listitem
><para
>Indien u een of meer &R;-class-namen opgeeft (gescheiden door spaties (" "), accepteert de varslot alleen variabelen die tot die classes behoren (optioneel, <emphasis
>gebruik dit heel voorzichtig)</emphasis
>. De gebruiker moet niet beperkt worden in het maken van geldige keuzes, en &R; heeft  <emphasis
>heel veel</emphasis
> verschillende classes!)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>typen</parameter
></term>
	<listitem
><para
>Indien u een of meer variabelen-typen opgeeft (gescheiden door spaties (" "), accepteert de varslot alleen objecten met deze types. Geldige typen zijn "unknown" (onbekend), "number" (getal), "string", "factor", "invalid" (ongeldig). Optioneel, <emphasis
>gebruik dit heel voorzichtig)</emphasis
>. De gebruiker moet niet beperkt worden in het maken van geldige keuzes, en &rkward; kent niet altijd het type van een variabele)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>num_dimensions  (aantal_dimensies)</parameter
></term>
	<listitem
><para
>Het aantal dimensies dat een object moet hebben. "0" (standaard) betekent dat elk aantal dimensies wordt geaccepteerd. (optioneel, standaard is "0")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_length</parameter
></term>
	<listitem
><para
>De kleinste lengte die een object mag hebben. (optioneel, standaard is "0")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_length</parameter
></term>
	<listitem
><para
>De grootste lengte die een object kan hebben. (optioneel, standaard is die het grootste gehele getal dat in het systeemgeheugen kan worden opgeslagen)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueselector&gt;  (waarde selector)</term>
<listitem
><para
>Geeft een lijst van beschikbare strings (geen &R;-objecten) die kunnen worden geselecteerd in een of meer bijgaande  &lt;valueslot&gt;s.String-opties kunnen worden gedefinieerd met &lt;option&gt;-tags als directe children (zie onder), of door instellen van dynamische <link linkend="elementproperties"
>eigenschappen</link
>. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de varselector (optioneel, standaard is geen naam (label))</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueslot&gt;</term>
<listitem
><para
>Gebruikt samen met een &lt;valueselector&gt; zodat de gebruiker een of meer string items kan selecteren. Dit element is voor een groot deel identiek aan  &lt;varslot&gt;, en deelt dezelfde attributen, behalve die die naar eigenschappen verwijzen van de toegestane items (&ie; classes, types, num_dimensions, min_length, max_length).</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;radio&gt;  (radioknoppen, selectierondjes)</term>
<listitem
><para
>Definieert een groep van knoppen voor radio alleen (slechts een kan op enig moment geselecteerd zijn). Vereist minstens twee &lt;option&gt;-tags als directe children. Andere tags zijn niet toegestaan als children. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de radioknoppen (aanbevolen, standaard is "selecteer een:")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;dropdown&gt;  (neerklapmenu)</term>
<listitem
><para
>Definieert een groep opties waarvan er een en slechts een tegelijk kan worden geselecteerd, in een keuzelijst (dropdown list). Dit is functioneel gelijk aan een  &lt;radio&gt;, maar ziet er anders uit. Vereist minstens twee  &lt;option&gt;-tags als directe children. Geen andere tags zijn toegestaan als children. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de keuzelijst (aanbevolen, standaard is "Selecteer een:")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;select&gt;  (kies, selecteer)</term>
<listitem
><para
>Geeft een lijst van beschikbare strings waaruit de gebruiker een of meer kan kiezen. String-opties kunnen worden gedefinieerd met  &lt;option&gt;-tags als directe children (zie onder) of door dynamische <link linkend="elementproperties"
>eigenschappen</link
> in te stellen. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam voor de &lt;select&gt; (optioneel, standaard is geen naam)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>Enkel</parameter
></term>
	<listitem
><para
>Indien op waar ingesteld, is alleen een enkele waarde selecteerbaar, in plaats van meerdere waarden tegelijk (logische waarde, standaard is onwaar)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;option&gt;  (optie)</term>
<listitem
><para
>Kan alleen worden gebruikt als een directe child van een  &lt;radio&gt;, &lt;dropdown&gt;, &lt;valueselector&gt; of &lt;select&gt;-element. Omdat &lt;option&gt;-elementen altijd deel uitmaken van een van de selectie-elementen, hebben zij gewoonlijk zelf geen "id" (naam), maar zie onder. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam voor de optie (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>waarde</parameter
></term>
	<listitem
><para
>De stringwaarde die het parent-element teruggeeft indien deze optie wordt gekozen/geselecteerd (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>geactiveerd</parameter
></term>
	<listitem
><para
>Of de optie standaard "true" of "false" moet worden gekozen/geselecteerd. In een &lt;radio&gt; of &lt;dropdown&gt;, kan slechts een optie worden ingesteld op<parameter
>checked=</parameter
><replaceable
>"true"</replaceable
>, en indien er geen optie is ingesteld, wordt het eerste element automatisch gekozen/ geselecteerd. In een  &lt;select&gt;, kan elk aantal opties worden ingesteld op gekozen. (optioneel, standaard is "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Opgeven van de "id"-parameter (naam) voor de &lt;option&gt;-elementen is optioneel (en feitelijk wordt het instellen van een "id" afgeraden, tenzij u er werkelijk een nodig heeft). Maar het opgeven van een "id" maakt het wel mogelijk &lt;option&gt;s dynamisch aan/uit te zetten, door te verbinden met de booleaanse eigenschap <replaceable
>id_of_radio.id_of_optionX.enabled</replaceable
>. Op dit moment werkt dit alleen voor opties in &lt;radio&gt; of &lt;dropdown&gt;-elementen; &lt;valueselector&gt; en &lt;select&gt;-opties ondersteunen op dit moment geen ids.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;checkbox&gt;  (keuzevakje)</term>
<listitem
><para
>Definieert een keuzevakje. &ie; een enkele optie die alleen kan worden ingesteld op aan of uit. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam voor het keuzevakje (vereist) </para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>waarde</parameter
></term>
	<listitem
><para
>De waarde die door het keuzevakje wordt teruggegeven indien gekozen (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>value_unchecked</parameter
></term>
	<listitem
><para
>De waarde die door het keuzevakje wordt teruggegeven indien niet gekozen (optioneel, standaard is "", &ie; een lege string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>geactiveerd</parameter
></term>
	<listitem
><para
>Of de optie standaard "true" moet zijn of "false" (optioneel, standaard is "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;frame&gt;  (onvertaalbaar, zoiets als raamwerk)</term>
<listitem
><para
>Het frame-element wordt gewoonlijk zuiver gebruikt als een layout (indelings) element, en wordt genoemd in de sectie over <link linkend="layoutelements"
>indelings elementen</link
>. Echter, het kan ook kiesbaar worden gemaakt, en dus tegelijkertijd optreden als een eenvoudig keuze-element. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;input&gt;  (invoer)</term>
<listitem
><para
>Definieert een vrij veld voor tekstinvoer. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam voor het invoerveld (vereist) </para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aanvankelijk</parameter
></term>
	<listitem
><para
>Aanvangstekst voor het tekstveld (optioneel, standaard is "", &ie; een lege string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>grootte</parameter
></term>
	<listitem
><para
>Te kiezen uit "small" (klein), "medium" (middelgroot), of "large" (groot). "large" definieert een invoerveld met meerdere regels. "small" en "medium" velden met maar een regel (optioneel, standaard is "medium")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>vereist</parameter
></term>
	<listitem
><para
>Of het - voor het indienen van de code - vereist is dat deze invoer niet leeg is. Zie <link linkend="elementproperties"
>vereist-eigenschap</link
> (optioneel, standaard is false)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;matrix&gt;</term>
<listitem
><para
>Een tabel voor het invoeren van matrix-gegevens (of vectoren) in de &GUI;.</para
> <note
><para
>Dit invoer-element is <emphasis
>niet</emphasis
> geoptimaliseerd voor het invoeren/ bewerken van grote hoeveelheden gegevens. Hoewel er geen strikte grens is aan de grootte van een  &lt;matrix&gt;, moet die in het algemeen niet groter zijn dan tien rijen/kolommen. Als u meer gegevens verwacht, kunt u het mogelijk maken die als een &R;-object te selecteren (wat een goed idee kan zijn als alternatieve optie, in bijna <emphasis
>alle</emphasis
> gevallen dat een matrix-element nodig is).</para
></note
> <para
>Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de tabel (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>modus</parameter
></term>
	<listitem
><para
>Een van "integer" (geheel getal), "real" (kommagetal) of "string" (rij karakters tussen aanhalingstekens). Het type van gegevens die in de tabel worden geaccepteerd (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min</parameter
></term>
	<listitem
><para
>Kleinste acceptabele waarde (voor matrices van het type "integer" of "real") (optioneel, standaard is kleinste getal dat kan woorden weergegeven)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max</parameter
></term>
	<listitem
><para
>Grootste acceptabele waarde (voor matrices van het type "integer" of "real") (optioneel, standaard is grootste getal dat kan woorden weergegeven)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>ontbrekende waarden toestaan</parameter
></term>
	<listitem
><para
>Of ontbrekende (lege) waarden in de matrix worden toegestaan. Dit is bedoeld  voor matrices met modus "string" (Optioneel, standaard is false).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_user_resize_columns</parameter
></term>
	<listitem
><para
>Indien ingesteld op true, kan de gebruiker kolommen toevoegen door in de meest rechtse (inactieve) cellen te typen (optioneel, standaard is true).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_user_resize_rows</parameter
></term>
	<listitem
><para
>Indien ingesteld op true, kan de gebruiker rijen toevoegen door in de onderste (inactieve) cellen te typen (optioneel, standaard is true).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>rows</parameter
></term>
	<listitem
><para
>Aantal rijen in de matrix. Heeft geen effect op allow_user_resize_rows="true". <note
><para
>Dit kan ook worden geregeld door instellen van de "rows"-eigenschap. </para
></note
> (optioneel, standaard is 2).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>columns</parameter
></term>
	<listitem
><para
>Aantal kolommen in de matrix. Heeft geen effect op allow_user_resize_columns="true". <note
><para
>Dit kan ook worden geregeld door instellen van de "columns"-eigenschap. </para
></note
> (optioneel, standaard is 2).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_rows</parameter
></term>
	<listitem
><para
>Kleinste aantal rijen in de matrix. De matrix kan niet tot onder deze waarde worden ingekrompen. (optioneel, standaard is 0: zie ook: <parameter
>allow_missings</parameter
>.).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_columns</parameter
></term>
	<listitem
><para
>Kleinste aantal kolommen in de matrix. De matrix kan niet tot onder deze waarde worden ingekrompen. (optioneel, standaard is 0: zie ook: <parameter
>allow_missings</parameter
>.).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>fixed_height  (vaste hoogte)</parameter
></term>
	<listitem
><para
>Zodat het &GUI;-element zijn originele hoogte behoudt. Gebruik dit niet samen met matrices, waarin het aantal rijen op enige manier kan veranderen. Nuttig, speciaal bij het aanmaken van een vector invoer-element (columns = "1") Als deze optie ingesteld is op true, is er geen horizontale schuifbalk, zelfs als de matrix te breed is (omdat dit de hoogte zou beïnvloeden). (optioneel, standaard is false).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>fixed_width  (vaste breedte)</parameter
></term>
	<listitem
><para
>Een beetje misplaatste naam. Neem aan dat het aantal kolommen niet verandert. De laatste (of enige) kolom wordt uitgerekt om alle beschikbare ruimte op te vullen.  Gebruik dit niet samen met matrices, waarin het aantal kolommen op enige manier kan veranderen. Nuttig, vooral bij het aanmaken van een vector invoer-element (rijen is "1"), (optioneel, standaard is false).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>horiz_headers</parameter
></term>
	<listitem
><para
>Te gebruiken strings voor de horizontale koptekst, gescheiden door ";". Geen koptekst wordt getoond, indien ingesteld op "". (optioneel, standaard is kolomnummer).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>vert_headers</parameter
></term>
	<listitem
><para
>Te gebruiken strings voor de verticale koptekst, gescheiden door ";". Geen koptekst wordt getoond, indien ingesteld op "". (optioneel, standaard is kolomnummer).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;optionset&gt;  (verzameling van opties)</term>
<listitem
><para
>Een UI voor het herhalen van een aantal opties voor een willekeurig aantal items  (<link linkend="optionset"
>introductie voor optionsets</link
>). Attributen:</para>
	<variablelist>
	<varlistentry>
	<term
><parameter
>min_rows</parameter
></term>
	<listitem
><para
>Indien opgegeven, wordt de set gemarkeerd als ongeldig, tenzij die minstens dit aantal rijen heeft (optioneel, integer).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_rows_if_any</parameter
></term>
	<listitem
><para
>Net als voor min_rows, maar wordt alleen getest al er minstens een rij is (optioneel, integer)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_rows</parameter
></term>
	<listitem
><para
>Indien opgegeven, wordt de set gemarkeerd als ongeldig, tenzij die hoogstens dit aantal rijen heeft (optioneel, integer).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>keycolumn (sleutelkolom)</parameter
></term>
	<listitem
><para
>Id (naam) van de kolom die als sleutelkolom wordt gebruikt. Een optionset met een (geldige) keycolumn acteert als een "driven" (aangedreven) optionset. Een optionset zonder keycolumn staat het zelf invoegen/verwijderen toe van items. De keycolumn moet als extern worden gemarkeerd. (optioneel, standaard is geen keycolumn).</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Child-elements:  (kind-element: van een parent afgeleid element, child en parent zijn onvertaalbare termen uit de programmeertaal)</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;optioncolumn&gt;  (optiekolom)</term>
	<listitem
><para
>Declareert één option column van de set. Voor elke waarde die u uit de optionset wilt ophalen, moet u een aparte  &lt;optioncolumn&gt; declareren. Attributen: <variablelist>
			<varlistentry
><term
><parameter
>id</parameter
></term>
			<listitem
><para
>De id (naam) van de optioncolumn (vereist, string).</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>extern</parameter
></term>
			<listitem
><para
>Ingesteld op true, indien de optioncolumn van buiten de optionset wordt bestuurd (optioneel, boolean, standaard is false).</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>label</parameter
></term>
			<listitem
><para
>Indien gegeven, wordt de optionset getoond in een kolom met die naam (optioneel, string, standaard is niet getoond).</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>verbinden</parameter
></term>
			<listitem
><para
>De eigenschap waarmee de optionset moet worden verbonden, gegeven als id (naam) in het &lt;content&gt;-gebied. Voor externe &lt;optioncolumn&gt;s wordt de overeenkomende waarde ingesteld op de extern ingestelde waarde. Voor reguliere (niet-externe) &lt;optioncolumn&gt;s wordt de overeenkomende rij van de &lt;optioncolumn&gt;-eigenschap ingesteld, wanneer de eigenschap verandert binnen het content-gebied. (optioneel, string, standaard is niet verbonden).</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>standaard</parameter
></term>
			<listitem
><para
>Alleen voor externe kolommen: de aan te nemen waarde voor deze kolom, indien geen waarde bekend is voor een ingang, Zelden nuttig. (optioneel, standaard is lege string)</para
></listitem
></varlistentry>
		</variablelist>
	</para
></listitem
></varlistentry>
	<varlistentry>
	<term
>&lt;content&gt;  (inhoud)</term>
	<listitem
><para
>Declareer de inhoud / UI van de set. Geen attributen. Alle gebruikelijke actieve, passieve, en layout-elementen zijn toegestaan als childname-elementen. Bovendien, in eerdere versies van &rkward; (tot aan 0.6.3) was het speciale child-element <command
>&lt;optiondisplay&gt;</command
> toegestaan. Dit is verouderd in &rkward; 0.6.4, en moet domweg worden verwijderd uit bestaande plugins. </para
></listitem
></varlistentry>
	<varlistentry>
	<term
>&lt;logic&gt;  (logica)</term>
	<listitem
><para
>Optionele specificatie van de toe te passen UI-logica  <emphasis
>in</emphasis
> het contents-gebied van de optionset. Zie <link linkend="logicelements"
>de naslag over &lt;logic&gt;</link
> </para
></listitem
></varlistentry>
	</variablelist>
</listitem>
</varlistentry>

<varlistentry>
<term
>&lt;browser&gt;   (bladerprogramma)</term>
<listitem
><para
>Een element dat is ontworpen voor het selecteren van een enkele bestandsnaam (of naam van een directory). Merk op dat dit veld elke string accepteert, zelfs als die alleen in bestanden zou moeten worden gebruikt: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van de browser (optioneel, standaard is "Enter filename" (voer bestandsnaam in))</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aanvankelijk</parameter
></term>
	<listitem
><para
>Aanvangstekst van de browser (optioneel, standaard is "", &ie; een lege string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>type</parameter
></term>
	<listitem
><para
>Een van "file" (bestand), "dir", of "savefile" (opslaan bestand). Voor het selecteren van een bestaand bestand, bestaande directory, of niet-bestaand bestand. (optioneel, standaard is "file")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_urls</parameter
></term>
	<listitem
><para
>Of (niet-lokale) &URL;s kunnen worden geselecteerd (optioneel, standaard is "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>filter</parameter
></term>
	<listitem
><para
>Bestandstype filter, &eg;: ("*.txt *.csv" voor .txt en .csv -bestanden) Een aparte ingang voor "Alle bestanden" wordt automatisch toegevoegd Optioneel, standaard is "", &ie; Alle bestanden.)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>vereist</parameter
></term>
	<listitem
><para
>Of het - bij het indienen van de code- vereist is dat het veld niet leeg is. Merk op dat dit niet noodzakelijk betekent dat de geselecteerde bestandsnaam geldig is. Zie <link linkend="elementproperties"
>vereist-eigenschap</link
> (optioneel, standaard is true)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;saveobject&gt;  (object opslaan)</term>
<listitem
><para
>Een element ontworpen voor het selecteren van de naam van een &R;-object waarnaar het moet worden opgeslagen (&ie; in het algemeen niet reeds bestaand, in tegenstelling tot een varslot(): <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam voor de invoer (optioneel, standaard is "Save to:" (opslaan op:))</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aanvankelijk</parameter
></term>
	<listitem
><para
>Begintekst voor de invoer (optioneel, standaard is "mijn.data" (mijn gegevens))</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>vereist</parameter
></term>
	<listitem
><para
>Of - bij het indienen van de code - het vereist is dat het veld een toegestane objectnaam bevat. Zie <link linkend="elementproperties"
>vereist-eigenschap</link
> (optioneel, standaard is true)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>activeerbaar</parameter
></term>
	<listitem
><para
>In veel gevallen is het opslaan naar een &R;-object optioneel. In deze gevallen kan met dit attribuut een keuzevakje worden ingebouwd in het saveobject-element. Indien ingesteld op true, wordt de saveobject aan/uit gezet door het keuzevakje. Zie de <link linkend="elementproperties"
>active-eigenschap</link
> van saveobject (optioneel, standaard is false) </para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>geactiveerd</parameter
></term>
	<listitem
><para
>Alleen voor kiesbare saveobject-elementen: of dit standaard gekozen/aan is (optioneel, standaard is false)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;spinbox&gt;  (spinveld)</term>
<listitem
><para
>Een spinveld waarin de gebruiker een numerieke waarde kan kiezen, of met directe toetsenbord-invoer, of met op/neer pijltjes. Attribuut: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam voor het spinveld (aanbevolen, standaard is "Enter value:" (waarde invoeren))</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min</parameter
></term>
	<listitem
><para
>De laagste waarde die in het spinveld mag worden ingevoerd (optioneel, standaard is de laagste technisch mogelijke waarde in het spinveld)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max</parameter
></term>
	<listitem
><para
>De hoogste waarde die in het spinveld mag worden ingevoerd (optioneel, standaard is de hoogste technisch mogelijke waarde in het spinveld)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aanvankelijk</parameter
></term>
	<listitem
><para
>De beginwaarde getoond in het spinveld (optioneel, standaard is "0")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>type</parameter
></term>
	<listitem
><para
>Een van "real" (kommagetal) of "integer" (geheel getal). Of in het spinveld kommagetallen of gehele getallen moeten worden gekozen. (optioneel, standaard is "real")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>default_precision  (standaard nauwkeurigheid)</parameter
></term>
	<listitem
><para
>Alleen zinvol als het type van het spinveld "real" is. Geeft het standaard aantal decimalen op in het spinveld (alleen dit aantal laatste nullen wordt getoond). Wanneer de gebruiker de op/neer pijltjes gebruikt, wordt deze decimale plaats veranderd. Maar de gebruiker kan toch waarden invoeren met een grotere nauwkeurigheid (zie onder) (optioneel, standaard is "2")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_precision (maximale nauwkeurigheid)</parameter
></term>
	<listitem
><para
>Het grootste aantal cijfers dat zinvol kan worden weergegeven (optioneel, standaard is "8")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;formula&gt; (formule)</term>
<listitem
><para
>In dit geavanceerde element  kan de gebruiker een formule/aantal interacties kiezen uit geselecteerde variabelen. Bijvoorbeeld voor een GLM (Vert.: ik vermoed dat bedoeld wordt: een Generalized Linear Model: een gegeneraliseerd lineair model, maar verder doet dit er niet toe) kan dit element worden gebruikt voor het opgeven van de interactie-termen in het model. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>fixed_factors</parameter
></term>
	<listitem
><para
>De ID van de varslot die de geselecteerde fixed factors (vaste factoren) bevat (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>afhankelijk</parameter
></term>
	<listitem
><para
>De ID van de varslot dat de afhankelijke variabele bevat (vereist)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;embed&gt;  (inbedden)</term>
<listitem
><para
>Bed een andere plugin in in deze plugin (zie  <link linkend="embedding"
>hoofdstuk over inbedden</link
>). Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>component</parameter
></term>
	<listitem
><para
>De geregistreerde naam van de in te bedden component (zie <link linkend="embedding"
>hoofdstuk over inbedden</link
>). Attributen:</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>as_button  (als knop)</parameter
></term>
	<listitem
><para
>Indien ingesteld op "true", wordt alleen een drukknop geplaatst in de inbeddende &GUI;, de ingebedde &GUI; wordt alleen getoond (in een afzonderlijk venster) wanneer op de drukknop wordt gedrukt (optioneel, standaard is "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Alleen zinvol als as_button = "true": De naam van de knop (aanbevolen, standaard is "Opties")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;preview&gt;  (voorbeeld, voorweergave)</term>
<listitem
><para
>Keuzevakje voor het aan/uitzetten van de voorbeeldfunctionaliteit. Merk op dat vanaf versie 0.6.5 van &rkward; <command
>&lt;preview&gt;</command
> preview-elementen speciaal zijn in plugin-dialogen (niet assistenten): Zij worden geplaatst in de kolom voor knoppen, ongeacht van waar ze in de UI zijn gedefinieerd. Maar het is nog steeds een goed idee ze op een zinvolle plaats in de layout te definiëren, voor achterwaartse compatibiliteit (backwards compatibility). Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Naam van het vakje (optioneel, standaard is "Preview")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>modus</parameter
></term>
	<listitem
><para
>Type van preview. Ondersteund worden "plot" (zie <link linkend="preview_plots"
>hoofdstuk over grafiek previews</link
>), "output" (zie <link linkend="preview_output"
>hoofdstuk over (&HTML;) uitvoer previews</link
>), "data" (zie <link linkend="preview_data"
>gegevens previews</link
>), en "custom" (zie <link linkend="preview_custom"
>aangepaste previews</link
>). (optioneel, standaard is "plot")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>plaatsing</parameter
></term>
	<listitem
><para
>Plaatsing van de preview: "attached" (vastgemaakt aan de hoofdwerkplaats), "detached" (los venster), "docked" (vastgemaakt aan plugin-dialoog) en "default" (dit is nu nog hetzelfde als "docked", maar kan in de toekomst mogelijk worden ingesteld door de gebruiker). In het algemeen wordt aanbevolen dit de standaard instelling te laten voor de beste UI-consistentie (optioneel, standaard is "default")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>actief</parameter
></term>
	<listitem
><para
>Of de preview standaard actief is. In het algemeen worden alleen docked previews standaard actief gemaakt, en zelfs dan is er een reden voor dat dit standaard inactief is (optioneel, standaard is "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="logicelements"
><title
>Logische sectie</title>
<variablelist>
<varlistentry>
<term
>&lt;logic&gt;  (logica)</term>
<listitem
><para
>Het element dat de logische sectie bevat. Alle onderstaande elementen kunnen alleen in het &lt;logic&gt; element voorkomen. Het &lt;logic&gt; element kan alleen een directe child van het &lt;document&gt;-element zijn (hoogstens een per document), of van &lt;optionset&gt;-elementen (hoogstens een per optionset). De logische sectie van het document geldt op dezelfde manier voor zowel  &lt;dialog&gt; en &lt;wizard&gt;-GUIs.</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;external&gt;  (extern)</term>
<listitem
><para
>Maakt een nieuwe (string) eigenschap aan die bedoeld wordt als aanknopingspunt voor een externe eigenschap als de plugin ingebed wordt. Zie <link linkend="embedding_incomplete"
>hoofdstuk over "incomplete" plugins</link
>. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>De ID  (naam) van de nieuwe eigenschap (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>standaard</parameter
></term>
	<listitem
><para
>De standaard string-waarde van de nieuwe eigenschap, &ie; de gebruikte waarde, indien de eigenschap niet verbonden is met een externe eigenschap (optioneel, standaard is een lege string)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;i18n&gt;  (internationalisatie)</term>
<listitem
><para
>Maakt een nieuwe (string)eigenschap aan bedoeld voor een ge-internationaliseerde naam. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>De ID  (naam) van de nieuwe eigenschap (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>De naam. Deze wordt straks vertaald. (vereist)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;set&gt;  (verzameling)</term>
<listitem
><para
>Stelt een vaste waarde in voor een eigenschap (natuurlijk blijft die niet vast als u de eigenschap ook verbindt met een andere eigenschap). Bijvoorbeeld, als u een plugin inbedt, maar enkele van zijn elementen wilt verbergen, kunt u de zichtbaarheid- eigenschap van die elementen op "false" instellen. Vooral nuttig voor inbeddende/ingebedde plugins. Merk op: als er meerdere &lt;set&gt;-elementen zijn met dezelfde <parameter
>id</parameter
>, heeft de laatst gedefinieerde voorrang. Dit kan soms nuttig zijn om op te vertrouwen bij het gebruik van  &lt;include&gt;d onderdelen (parts). Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>De ID (naam) van de in te stellen eigenschap (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>aan</parameter
></term>
	<listitem
><para
>De in te stellen string-waarde  van de eigenschap (vereist). Merk op: voor booleaanse eigenschappen zoals zichtbaarheid, aan staan, stelt u het attribuut typisch in op ="true" of op ="false".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;convert&gt;  (converteren, omzetten)</term>
<listitem
><para
>Maakt een nieuwe booleaanse eigenschap aan die afhangt van de toestand van een of meer verschillende eigenschappen. Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>De ID  (naam) van de nieuwe eigenschap (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>bronnen</parameter
></term>
	<listitem
><para
>De ids (namen) van de eigenschappen waar deze eigenschap vanaf hangt. Een of meer eigenschappen kunnen worden genoemd, gescheiden door een ";". (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>modus</parameter
></term>
	<listitem
><para
>De modus van de conversie/bewerking. Een van "equals" (gelijk aan), "notequals" (ongelijk aan), "range" (bereik), "and" (en), "or" (of). Indien in "equals"-modus, is de eigenschap alleen "true", als de waarde van al zijn sources gelijk zijn aan de attribuut-standaard (zie onder). Indien in de "notequals"-modus, is de eigenschap alleen dan "true" indien de waarde van al zijn sources verschillen met de attribuut-standaard (zie onder). Indien in "range"-modus moeten de sources numeriek zijn (integer of real). De eigenschap is alleen dan "true", indien alle bronnen binnen het bereik liggen die gegeven wordt door de attributen min en max (zie onder). In "and"-modus moeten de bronnen booleaanse eigenschappen zijn. De eigenschap is alleen dan "true", als alle bronnen tegelijk "true" zijn. In "or"-modus, moeten de sources booleaanse eigenschappen zijn. De eigenschap is alleen dan "true", als minstens een van de bronnen "true" is. (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>standaard</parameter
></term>
	<listitem
><para
>Alleen zinvol in de modi "equals" of "notequals": de string-waarde waarmee wordt vergeleken (vereist indien in een van deze modi)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min</parameter
></term>
	<listitem
><para
>Alleen zinvol in de modus "range": de kleinste waarde waarmee wordt vergeleken (optioneel, standaard is de kleinste real die de machine aan kan)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max</parameter
></term>
	<listitem
><para
>Alleen zinvol in de modus "range": de grootste waarde waarmee wordt vergeleken (optioneel, standaard is de grootste real die de machine aan kan)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>require_true  (vereist_waar)</parameter
></term>
	<listitem
><para
>Indien ingesteld op "true", wordt de eigenschap vereist, en is die alleen geldig als de toestand true/on is. Dus, als de eigenschap "false" is, blokkeert die de knop <guibutton
>Indienen</guibutton
> (optioneel, standaard is "false"). <caution
><para
>Als u dit gebruikt, moet u ervoor zorgen dat de gebruiker gemakkelijk kan vinden wat er mis is, zoals het tonen van een uitleggende  &lt;text&gt;.</para
></caution
></para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;switch&gt;  (schakelaar)</term>
<listitem
><para
>Maak een nieuwe eigenschap aan die naar verschillende doel-eigenschappen (target properties) (of vaste strings) doorgeeft (relay), op basis van de waarde van een conditie-eigenschap. Hierdoor kunt u logica opbouwen die vergelijkbaar is met de constructs <function
>if()</function
> of <function
>switch()</function
>. Attributen:</para>
	<variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>De ID  (naam) van de nieuwe eigenschap (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>conditie</parameter
></term>
	<listitem
><para
>De id (naam) van de conditie-eigenschap (vereist)</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Child elementen: (een child is een voortzetting van een parent. Dit soort  termen zijn algemeen in een moderne computertaal)</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;true&gt;  (waar)</term>
	<listitem
><para
>Indien de conditie-eigenschap een boolean is, kunt u de twee child elementen &lt;true&gt; en &lt;false&gt; opgeven (en deze alleen). (vereist, als &lt;false&gt; ook gegeven wordt)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;false&gt;  (onwaar)</term>
	<listitem
><para
>Indien de conditie-eigenschap een boolean is, kunt u de twee child elementen &lt;true&gt; en &lt;false&gt; opgeven (en deze alleen). (vereist, als &lt;true&gt; ook gegeven wordt)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;case&gt;  (in geval dat)</term>
	<listitem
><para
>Indien de conditie-eigenschap een boolean is, kunt u een willekeurig aantal  &lt;case&gt;-elementen opgeven, een voor elke waarde van de conditie-eigenschap die u wilt gebruiken (minstens een zo'n element is vereist, indien de conditie niet een boolean is)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;default&gt;  (standaard)</term>
	<listitem
><para
>Indien de conditie-eigenschap geen boolean is, maakt het optionele &lt;default&gt;-element het mogelijk het gedrag op te geven, indien geen &lt;case&gt;-element  overeenkomt met de waarde van de conditie-eigenschap (optioneel, alleen een keer toegestaan, in combinatie met een of meer &lt;case&gt;-elementen).</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Child-elementen &lt;true&gt;, &lt;false&gt;, &lt;case&gt;, en &lt;default&gt; hebben de volgende attributen:</para>
	<variablelist>
	<varlistentry>
	<term
><parameter
>standaard</parameter
></term>
	<listitem
><para
>Alleen voor &lt;case&gt;-elementen: de waarde waaraan de conditie-eigenschap moet voldoen (vereist, string).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>fixed_value  (vaste_waarde)</parameter
></term>
	<listitem
><para
>Een vaste string die moet worden opgegeven als de waarde van de &lt;switch&gt;-eigenschap, als de huidige conditie klopt (vereist, als de dynamic_value niet wordt gegeven).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>dynamic_value  (dynamische_waarde)</parameter
></term>
	<listitem
><para
>De <parameter
>id</parameter
> (naam) van de doeleigenschap die moet worden gegeven als de waarde van de  &lt;switch&gt;-eigenschap, als de huidige conditie klopt (vereist, als fixed_value niet is gegeven).</para
></listitem>
	</varlistentry>
	</variablelist>
	</listitem>
</varlistentry>

<varlistentry>
<term
>&lt;connect&gt;  (verbinden)</term>
<listitem
><para
>Verbindt twee eigenschappen. De client-eigenschap wordt gewijzigd zodra de governor-eigenschap verandert (maar niet andersom). Attributen: <variablelist>
	<varlistentry>
	<term
><parameter
>client</parameter
></term>
	<listitem
><para
>De ID van de client_eigenschap, &ie; de aan te passen eigenschap (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>governor</parameter
></term>
	<listitem
><para
>De ID van de governor-eigenschap, &ie; de eigenschap die de klanteigenschap aanpast. Deze kan een modifier inhouden (vereist)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>reconcile  (in overeenstemming brengen)</parameter
></term>
	<listitem
><para
>Indien "true"zal de client-eigenschap de governor-eigenschap bij verbinding zo aanpassen dat de governor-eigenschap alleen waarden accepteert die ook door de client worden geaccepteerd (&eg; stel dat de governor een numerieke eigenschap is met als kleinste waarde "0", en de client een numerieke eigenschap met als kleinste waarde "100". Als reconcile de waarde "true"heeft wordt voor beide eigenschappen de kleinste waarde "100"). Dit werkt in het algemeen alleen indien beide eigenschappen van hetzelfde basistype zijn (optioneel, standaard is dit "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;dependency_check&gt;  (controleren op afhankelijkheden)</term>
<listitem
><para
>Maakt een boolean eigenschap aan die true is, indien aan de opgegeven afhankelijkheden wordt voldaan, en anders false. De &XML;-syntaxis van het element is dezelfde als die van de <command
>&lt;dependencies&gt;</command
>-elementen, beschreven in de <link linkend="pluginmapelements"
>&pluginmap;-naslag</link
>. Vanaf &rkward; 0.6.1, worden alleen de &rkward; en &R; versiespecificaties in beschouwing genomen, en niet de afhankelijkheden van pakketten en pluginmaps. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;script&gt;</term>
<listitem
><para
>Definieer scriptcode voor de besturing van de UI-logica. Zie <link linkend="logic_scripted"
>de sectie voor GUJI-logica in scripts</link
> voor de details. De te gebruiken scriptcode kan in het <parameter
>"file"</parameter
> (bestand) -attribuut worden gegeven, , of als een tekst met commentaar van het element. Het <command
>&lt;script&gt;</command
>-element is niet toegestaan in de <command
>&lt;logic&gt;</command
> sectie van een optionset. Attributen: <variablelist
> <varlistentry>
	<term
><parameter
>bestand</parameter
></term>
	<listitem
><para
>Bestandsnaam van het scriptbestand (vereist)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

</variablelist>
</sect2>

</sect1
>	<!-- Elements in main XML -->

<sect1 id="elementproperties"
><title
>Eigenschappen van plugin-elementen</title>
<para
>Alle <link linkend="layoutelements"
>layout-elementen</link
>, en alle <link linkend="activeelements"
>actieve elementen</link
> hebben de volgende eigenschappen, toegankelijk via de "id_van_element.naam_van_eigenschap": </para>
<variablelist>
<varlistentry>
<term
>zichtbaar</term>
<listitem
><para
>Of het &GUI;-element zichtbaar is of niet (boolean)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>ingeschakeld</term>
<listitem
><para
>Of het &GUI;-element is ingeschakeld of niet (boolean)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>vereist</term>
<listitem
><para
>Of het &GUI;-element vereist is (om een geldige instelling te bevatten) of niet. Let op dat elk element dat is uitgeschakeld of verborgen, impliciet niet vereist is (boolean)</para
></listitem>
</varlistentry>
</variablelist>
<para
>Daarbij kunnen sommige elementen extra eigenschappen hebben die u kunt verbinden. De meeste actieve elementen hebben ook een standaard eigenschap waarvan de waarde wordt teruggegeven na het aanroepen van  <function
>getBoolean/getString/getList ("...")</function
>, indien er geen specifieke eigenschap werd genoemd, zoals hieronder beschreven: </para>

<variablelist>
<varlistentry>
<term
>&lt;text&gt;  (tekst)</term>
<listitem
><para
>Standaard eigenschap is tekst <variablelist
> <varlistentry>
	<term
>tekst</term>
	<listitem
><para
>De getoonde tekst (text)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;varselector&gt;  (variabelekiezer)</term>
<listitem
><para
>Geen standaard eigenschap <variablelist>
	<varlistentry>
	<term
>geselecteerd</term>
	<listitem
><para
>De nu geselecteerde objecten. Dit heeft u waarschijnlijk niet nodig. Wordt intern gebruikt (Robject) </para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>root</term>
	<listitem
><para
>Het root/parent object van de objecten waaruit u kunt kiezen (RObject)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;varslot&gt;</term>
<listitem
><para
>Standaard eigenschap is "available" (beschikbaar) <variablelist>
	<varlistentry>
	<term
>available</term>
	<listitem
><para
>Alle objecten in de varslot (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>geselecteerd</term>
	<listitem
><para
>Van de objecten in de varslot, die objecten die nu zijn geselecteerd.  Dit heeft u waarschijnlijk niet nodig. Wordt intern gebruikt (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>bron</term>
	<listitem
><para
>Een kopie van de geselecteerde objecten in de overeenkomende varselector. Dit heeft u waarschijnlijk niet nodig. Wordt intern gebruikt (RObject)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueselector&gt;  (waarde selector)</term>
<listitem
><para
>Standaard eigenschap is "geselecteerd" <variablelist>
	<varlistentry>
	<term
>geselecteerd</term>
	<listitem
><para
>De nu geselecteerde strings. Modifier "labeled" voor het ophalen van de overeenkomstige namen. In een &lt;valueselector&gt; heeft u dit waarschijnlijk niet direct nodig, (alleen in een &lt;select&gt;). (read/write StringList)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>available</term>
	<listitem
><para
>De lijst van string-waarden waaruit u kunt kiezen. (read/write StringList)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>labels</term>
	<listitem
><para
>Te tonen naamteksten voor de stringwaarden. (read/write StringList)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueslot&gt;</term>
<listitem
><para
>Zelfde als &lt;varslot&gt;, maar de eigenschappen zijn lijsten met strings, in plaats van RObjecten.</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;radio&gt;  (radioknoppen, selectierondjes)</term>
<listitem
><para
>Standaard eigenschap is "string" <variablelist>
	<varlistentry>
	<term
>string, tekenreeks</term>
	<listitem
><para
>De waarde van de nu geselecteerde optie (string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>aantal</term>
	<listitem
><para
>Het nummer van de nu geselecteerde optie (opties zijn van boven naar beneden genummerd, te beginnen met 0) (integer (geheel getal))</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;dropdown&gt;  (neerklapmenu)</term>
<listitem
><para
>Zelfde als &lt;radio&gt;</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;select&gt;  (kies, selecteer)</term>
<listitem
><para
>Zelfde als &lt;valueselector&gt;</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;option&gt;  (optie)</term>
<listitem
><para
>Geen standaard eigenschap. "enabled" (ingeschakeld) is de *enige* eigenschap, en is op dit moment niet beschikbaar voor opties in een  &lt;select&gt; of &lt;valueselector&gt;. &lt;option&gt; heeft niet de eigenschappen "visible" (zichtbaar) of "required" (vereist). <variablelist
> <varlistentry>
	<term
>ingeschakeld</term>
	<listitem
><para
>Of deze ene eigenschap moet worden aan- of uitgezet. In de meeste gevallen wilt u de gehele &lt;radio&lt; of &lt;dropdown&lt; (keuzelijst) aan/uitzetten. Maar u kunt dit gebruiken om het aangezet zijn dynamisch in te stellen voor een enkele optie in een &lt;radio&lt; of &lt;dropdown&lt; (bool)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;checkbox&gt;  (keuzevakje)</term>
<listitem
><para
>De standaard eigenschap is "state.labeled", wat betekent dat de waarden opgegeven in de attributen <parameter
>value</parameter
> (waarde), en  <parameter
>value_unchecked</parameter
> (waarde_niet_geactiveerd) worden teruggegeven, en <emphasis
>niet</emphasis
> de tekst getoond bij het keuzevakje. <variablelist
> <varlistentry>
	<term
>status</term>
	<listitem
><para
>Status van het keuzevakje (aan of uit). Merk op dat de nuttige modifiers van deze eigenschap (zoals van alle boolean eigenschappen) zijn "not" en "labeled" (van naam voorzien) (zie <link linkend="propertytypes"
>eigenschap-typen</link
>). Maar het is vaak beter geen modifier te koppelen aan een eigenschap,  &ie; "<emphasis
>checkbox_id</emphasis
>.state", die de status teruggeeft van een keuzevakje in een formaat waardoor het gebruikt kan worden in een if statement (0 of 1). (boolean)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;frame&gt;  (onvertaalbaar, zoiets als raamwerk)</term>
<listitem
><para
>Standaard eigenschap is "checked" (geactiveerd), als - en alleen als - de frame kan worden geactiveerd. Voor frames die niet kunnen worden geactiveerd is er geen standaard eigenschap. <variablelist
> <varlistentry>
	<term
>geactiveerd</term>
	<listitem
><para
>Alleen beschikbaar voor activeerbare frames: status van het keuzevakje (aan of uit). Let erop dat nuttige modifiers van deze eigenschap (zoals van alle boolean eigenschappen) zijn "not" en "numeric" (zie (see <link linkend="propertytypes"
>eigenschap-typen</link
>). (boolean)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;input&gt;  (invoer)</term>
<listitem
><para
>Standaard eigenschap is "text" <variablelist
> <varlistentry>
	<term
>tekst</term>
	<listitem
><para
>Huidige tekst in het invoerveld (string)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
	<term
>&lt;matrix&gt;</term>
	<listitem
><para
>Standaard eigenschap is "cbind", <variablelist>
		<varlistentry>
			<term
>rijen</term>
			<listitem
><para
>Aantal rijen in de matrix (integer, geheel getal). Indien de gebruiker het aantal rijen in de matrix kan wijzigen, moet deze eigenschap worden beschouwd als read-only (alleen lezen). U kunt anders door dit te wijzigen, de grootte van de matrix veranderen.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>kolommen</term>
			<listitem
><para
>Aantal kolommen in de matrix (integer, geheel getal). Indien de gebruiker het aantal kolommen in de matrix kan wijzigen, moet deze eigenschap worden beschouwd als read-only (alleen lezen). U kunt anders door dit te wijzigen, de grootte van de matrix veranderen.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>tsv</term>
			<listitem
><para
>Gegevens in de matrix in het tsv-formaat (string: read-write (lezen-schrijven)). Merk op dat, vergeleken met de gebruikelijke tsv-indeling,  de <emphasis
>kolommen</emphasis
>, en niet de rijen, van elkaar worden gescheiden door newline (nieuwe regel)  karakters, en de cellen in een kolom door tab-karakters .</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>0,1,2...</term>
			<listitem
><para
>De gegevens uit een kolom (de meest linkse kolom is 0). <function
>getValue()</function
>/<function
>getString()</function
> geven dit terug als een enkele string, gescheiden door "\n". Maar aangeraden wordt hiervoor de functie <function
>getList()</function
> te gebruiken, die deze kolom teruggeeft als een array van strings.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>rij.0,rij.1,rij.2...</term>
			<listitem
><para
>De gegevens uit een rij (de bovenste kolom is 0). <function
>getValue()</function
>/<function
>getString()</function
> geven dit terug als een enkele string, gescheiden door "\n". Maar aangeraden wordt hiervoor de functie <function
>getList()</function
> te gebruiken, die deze kolom teruggeeft als een array van strings.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>cbind</term>
			<listitem
><para
>Gegevens in een formaat dat geschikt is voor plakken in &R;, wrapped (een computerterm, die zoiets betekent als: ingevouwen, opgeborgen in) een cbind statement (string: read only (alleen lezen))</para
></listitem>
		</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
	<term
>&lt;optionset&gt;  (verzameling van opties)</term>
	<listitem
><para
>Geen standaard eigenschap. <variablelist>
		<varlistentry>
			<term
>row_count</term>
			<listitem
><para
>Aantal elementen in de optionset (integer). Read-only (alleen-lezen).</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>current_row  (huidige rij)</term>
			<listitem
><para
>Huidig actieve element in de optionset (integer). -1 als er geen actief element is. Read-write (Lezen-schrijven).</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
><emphasis
>optioncolumn_ids  (namen optionkolommen)</emphasis
></term>
			<listitem
><para
>Voor elke &lt;optioncolumn&gt; die u definieert, wordt een string list eigenschap aangemaakt met de opgegeven id (naam).</para
></listitem>
		</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;browser&gt;   (bladerprogramma)</term>
<listitem
><para
>Standaard eigenschap is "selection"  <variablelist>
	<varlistentry>
	<term
>selection  (selectie)</term>
	<listitem
><para
>Huidige tekst (geselecteerde bestandsnaam) in de browser (string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>overschrijven</parameter
></term>
	<listitem
><para
>Of de optie "overschrijven" is geactiveerd (boolean, allen-lezen, d.w.z. u kunt de status van het keuzevakje lezen, maar het niet wijzigen, programmatisch)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;saveobject&gt;  (object opslaan)</term>
<listitem
><para
>Standaard eigenschap is "selection"  <variablelist>
	<varlistentry>
	<term
>selection  (selectie)</term>
	<listitem
><para
>Volledige naam van het geselecteerde object (string: read-only - gebruik "parent" en "objectnaam" voor instellen in een programma)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>parent</term>
	<listitem
><para
>Het parent object (het object dat de basis is van het huidige object) van het geselecteerde object. Dit is altijd een bestaand object in &R; van een type dat andere objecten kan bevatten (&eg; een list of data.frame). Indien ingesteld op een lege string of een ongeldig object, wordt ".GlobalEnv" aangenomen. (Robject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>objectnaam</term>
	<listitem
><para
>De basisnaam van het geselecteerde object, &ie; de door de gebruiker ingevoerde string (gewijzigd naar een geldige naam in &R; indien nodig) (string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>actief</term>
	<listitem
><para
>Alleen voor activeerbare saveobjects: of controle actief/aangezet is. Altijd true voor niet-activeerbare saveobjects (bool)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;spinbox&gt;  (spinveld)</term>
<listitem
><para
>Standaard eigenschap is altijd "int" of "real.formatted", afhankelijk van de modus van het spinveld <variablelist>
	<varlistentry>
	<term
>int</term>
	<listitem
><para
>Gehele waarde in het spinveld, of dichtstbijzijnd geheel getal (integer)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>real</term>
	<listitem
><para
>Kommagetal in het spinveld (en eventueel geheel) (real)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;formula&gt; (formule)</term>
<listitem
><para
>Standaard eigenschap is "model" <variablelist>
	<varlistentry>
	<term
>model</term>
	<listitem
><para
>De huidige model-string (string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>table  (tabel)</term>
	<listitem
><para
>De data.frame die de nodige variabelen bevat. Indien de variabelen van slechts een data.frame worden gebruikt, wordt de naam van de data.frame teruggegeven. Anders wordt een nodige nieuwe data.frame aangemaakt (string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>labels</term>
	<listitem
><para
>Indien variabelen uit meerdere data.frames komen, kunnen hun namen botsen (bijvoorbeeld, indien in beide data.frames een variabele met de naam "x" voorkomt). Dit geeft een lijst terug met deze gebotste namen als indices (indexen) en de beschrijvende naam als waarde (string)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>fixed_factors</term>
	<listitem
><para
>De fixed factors. Dit heeft u waarschijnlijk niet nodig. Wordt intern gebruikt (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>dependent</term>
	<listitem
><para
>De afhankelijke variabele(n). Dit heeft u waarschijnlijk niet nodig. Wordt intern gebruikt (RObject)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;embed&gt;  (inbedden)</term>
<listitem
><para
>Geen standaard eigenschap <variablelist
> <varlistentry>
	<term
>code</term>
	<listitem
><para
>De (programma)code die door de ingebedde plugin wordt gegenereerd (code)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;preview&gt;  (voorbeeld, voorweergave)</term>
<listitem
><para
>Standaard eigenschap is "state" (status) <variablelist
> <varlistentry>
	<term
>status</term>
	<listitem
><para
>Of het keuzevakje voor het voorbeeld actief is (niet nodig als het voorbeeld al eerder werd getoond) (boolean)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;convert&gt;  (converteren, omzetten)</term>
<listitem
><para
>Dit element (gebruikt in de sectie &lt;logic&gt;) is bijzonder, omdat hettechnisch gesproken een eigenschap *is*, in plaats van dat het een of meer eigenschappen omvat. Het is boolean-achtig. Merk op dat nuttige modifiers van deze eigenschap (zoals van alle boolean eigenschappen) "not" en "numeric" zijn (zie <link linkend="propertytypes"
>eigenschap-typen</link
>)</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;switch&gt;  (schakelaar)</term>
<listitem
><para
>Dit element (gebruikt in de sectie &lt;logic&gt;) is bijzonder, omdat hettechnisch gesproken een eigenschap *is*, in plaats van dat het een of meer eigenschappen bevat. Hiermee kunt u tussen diverse doeleigenschappen schakelen, afhankelijk van de waarde van een conditie-eigenschap, of waarden van de conditie-eigenschap herindelen. Alle modifiers die u invoert worden doorgegeven naar de doeleigenschappen, dus, &eg; indien alle doeleigenschappen RObject-eigenschappen zijn, kunt u bij het schakelen ook de "korte naam"-modifier gebruiken. Maar als de doeleigenschappen niet allemaal van hetzelfde type zijn kan het gebruiken van modifiers tot fouten leiden. Voor <replaceable
>fixed_value</replaceable
>s, (vaste waarden) wordt elke modifier stilzwijgend genegeerd. Merk op dat doeleigenschappen, met een schakelaar beschikbaar, altijd read-only zijn.</para
></listitem>
</varlistentry>

</variablelist>
</sect1>

<sect1 id="standard_embeddable_plugins"
><title
>Ingebedde plugins meegeleverd met de officiële uitgave van &rkward;</title>
<para
>Met &rkward; worden een aantal ingebedde plugins meegeleverd, die in uw eigen plugins kunnen worden gebruikt. Uitvoerige documentatie is op dit ogenblik alleen beschikbaar in de bron- en helpbestanden van deze plugins. Maar hier volgt een kort overzicht van wat er beschikbaar is:</para>
<table frame='all'
><title
>Standaard plugins die kunnen worden ingebed</title>
<tgroup cols='4'>
<thead>
<row>
  <entry
>ID</entry>
  <entry
>Pluginmap</entry>
  <entry
>Beschrijving</entry>
  <entry
>Voorbeeld van gebruik</entry>
</row>
</thead>
<tbody>
<row>
  <entry
>rkward::plot_options</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Geeft een groot aantal opties voor plots. Wordt in de meeste plugins voor plotten gebruikt.</entry>
  <entry
>Plots->Barplot, meeste andere plugins voor plotten</entry>
</row>
<row>
  <entry
>rkward::color_chooser  (kleurkiezer)</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Zeer eenvoudige plugin voor kleuren. Huidige implementatie geeft een lijst met namen van kleuren. Toekomstige implementaties kunnen meer mogelijkheden geven voor het kiezen van een kleur.</entry>
  <entry
>Plots->Histogram</entry>
</row>
<row>
  <entry
>rkward::plot_stepfun_options</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Plotopties voor stapfunctie</entry>
  <entry
>Plots->ECDF-plot</entry>
</row>
<row>
  <entry
>rkward::histogram_options</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Histogram (plot) opties</entry>
  <entry
>Plots->Histogram</entry>
</row>
<row>
  <entry
>rkward::barplot_embed  (staafdiagram inbedden)</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Opties voor staafdiagrammen</entry>
  <entry
>Plots->Barplot</entry>
</row>
<row>
  <entry
>rkward::one_var_tabulation</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Voor tabel maken van een enkele variabele.</entry>
  <entry
>Plots->Barplot</entry>
</row>
<row>
  <entry
>rkward::limit_vector_length</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Beperk de lengte van een vector (tot de n grootste of kleinste elementen).</entry>
  <entry
>Plots->Barplot</entry>
</row>
<row>
  <entry
>rkward::level_select  (level of niveau selecteren)</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Geeft een &lt;valueselector&gt; gevuld met de levels (of unieke waarden) van een vector.</entry>
  <entry
>Data->Recode Categorical data</entry>
</row>
<row>
  <entry
>rkward::multi_input  (multi invoer)</entry>
  <entry
>embedded.pluginmap  (ingebed.pluginmap)</entry>
  <entry
>Combineert spinveld, (spinbox), input (invoer) en radioknoppen voor invoer van karakter, numerieke, logische gegevens.</entry>
  <entry
>Data->Recode Categorical data</entry>
</row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="pluginmapelements"
><title
>Elementen voor gebruik in &pluginmap;-bestanden</title>
<variablelist>
<varlistentry>
<term
>&lt;document&gt;</term>
<listitem
><para
>Moet in elk &pluginmap;-bestand aanwezig zijn als de root-node (precies een keer). Attributen:  <variablelist>
	<varlistentry>
	<term
>base_prefix  (basis voorvoegsel)</term>
	<listitem
><para
>Bestandsnamen opgegeven in het &pluginmap;-bestand worden relatief aangenomen ten opzichte van de directory van het &pluginmap;-bestand + het voorvoegsel dat u hier opgeeft. Nuttig, vooral indien al uw componenten onder een enkele subdirectory zijn geplaatst.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>namespace  (onvertaalbaar, naamruimte)</term>
	<listitem
><para
>Een namespace voor de component-ids (componentnamen). Wanneer bij inbedding de componenten worden gezocht, worden die vindbaar via een string "namespace::component_id".  Stel dit voorlopig in op "rkward".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Een optionele identificatiestring voor deze &pluginmap;. Dit opgeven maakt het mogelijk dat derde auteurs naar deze &pluginmap; kunnen verwijzen en die kunnen inlezen vanuit die van hun (zie <link linkend="chapter_dependencies"
>hoofdstuk voor omgaan met dependencies</link
>).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>prioriteit  (voorrang)</term>
	<listitem
><para
>Een van <replaceable
>"hidden"</replaceable
> (verborgen, niet zichtbaar), <replaceable
>"low"</replaceable
> (laag), <replaceable
>"medium"</replaceable
> (midden), of <replaceable
>"high"</replaceable
> (hoog). &pluginmap;s met "medium" of "high" priority worden automatisch actief gemaakt, op de plek waar &rkward; ze de eerste keer vindt. Gebruik  <replaceable
>priority="hidden"</replaceable
> voor &pluginmap;s die niet  actief mogen worden, directory (?) (alleen bedoeld voor insluiten). Maar in de huidige implementatie wordt hierdoor de &pluginmap; niet werkelijk verborgen. (Optioneel, standaard is "medium").</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;dependencies&gt;  (afhankelijkheden) </term>
<listitem
><para
>Dit element, dat afhankelijkheden opgeeft, kan een directe child zijn van het &lt;document&gt;-element (een keer), en als een child van &lt;component&gt; -elementen (een keer voor elk &lt;component&gt;-element). Bevat de afhankelijkheden van de plugin waaraan moet worden voldaan.  Zie het <link linkend="chapter_dependencies"
>hoofdstuk over dependencies</link
> voor een overzicht. Attributen:</para>
	<variablelist>
	<varlistentry>
	<term
>rkward_min_version, rkward_max_version</term>
	<listitem
><para
>Toegestane maximum- en minimumversies van &rkward;. Versie-specificaties kunnen niet-numerieke toevoegingen hebben, zoals  "0.5.7z-devel1". Indien er aan een bepaalde afhankelijkheid niet wordt voldaan, worden de ontbrekende plugin(s) waar die op betrekking hebben,  <emphasis
>genegeerd</emphasis
>. <link linkend="sect_dependencies_rkward_version"
>Meer informatie</link
>. Optioneel; indien niet opgegeven, zijn er geen minimum / maximum versies  vereist van &rkward;.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>R_min_version, R_max_version</term>
	<listitem
><para
>Toegestane maximum- en minimumversies van &R;. Versie-specificaties kunnen <emphasis
>niet</emphasis
> -numerieke toevoegingen hebben, zoals  "0.5.7z-devel1". De afhankelijkheid van de &R;-versie wordt getoond in de help-pagina's van de plugin, maar heeft vanaf &rkward; 0.6.1 geen direct effect.<link linkend="sect_dependencies_r_version"
>Meer informatie</link
>. Optioneel; indien niet opgegeven, zijn er geen minimum / maximum versies  vereist van &R;.</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Child elementen: (een child is een voortzetting van een parent. Dit soort  termen zijn algemeen in een moderne computertaal)</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;package&gt;  (pakket)</term>
	<listitem
><para
>Voegt een afhankelijkheid (dependency) toe van een opgegeven &R;-pakket. Attributen: <variablelist>
		<varlistentry>
		<term
>naam</term>
		<listitem
><para
>Pakketnaam (vereist)</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>min_version, max_version</term>
		<listitem
><para
>Minimum / maximum toegestane versie (optioneel).</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>repository</term>
		<listitem
><para
>Repository waarin het programma kan worden gevonden. Optioneel, maar hoogst gewenst, indien het pakket niet op CRAN beschikbaar is.</para
></listitem>
		</varlistentry>
		</variablelist>
	</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;pluginmap&gt;</term>
	<listitem
><para
>Voegt een afhankelijkheid toe van een specifieke &rkward; &pluginmap;. Attributen: <variablelist>
		<varlistentry>
		<term
>naam</term>
		<listitem
><para
>Id-string (naamstring) van de vereiste &pluginmap; (vereist).</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>min_version, max_version</term>
		<listitem
><para
>Minimum / maximum toegestane versie (optioneel).</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>url</term>
		<listitem
><para
>&URL; waar de  &pluginmap; kan worden gevonden. Vereist.</para
></listitem>
		</varlistentry>
		</variablelist>
	</para
></listitem>
	</varlistentry>
	</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term
>&lt;about&gt;  (over)</term>
<listitem
><para
>Kan precies een keer aanwezig zijn als een directe child van het &lt;document&gt;- element. Bevat meta-informatie over de &pluginmap; (of plugin). Zie het  <link linkend="chapter_about_information"
>hoofdstuk ' over' informatie</link
> voor een overzicht. Attributen:</para>
	<variablelist>
	<varlistentry>
	<term
>naam</term>
	<listitem
><para
>Naam zichtbaar voor de gebruiker. Optioneel. Hoeft niet gelijk te zijn aan de "id".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>versie</term>
	<listitem
><para
>Versienummer. Optioneel. Er zijn geen beperkingen voor het formaat, maar voor de zekerheid kunt u de algemene versieschema's gebruiken, zoals "x.y.z".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>releasedate  (datum van uitgifte)</term>
	<listitem
><para
>pecificatie van de uitgiftedatum. Optionele formaat is "YYYY-MM-DD" (JJJJ-MM-DD)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>shortinfo  (korte informatie)</term>
	<listitem
><para
>Een <emphasis
>korte</emphasis
> beschrijving van de plugin / &pluginmap;. Optioneel.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>url</term>
	<listitem
><para
>&URL; waar meer informatie kan worden gevonden. Optioneel, maar aanbevolen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>copyright</term>
	<listitem
><para
>Copyright-specificatie, &eg; "2012-2013 door Pietje Puk". Optioneel, maar aanbevolen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>licentie</term>
	<listitem
><para
>Licentiegegevens, &eg; "GPL" of "BSD". Zorg ervoor dat u bij uw bestanden een complete kopie toevoegt van de erbij horende licentie! Optioneel, maar aanbevolen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>categorie</term>
	<listitem
><para
>Categorie van de plugin(s), &eg; "Item response theorie". Vanaf &rkward; 0.6.1. worden geen categorieën vooraf gedefinieerd. Optioneel.</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Child elementen: (een child is een voortzetting van een parent. Dit soort  termen zijn algemeen in een moderne computertaal)</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;author&gt;  (auteur)</term>
	<listitem
><para
>Voegt informatie toe over een auteur. Attributen: <variablelist>
		<varlistentry>
		<term
>naam, voornaam, familienaam</term>
		<listitem
><para
>Geef de volledige naam op voor <parameter
>naam</parameter
>, of geef de <parameter
>voornaam </parameter
> en de <parameter
>familienaam</parameter
>, apart op.</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>rol</term>
		<listitem
><para
>Beschrijving rol van de auteur (optioneel)</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>e-mail</term>
		<listitem
><para
>E-mail adres van de auteur. Vereist. Kan een rkward-devel mailing list adres zijn, als u er op bent ingeschreven, en uw plugin in de officiële &rkward; uitgave moet worden opgenomen.</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>url</term>
		<listitem
><para
>&URL; met nadere informatie over de auteur, &eg; homepage (optioneel).</para
></listitem>
		</varlistentry>
		</variablelist>
	</para
></listitem>
	</varlistentry>
	</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term
>&lt;components&gt;</term>
<listitem
><para
>Moet precies één keer aanwezig zijn als een directe child van het &lt;document&gt;-element. Bevat de afzonderlijke &lt;component&gt;-elementen zoals hieronder beschreven.Geen attributen.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;component&gt;</term>
<listitem
><para
>Een of meer &lt;component&gt;-elementen moeten worden gegeven als directe children van het &lt;componenten&gt;-element (en alleen daar). Registreert een component/plugin met rkward. Attributen: <variablelist>
	<varlistentry>
	<term
>type</term>
	<listitem
><para
>Voor toekomstige uitbreiding: Het type van component/plugin. Zet deze voorlopig steeds op "standaard" (het enige ondersteunde type).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>De ID (naam) waarmee deze component kan worden opgehaald (om die in het menu te plaatsen (zie onder), of voor inbedding). Zie &lt;document&gt;-namespace boven.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>bestand</term>
	<listitem
><para
>Tenminste vereist voor componenten van het type="standard": de bestandsnaam van het &XML;-bestand dat de &GUI; beschrijft.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>label</term>
	<listitem
><para
>De naam voor deze component, wanneer die in de menu-hiërarchie wordt geplaatst.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;attribute&gt;  (attribuut)</term>
<listitem
><para
>Definieert een attribuut van een component. Tot nu toe allen van betekenis voor <link linkend="context_import"
>importeren van plugins</link
>. Alleen toegestaan als een directe child van  &lt;component&gt;. Attributen: <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Id (naam) van het attribuut</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>waarde</term>
	<listitem
><para
>Waarde van het attribuut</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>labels</term>
	<listitem
><para
>Naam behorende bij het attribuut</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;hierarchy&gt;  (hiërarchie)</term>
<listitem
><para
>Moet precies een keer aanwezig zijn als een directe child van het &lt;document&gt;-element. Beschrijft waar de hierboven gedeclareerde componenten moeten worden geplaatst in de menu-hiërarchie. Accepteert alleen &lt;menu&gt;-elementen als directe children. Geen attributen.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;menu&gt;</term>
<listitem
><para
>Een of meer &lt;menu&gt;-elementen moeten worden gegeven als directe children van het &lt;hierarchy&gt; element. Declareert een nieuw (sub)menu. Indien er al een menu bestaat met de opgegeven ID (zie onder), worden de twee menu's samengevoegd (merged). Het &lt;menu&gt;-element is toegestaan zowel als een directe child van het &lt;hierarchy&gt;-element (topniveau menu), of als de directe child van elk ander &lt;menu&gt;-element (submenu). Omgekeerd, accepteert het &lt;menu&gt;-element andere &lt;menu&gt;-elementen of &lt;ingangs&gt; (entry)-elementen als children. Attributen: <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Een identificerende string van het menu. Nuttig wanneer menudefinities worden gelezen uit verschillende &pluginmap;-bestanden, zodat zeker is dat plugins in het zelfde menu kunnen worden opgenomen. Sommige menu-namen, zoals "bestand" refereren aan bestaande menu's (in dit geval het "Bestand"-menu). Zorg ervoor dat bestaande &pluginmap;-bestanden hiermee consistente namen hebben.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>label</term>
	<listitem
><para
>Een naam voor het menu.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>groep</term>
	<listitem
><para
>Maakt het ordenen mogelijk van menu-ingangen. Zie <link linkend="pluginmap_grouping"
>Ordenen menu-ingangen</link
>. Optioneel.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;entry&gt;  (ingang)</term>
<listitem
><para
>Een menu-ingang, &ie; een menu-optie voor het aanroepen van een plugin. Kan alleen worden gebruikt als een directe child van een  &lt;menu&gt;-element, en accepteert geen child-elementen (onderliggende elementen). Attributen: <variablelist>
	<varlistentry>
	<term
>component</term>
	<listitem
><para
>De ID (naam) van de component die moet worden aangeroepen, wanneer deze menu-ingang wordt geactiveerd.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>groep</term>
	<listitem
><para
>Maakt het ordenen mogelijk van menu-ingangen. Zie <link linkend="pluginmap_grouping"
>Ordenen menu-ingangen</link
>. Optioneel.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;group&gt;   (groep)</term>
<listitem
><para
>Declareert een groep van ingangen in het menu. Zie <link linkend="pluginmap_grouping"
>Ordenen menu-ingangen</link
>. Attributes: <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>De naam van deze groep.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>gescheiden</term>
	<listitem
><para
>Optioneel. Indien ingesteld op "true" wordt de item van deze groep visueel gescheiden van de omringende items.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>groep</term>
	<listitem
><para
>De naam van de groep die aan deze groep moet worden gegeven (optioneel).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;context&gt;</term>
<listitem
><para
>Declareert de ingangen in een <link linkend="contextualized_plugins"
>context</link
>. Alleen toegestaan als een directe child van de &lt;document&gt;-tag. Accepteert alleen &lt;menu&gt;-tags als directe children. Attributen: <variablelist
> <varlistentry>
	<term
>id</term>
	<listitem
><para
>De ID (naam) van de context. Tot dusver zijn slechts twee contexts geïmplementeerd: "x11" en "import".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;require&gt;  (vereisen)</term>
<listitem
><para
>Een andere &pluginmap;-bestand insluiten. Dit &pluginmap;-bestand wordt slechts een keer ingelezen, zelfs als het  voor verschillende andere bestanden &lt;require&gt;d is. Het belangrijkste voorbeeld hiervan is het opnemen van een pluginmap-bestand waarin componenten worden gedeclareerd, die ingebed zijn in componenten gedeclareerd in deze &pluginmap;. &lt;require&gt;d elementen zijn alleen toegestaan als directe children van de &lt;document&gt;-node. Attributen: <variablelist>
	<varlistentry>
	<term
>bestand</term>
	<listitem
><para
>De bestandsnaam van de op te nemen &pluginmap;. Deze is relatief ten opzichte van de directory van het huidige &pluginmap;-bestand + de base_prefix (zie boven, &lt;document&gt;-element).Indien u het relatieve pad naar de op te nemen &pluginmap; niet kent, verwijst u in plaats daarvan naar de naam in het <parameter
>map</parameter
>-attribuut.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>map</term>
	<listitem
><para
>U kunt een &pluginmap;-bestand uit een ander pakket opnemen (of een &rkward; &pluginmap; uit uw externe &pluginmap;), door er naar te verwijzen met zijn <replaceable
>namespacename::id</replaceable
>, zoals opgegeven in het vereiste &pluginmap;s &lt;document&gt;-element. Dit zal niet lukken indien geen&pluginmap; met die naam bekend is (&eg; niet op uw systeem is geïnstalleerd). u mag dit alleen doen voor &pluginmap;s die niet in uw pakket aanwezig zijn. Voor maps in uw pakket,is het opgeven van een relatief pad (<parameter
>file</parameter
> attribuut) sneller en betrouwbaarder. </para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="helpfileelements"
><title
>Te gebruiken elementen in .rkh (help) bestanden</title>
<variablelist>
<varlistentry>
<term
>&lt;document&gt;</term>
<listitem
><para
>Moet aanwezig zijn in elk <literal role="extension"
>.xml</literal
>-bestand als de root-node (precies een keer). Geen attributen.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;title&gt;</term>
<listitem
><para
>Titel van de help-pagina. Dit geldt <emphasis
>niet</emphasis
> voor help-pagina's van een plugin (die krijgen de titel van de plugin zelf), alleen voor afzonderlijke pagina's. Geen attributen. De tekst opgenomen in de &lt;title&gt;-tag wordt de koptekst van de help-pagina. Mag alleen één keer worden gedefinieerd, als een directe child van de  &lt;document&gt;-node.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;summary&gt;  (samenvatting)</term>
<listitem
><para
>Een korte samenvatting van de help-pagina (of waarvoor deze plugin wordt gebruikt). Dit is altijd zichtbaar bovenin de help-pagina. Geen attributen. De tekst in de  &lt;summary&gt;-tag wordt getoond. Aanbevolen, maar niet vereist. Mag alleen maar een keer worden gedefinieerd, als een directe child van de  &lt;document&gt;-node.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;usage&gt;  (gebruik)</term>
<listitem
><para
>Een ietwat meer uitvoerige samenvatting van het gebruik. Dit wordt altijd getoond direct na de &lt;summary&gt;. Geen attributen. De tekst in de  &lt;usage&gt;-tag wordt getoond. Aanbevolen voor de help-pagina's van plugins, maar niet vereist.  Mag alleen maar één keer worden gedefinieerd, als een directe child van de  &lt;document&gt;-node.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;section&gt;  (sectie)</term>
<listitem
><para
>Een sectie voor alles. Kan elk aantal keren worden gebruikt als een directe child van de &lt;document&gt;-node. Deze secties worden getoond in de volgorde waarin ze zijn gedefinieerd, maar alle <emphasis
>na</emphasis
> de sectie &lt;usage&gt; en <emphasis
>voor</emphasis
> de sectie &lt;settings&gt;. De tekst in de &lt;section&gt;-tag wordt getoond. <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Er is een identifier (naam) nodig om naar deze sectie te gaan vanuit de navigatiebalk (of een link). Moet binnen het bestand uniek zijn. Vereist, geen standaard.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>titel</term>
	<listitem
><para
>De titel (kop) van deze sectie. Vereist, geen standaard.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>short_title</term>
	<listitem
><para
>Een korte titel is handig voor het tonen in de navigatiebalk. Optioneel, standaard is de volledige titel.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;settings&gt;  instellingen)</term>
<listitem
><para
>Definieert de sectie die de verwijzing (referentie) bevat naar de diverse &GUI;-instellingen. Alleen van nut en alleen gebruikt voor help-pagina's bij plugins. Gebruik als een directe child van het &lt;document&gt;. Kan alleen &lt;setting&gt; en &lt;caption&gt;-elementen bevatten als directe children. Geen attributen.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;setting&gt;  (instellingen)</term>
<listitem
><para
>Verklaart een enkele instelling in de &GUI;. Alleen toegestaan als een directe child van het &lt;settings&gt;-element. De tekst in het element wordt getoond. <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>De ID (naam) van de instelling in de <literal role="extension"
>.xml</literal
> van de plugin. Vereist, geen standaard.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>titel</term>
	<listitem
><para
>Een optionele titel voor de instelling. Indien weggelaten (dit wordt in de meeste gevallen aangeraden), wordt de titel gelezen in de <literal role="extension"
>.xml</literal
> van de plugin.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;caption&gt;  (koptekst)</term>
<listitem
><para
>Een koptekst waarmee een aantal instellingen zichtbaar in groepen wordt verdeeld. Mag alleen worden gebruikt als een directe child van het &lt;settings&gt;-element. <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>De ID (naam) van het overeenkomende element (typisch een &lt;frame&gt;, &lt;page&gt; of &lt;tab&gt;) in de <literal role="extension"
>.xml</literal
> van de plugin.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>titel</term>
	<listitem
><para
>Een optionele titel voor de koptekst. Indien weggelaten (dit wordt in de meeste gevallen aangeraden), wordt de titel gelezen in de <literal role="extension"
>.xml</literal
> van de plugin.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;related&gt;  (gerelateerd)</term>
<listitem
><para
>Definieert een sectie die links bevat naar verdere informatie. Wordt altijd getoond na de sectie &lt;settings&gt;. Geen attributen. De tekst in de &lt;related&gt;-tag wordt getoond. Gewoonlijk bevat die een &HTML;-stijl-lijst.Aanbevolen voor help-pagina's van plugins, maar niet vereist. Mag alleen één keer worden gedefinieerd, als een directe child van de &lt;document&gt;-node.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;technical&gt;</term>
<listitem
><para
>Definieert een sectie met technische informatie die niet bestemd is voor eindgebruikers (zoals de interne structuur van een plugin). Wordt altijd als laatste getoond in een help-pagina. Geen attributen. De tekst in de &lt;related&gt;-tag wordt getoond. Niet vereist, en niet aanbevolen voor de meeste help-pagina's van plugins. Mag alleen één keer worden gedefinieerd, als een directe child van de &lt;document&gt;-node.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;link&gt;  (koppeling)</term>
<listitem
><para
>Een koppeling. Kan in elk van de hierboven beschreven secties worden gebruikt. <variablelist
> <varlistentry>
	<term
>href</term>
	<listitem
><para
>De doel-&URL;. Merk op dat diverse &rkward;-specifieke &URL;s beschikbaar zijn. Zie verder de <link linkend="pluginhelp"
>sectie voor schrijven help-pagina's</link
></para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;label&gt;  (naamtekst)</term>
<listitem
><para
>Voegt de waarde in van een UI-naam. Kan in elk van de hierboven beschreven secties worden gebruikt. <variablelist
> <varlistentry>
	<term
>id</term>
	<listitem
><para
>De id (naam) van het element in de plugin, waarvan het<replaceable
>label</replaceable
>-attribuut wordt gekopieerd.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;various html tags&gt; (diverse &HTML;-tags)</term>
<listitem
><para
>In de secties worden de meeste basis &HTML;-tags toegestaan. Maar gebruik zelf formatteren zo weinig mogelijk.</para
></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="guilogic_functions"
><title
>Functies die in logische scripts voor de &GUI; kunnen worden gebruikt</title>
<variablelist>
<varlistentry
><term
>Class "Component"  (Class: onvertaalbaar,  is een woord in de programmeertaal)</term>
<listitem
><para
>Class voor een enkele component of component-eigenschap. De belangrijkste instance (niet goed onvertaalbaar, variabele van deze class) hiervan is de variabele "gui" die al is gedefinieerd als de root-eigenschap van de huidige component. Voor instances van de class "Component" zijn de meeste volgende methods (functies) beschikbaar: <variablelist>
	<varlistentry
><term
>absoluteId(base_id)</term
><listitem
><para
>Geeft de absolute ID terug van <emphasis
>base_id</emphasis
>, of - als base_id is weggelaten - de identificerende naam van de component.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getValue(id)</term
><listitem
><para
>Afgeraden. Gebruik in plaats hiervan de functies <function
>getString(), getBoolean(), of getList()</function
>. Geeft de waarde terug van de gegeven child-eigenschap. Geeft de waarde terug  van deze eigenschap, als ID wordt weggelaten.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getString(id)</term
><listitem
><para
>Geeft de waarde terug als een string van de gegeven child-eigenschap.  Geeft de waarde terug van deze eigenschap, als ID wordt weggelaten.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getBoolean(id)</term
><listitem
><para
>Geeft de waarde terug als een boolean van de gegeven child-eigenschap (indien mogelijk).  Geeft de waarde terug van deze eigenschap, als ID wordt weggelaten.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getList(id)</term
><listitem
><para
>Geeft de waarde terug (indien mogelijk) als een array van strings van de gegeven child-eigenschap.  Geeft de waarde terug van deze eigenschap, als ID wordt weggelaten.</para
></listitem
></varlistentry>
	<varlistentry
><term
>setValue(id, waarde)</term
><listitem
><para
>Stelt de waarde van de gegeven child-eigenschap in op  <emphasis
>waarde</emphasis
>.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getChild(id)</term
><listitem
><para
>Geeft een instance (variabele) terug van de child-eigenschap met de gegeven <emphasis
>id</emphasis
> (naam).</para
></listitem
></varlistentry>
	<varlistentry
><term
>addChangeCommand(id, opdracht)</term
><listitem
><para
>Doe de <emphasis
>opdracht</emphasis
>, steeds wanneer de child-eigenschap gegeven door <emphasis
>id</emphasis
> wordt gewijzigd.</para
></listitem
></varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry
><term
>Class "RObject"</term>
<listitem
><para
>Class voor een enkel &R; object. Een instance (variabele) van deze class kunt u krijgen met <command
>makeRObject(objectnaam)</command
>. De volgende methods (functies) in een class) zijn beschikbaar voor instances van de class "RObject": <warning
><para
>Als er in de backend nog opdrachten wachten, kan de door deze methods geleverde informatie verouderd zijn tegen de tijd dat de plugin-code wordt gestart. Vertrouw er <emphasis
>niet</emphasis
> op bij kritieke bewerkingen (kans op verlies van gegevens).</para
></warning>
	<variablelist>
	<varlistentry
><term
>getName()</term
><listitem
><para
>Geeft de absolute naam terug van het object.</para
></listitem
></varlistentry>
	<varlistentry
><term
>exists()</term
><listitem
><para
>Geeft terug of het object bestaat. In het algemeen moet u dit controleren voordat u een van de onderstaande methoden gebruikt.</para
></listitem
></varlistentry>
	<varlistentry
><term
>dimensions()</term
><listitem
><para
>Geeft een array van dimensies terug (net zoals <command
>dim()</command
> in R).</para
></listitem
></varlistentry>
	<varlistentry
><term
>classes()</term
><listitem
><para
>Geeft een array van classes terug (net zoals <command
>class()</command
> in R).</para
></listitem
></varlistentry>
	<varlistentry
><term
>isClass(class)</term
><listitem
><para
>Geeft true terug, als het object een class <emphasis
>class</emphasis
>-object is.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataFrame()</term
><listitem
><para
>Geeft true terug als het object een data.frame is.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isMatrix()</term
><listitem
><para
>Geeft true terug als het object een matrix is.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isList()</term
><listitem
><para
>Geeft true terug als het object een list is.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isFunction()</term
><listitem
><para
>Geeft true terug als het object een functie is.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isEnvironment()</term
><listitem
><para
>Geeft true terug als het object een environment (omgeving) is.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataNumeric()</term
><listitem
><para
>Geeft true terug als het object een vector is met numerieke gegevens (getallen).</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataFactor()</term
><listitem
><para
>Geeft true terug als het object een vector is met factorgegevens.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataCharacter()</term
><listitem
><para
>Geeft true terug als het object een vector is met karaktergegevens.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataLogical()</term
><listitem
><para
>Geeft true terug als het object een vector is met logische gegevens.</para
></listitem
></varlistentry>
	<varlistentry
><term
>parent()</term
><listitem
><para
>Geeft een instance (variabele) terug van "RObject" die de parent is van dit object.</para
></listitem
></varlistentry>
	<varlistentry
><term
>child(childnaam)</term
><listitem
><para
>Geeft een instance terug van "RObject" die de child <emphasis
>childnaam</emphasis
> is van dit object.</para
></listitem
></varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry
><term
>Class "RObjectArray"</term>
<listitem
><para
>Een array van instances (variabelen) van RObject. Een instance van deze class kunt u verkrijgen met <command
>makeRObjectArray(objectnamen)</command
>. Dit is in het bijzonder bruikbaar bij varslots die het mogelijk maken meerdere objecten te selecteren.</para
></listitem>
</varlistentry>
<varlistentry
><term
>include()-functie</term>
<listitem
><para
><command
>include(bestandsnaam)</command
> kan worden gebruikt voor het opnemen van een afzonderlijk JS-bestand.</para
></listitem>
</varlistentry>
<varlistentry
><term
>doRCommand()-functie</term>
<listitem
><para
><command
>doRCommand(opdracht, callback)</command
> kan worden gebruikt om aan &R;-informatie op te vragen. Lees de sectie <link linkend="querying_r_for_info"
>informatie van &R; opvragen vanuit een plugin</link
> voor details, en waarschuwingen.</para
></listitem>
</varlistentry>
</variablelist>
</sect1>

</appendix>

<appendix id="troubleshooting">
<title
>Problemen oplossen bij het ontwikkelen van een plugin</title>
<para
>U heeft dus alle documentatie gelezen, alles goed gedaan, en u kunt het nog steeds niet aan de gang krijgen? Wanhoop niet, we gaan er wat aan doen. Het eerste dat moet gebeuren is: activeer het venster van <guilabel
>&rkward; Debug berichten</guilabel
> (in het <guimenu
>Vensters</guimenu
> - menu, of rechtsklik op een van de taakbalken), en start uw plugin nog een keer op. In het algemeen gesproken zult u nu geen uitvoer zien in het berichtenvenster, wanneer de plugin wordt gestart, of op elk ander moment. Als die er toch is, is het waarschijnlijk dat uw plugin daar de oorzaak van is. Zie of die uitvoer u verder kan helpen. </para>
<para
>Indien alles er in de console goed uitziet, probeer dan de debug-level te verhogen (op de opdrachtregel doet u dit met <command
>rkward --debug-level 3</command
>, of door de debug level op 3 in te stellen in het menu <menuchoice
><guimenu
>Instellingen</guimenu
> <guimenuitem
>&rkward; instellen</guimenuitem
> <guimenuitem
>Debug</guimenuitem
></menuchoice
>). Niet alle berichten in de hogere debug levels duiden noodzakelijk op een probleem, maar mogelijk duikt uw probleem ergens in de berichten op. </para>
<para
>Indien u nog steeds niet kunt vinden wat er mis is, wanhoop dan niet. We weten dat dit lastig is, en - wie weet - mogelijk heeft u een bug in &rkward; gevonden, en is het &rkward; zelf dat moet worden gerepareerd. Schrijf ons op de development mailing list (in het Engels), en vertel ons wat uw probleem is. We zullen u graag helpen. </para>
<para
>Tenslotte, zelfs als u zelf de oplossing heeft gevonden, maar de documentatie onvoldoende vindt, of zelfs op sommige punten onjuist, wilt u dit dan alstublieft melden op deze mailing list, zodat we de documentatie kunnen verbeteren. </para>
</appendix>

<appendix id="license">
<title
>Licentie</title>
&meld.fouten;&vertaling.freek;&vertaling.jaap; 
&underFDL;
</appendix>

&documentation.index;
</book>
<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:
-->
