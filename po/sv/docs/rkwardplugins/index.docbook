<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN" "dtd/kdedbx45.dtd" [
  <!ENTITY rkward '<application
>RKWard</application
>'>
  <!ENTITY R '<application
>R</application
>'>
  <!ENTITY javascript 'JavaScript'>
  <!ENTITY pluginmap '<literal role="extension"
>.pluginmap</literal
>'>
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % Swedish "INCLUDE"
><!-- change language only here -->
  
  
  <!-- Do not define any other entities; instead, use the entities
       from kde-genent.entities and $LANG/user.entities. -->
]>

<book lang="&language;">

<!-- This header contains all of the meta-information for the document such
as Authors, publish date, the abstract, and Keywords -->

<bookinfo>
<title
>Introduktion till att skriva insticksprogram för &rkward;</title>

<authorgroup>
<author
><firstname
>Thomas</firstname
> <surname
>Friedrichsmeier</surname
> <affiliation
> <address
><email
>rkward-devel SNABELA kde PUNKT org</email
></address>
</affiliation>
</author>

<author
><firstname
>Meik</firstname
> <surname
>Michalke</surname
> <affiliation
> <address
><email
>rkward-devel SNABELA kde PUNKT org</email
></address>
</affiliation>
</author>
<!-- Additional authors go here -->

<othercredit role="translator"
> <firstname
>Stefan</firstname
> <surname
>Asserhäll</surname
> <affiliation
><address
><email
>stefan.asserhall@bredband.net</email
></address
></affiliation
> <contrib
>Översättare</contrib
></othercredit
> 
</authorgroup>



<copyright>
<year
>2006-2022</year>
<holder
>Thomas Friedrichsmeier</holder>
</copyright>
<!-- Translators: put here the copyright notice of the translation -->
<!-- Put here the FDL notice.  Read the explanation in fdl-notice.docbook 
     and in the FDL itself on how to use it. -->
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2022-04-24</date>
<releaseinfo
>0.7.4</releaseinfo>

<abstract>
<para
>Det här är en handledning för att skriva insticksprogram i &rkward;. </para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>R</keyword>
<keyword
>rkward</keyword>
<keyword
>insticksprogram</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Inledning</title>

	<para
>Det här dokumentet beskriver hur man skriver egna insticksprogram. Dokumentationen har växt sig stor med tiden. Låt inte det skrämma dig. Vi rekommenderar att läsa igenom de fyra grundstegen (enligt översikten nedan) för att få en grundidé om hur saker och ting fungerar. Därefter kanske du vill skumma igenom innehållsförteckningen för att se vilka avancerade ämnen som kan vara relevanta för dig. </para>
	<para
>För frågor och kommentarer, skriv gärna till &rkward;s e-postlista för utveckling. </para>
	<para
><emphasis
>Du behöver inte läsa det här för att använda &rkward;.</emphasis
> Dokumentet handlar om att utöka &rkward;. Det är riktat till avancerade användare eller personer som är villiga att hjälpa till att förbättra &rkward;. </para>
	<para
>Att skriva ett standardinsticksprogram är i grunden en process med fyra steg: </para>
		<itemizedlist>
			<listitem
><para
><link linkend="pluginmap"
>Placera en ny åtgärd i menyhierarkin</link
></para
></listitem>
			<listitem
><para
><link linkend="mainxml"
>Beskriva utseendet och beteendet hos insticksprogrammets grafiska användargränssnitt</link
></para
></listitem>
			<listitem
><para
><link linkend="jstemplate"
>Definiera hur R-kod ska skapas från inställningarna som användaren gör i det grafiska användargränssnittet</link
></para
></listitem>
			<listitem
><para
><link linkend="pluginhelp"
>Lägga till en hjälpsida för insticksprogrammet</link
></para
></listitem>
		</itemizedlist>
	<para
>De hanteras i tur och ordning. </para>
	<para
>Vissa avancerade koncept kan användas i de fyra stegen, men hanteras i separata kapitel för att hålla saker och ting enkla: <itemizedlist>
			<listitem
><para
><link linkend="logic"
>Logik för grafiskt användargränssnitt</link
></para
></listitem>
			<listitem
><para
><link linkend="embedding"
>Inbädda insticksprogram i insticksprogram</link
></para
></listitem>
			<listitem
><para
><link linkend="plugin_series"
>Användbara koncept för att skapa många serier av liknande insticksprogram</link
></para
></listitem>
		</itemizedlist>
	</para>
	<para
>Dessutom visar inga av kapitlen alla alternativ, utan bara grundkoncepten. En fullständig <link linkend="reference"
>referens</link
> av alternativ tillhandahålls separat. </para>
</chapter>

<chapter id="whatareplugins">
<title
>Förberedelse: Vad är insticksprogram i &rkward;? Hur fungerar de?</title>
	<para
>Den första frågan man kan ställa sig är naturligtvis: Vilka delar av &rkward;s funktionalitet åstadkoms genom att använda insticksprogram? Eller: Vad kan insticksprogram göra? </para>
	<para
>Ett sätt att svara på det är: Avmarkera alla &pluginmap;-filer under <menuchoice
><guimenu
>Inställningar</guimenu
><guimenuitem
>Anpassa &rkward;</guimenuitem
><guimenuitem
>Insticksprogram</guimenuitem
></menuchoice
>, och se vad som saknas. Ett något mer hjälpsamt svar: De flesta verkliga statistikfunktioner som kan kommas åt via det grafiska användargränssnittet är förverkligade med insticksprogram. Du kan också skapa ganska flexibla grafiska användargränssnitt för alla typer av operationer med insticksprogram. </para>
	<para
>Den grundläggande paradigmen bakom insticksprogram i &rkward; är den vi går igenom i det här dokumentet: En &XML;-fil beskriver hur det grafiska användargränssnittet ser ut. En ytterligare &javascript;-fil används för att skapa &R;-syntax från inställningarna i det grafiska användargränssnittet. Alltså behöver insticksprogram egentligen inte utföra några statistiska beräkningar. Istället skapar insticksprogram &R;-syntaxen som behövs för att utföra beräkningarna. &R;-syntaxen skickas sedan till &R;-bakgrundsprogrammet för utvärdering, och oftast visas ett resultat i utdatafönstret. </para>
	<para
>Läs vidare i följande kapitel för att se hur det görs. </para>
</chapter>

<chapter id="pluginmap">
<title
>Skapa menyalternativ</title>
	<para
>När ett nytt insticksprogram skapas, måste &rkward; få reda på det. Den första saken att göra är alltså att skriva en &pluginmap;-fil (eller ändra en befintlig). Formatet för en &pluginmap; är &XML;. Jag leder dig igenom ett exempel (försäkra dig också naturligtvis om att &rkward; är inställt att läsa in din &pluginmap; med <menuchoice
><guimenu
>Inställningar</guimenu
> <guimenuitem
>Anpassa &rkward;</guimenuitem
> <guimenuitem
>Insticksprogram</guimenuitem
></menuchoice
>): </para>
	<tip>
		<para
>Efter att ha läst det här kapitlet, ta också en titt på <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
>. Det tillhandahåller några &R;-funktioner för att skapa de flesta av &rkward;s &XML;-taggar åt dig. </para>
	</tip>
	<programlisting
>&lt;!DOCTYPE rkpluginmap&gt;
        </programlisting>
	<para
>Värdet doctype tolkas egentligen inte, men ställ in det till <replaceable
>"rkpluginmap"</replaceable
> ändå. </para>
	<programlisting
>&lt;document base_prefix="" namespace="myplugins" id="mypluginmap"&gt;
        </programlisting>
	<para
>Egenskapen <parameter
>base_prefix</parameter
> kan användas om alla insticksprogram befinner sig i en gemensam katalog. Då kan man därmed utelämna katalogen från filnamnen angivna nedan. Det är säkert att låta den vara <replaceable
>""</replaceable
>. </para
><para
>Som du kommer att märka nedan, får alla insticksprogram en unik identifierare, <parameter
>id</parameter
>. Att använda <parameter
>namespace</parameter
> är ett sätt att organisera sådana id, och göra det mindre troligt att duplicerade identifierare skapas av misstag. Internt läggs namnrymden följt av <quote
>::</quote
> till före alla identifierare som anges i en &pluginmap;. I allmänhet, om du avser att <link linkend="sect_external_plugins"
>distribuera dina insticksprogram i ett &R;-paket</link
>, är det en god idé att använda paketnamnet som parametern <parameter
>namespace</parameter
>. Insticksprogram som levereras med den officiella distributionen av &rkward; har <replaceable
>namespace="rkward"</replaceable
>. </para>
	<para
>Egenskapen <parameter
>id</parameter
> är valfri, men att ange id för din &pluginmap; gör det möjligt för andra att låta sina &pluginmap;:ar läsa in din &pluginmap; automatiskt (se <link linkend="chapter_dependencies"
>avsnittet om beroenden</link
>). </para>
	<programlisting
>&lt;components&gt;
        </programlisting>
	<para
>Komponenter? Talar vi inte om insticksprogram? Ja, men i framtiden kommer insticksprogram inte vara mer än en särskild klass av komponenter. Vad vi gör här är då att registrera alla komponenter/insticksprogram med &rkward;. Låt oss ta en titt på en exempelpost: </para>
	<programlisting
>&lt;component type="standard" id="t_test_two_vars" file="t_test_two_vars.xml" label="Two Variable t-Test" /&gt;
        </programlisting>
	<para
>Först egenskapen <parameter
>type</parameter
>: Lämna den som <replaceable
>"standard"</replaceable
> för tillfället. Ytterligare typer är inte implementerade ännu. Vi har redan nämnt <parameter
>id</parameter
>. Varje komponent måste ha en unik identifierare (i sin namnrymd). Välj en som är enkel att känna igen. Undvik mellanslag och specialtecken. De är hittills inte förbjudna, men kan ha särskilda betydelser. Med egenskapen <parameter
>file</parameter
> anger man var <link linkend="mainxml"
>beskrivningen av själva insticksprogrammet</link
> finns. Det är relativt till katalogen där &pluginmap;-filen finns, och till <parameter
>base_prefix</parameter
> ovan. Ge till sist komponenten en beteckning. Beteckningen var än insticksprogrammet placeras i menyn (eller i framtiden kanske också på andra ställen). </para>
	<para
>Typiskt innehåller &pluginmap;-filen flera komponenter, så här är några fler: </para>
	<programlisting
>&lt;component type="standard" id="unimplemented_test" file="means/unimplemented.xml" /&gt;
                &lt;component type="standard" id="fictional_t_test" file="means/ttests/fictional.xml" label="This is a fictional t-test" /&gt;
                &lt;component type="standard" id="descriptive" file="descriptive.xml" label="Descriptive Statistics" /&gt;
                &lt;component type="standard" id="corr_matrix" file="corr_matrix.xml" label="Correlation Matrix" /&gt;
                &lt;component type="standard" id="simple_anova" file="simple_anova.xml" label="Simple Anova" /&gt;
        &lt;/components&gt;
        </programlisting>
	<para
>OK, det var första steget. &rkward; känner nu till att insticksprogrammen finns. Men hur aktiverar man dem? De måste läggas till i en menyhierarki: </para>
	<programlisting
>&lt;hierarchy&gt;
                &lt;menu id="analysis" label="Analysis"&gt;
        </programlisting>
	<para
>Direkt under taggen <command
>&lt;hierarchy&gt;</command
> börjar man beskriva i vilken meny (<command
>&lt;menu&gt;</command
>) som insticksprogrammet ska finnas. Med raden ovan säger man att insticksprogrammet ska vara i menyn <menuchoice
><guimenu
>Analysis</guimenu
></menuchoice
> (inte nödvändigtvis direkt i den, utan i en undermeny). Menyn <menuchoice
><guimenu
>Analysis</guimenu
></menuchoice
> är standard i &rkward;, så den behöver i själva verket inte skapas från början. Om den dock inte fanns ännu, skulle egenskapen <parameter
>label</parameter
> användas för att ge den sitt namn. Till sist, identifierar återigen <parameter
>id</parameter
> den här menyn (<command
>&lt;menu&gt;</command
>). Det behövs så att flera &pluginmap;-filer kan placera sina insticksprogram i samma menyer. De gör det genom att leta efter en meny (<command
>&lt;menu&gt;</command
>) med angivet <parameter
>id</parameter
>. Om id inte ännu finns, skapas en ny meny. Annars läggs alternativen till i den befintliga menyn. </para>
	<programlisting
>&lt;menu id="means" label="Means"&gt;
        </programlisting>
	<para
>Egentligen samma sak här: Nu definierar vi en undermeny i menyn <menuchoice
><guimenu
>Analysis</guimenu
></menuchoice
>. Den ska heta <menuchoice
><guimenuitem
>Means</guimenuitem
></menuchoice
>. </para>
	<programlisting
>&lt;menu id="ttests" label="t-Tests"&gt;
        </programlisting>
	<para
>Och en sista nivå i menyhierarkin: En undermeny i undermenyn <menuchoice
><guimenuitem
>Väntevärden</guimenuitem
></menuchoice
>. </para>
	<programlisting
>&lt;entry component="t_test_two_vars" /&gt;
        </programlisting>
	<para
>Nu till sist är det menyn vi vill placera insticksprogrammet i. Taggen <command
>&lt;entry&gt;</command
> signalerar att det här är det verkliga värdet istället för en annan undermeny. Egenskapen <parameter
>component</parameter
> refererar till <parameter
>id</parameter
> som angavs i insticksprogrammet/komponenten ovan. </para>
	<programlisting
>&lt;entry component="fictional_t_test" /&gt;
                                &lt;/menu&gt;
                                &lt;entry component="fictional_t_test" /&gt;
                        &lt;/menu&gt;
                        &lt;menu id="frequency" label="Frequency" index="2"/&gt;
        </programlisting>
	<para
>Om du har förlorat spåret: Det är en annan undermeny i menyn <menuchoice
><guimenu
>Analys</guimenu
></menuchoice
>. Se skärmbilden nedan. Vi hoppar över en del av det som inte syns, markerat med [...]. </para>
	<programlisting
>[...]
                        &lt;/menu&gt;
                        &lt;entry component="corr_matrix"/&gt;
                        &lt;entry component="descriptive"/&gt;
                        &lt;entry component="simple_anova"/&gt;
                &lt;/menu&gt;
        </programlisting>
	<para
>De är de slutliga alternativen synliga på skärmbilden nedan. </para>
	<programlisting
>&lt;menu id="plots" label="Plots"&gt;
                        [...]
                &lt;/menu&gt;
        </programlisting>
	<para
>Det går naturligtvis också att placera insticksprogrammen i andra menyer än <menuchoice
><guimenu
>Analys</guimenu
></menuchoice
>. </para>
	<programlisting
>&lt;menu id="file" label="File"&gt;
                        [...]
                &lt;/menu&gt;
        </programlisting>
	<para
>Till och med i standardmenyer såsom <menuchoice
><guimenu
>Arkiv</guimenu
></menuchoice
>. Allt som behövs är rätt <parameter
>id</parameter
>. </para>
	<programlisting
>&lt;/hierarchy&gt;        
&lt;/document&gt;
        </programlisting>
	<para
>Det är så man gör, och skärmbilden visar resultatet: </para>
	<screenshot>
	<screeninfo
>Menyhierarki skapad av koden som visas ovan</screeninfo>
		<mediaobject>
		<imageobject>
			<imagedata fileref="menu_hierarchy_example.png" format="PNG"/>
		</imageobject>
		<textobject>
			<phrase
>Menyhierarki skapad av koden som visas ovan</phrase>
		</textobject>
		</mediaobject>
	</screenshot>
	<para
>Förvirrad? Det enklaste sättet att komma igång är troligen att ta några av de befintliga &pluginmap;-filerna som levereras med distributionen och ändra dem enligt dina behov. Dessutom, om du behöver hjälp, tveka inte att skriva till utvecklarnas e-postlista. </para>
	<sect1 id="pluginmap_grouping"
><title
>Bestämma menyalternativens ordning</title>
		<para
>Normalt sorteras automatiskt alla poster (alternativ, undermenyer) alfabetiskt inne i en meny. I <emphasis
>vissa</emphasis
> fall kan man vilja ha bättre kontroll. I sådana fall kan man gruppera element enligt det följande:</para>
		<itemizedlist>
			<listitem>
				<para
>Det går att definiera grupper i vilken meny som helst så här. Alla element som hör till samma grupp kommer att grupperas ihop:</para>
				<programlisting
>&lt;group id="somegroup"/&gt;
                                </programlisting>
			</listitem
><listitem>
			<para
>Om gruppen ska vara visuellt separerad från andra alternativ, använd:</para>
				<programlisting
>&lt;group id="somegroup" separated="true"/&gt;
                                </programlisting>
			</listitem
><listitem>
				<para
>Alternativ, menyer och grupper kan läggas till sist i en angiven grupp genom att använda:</para>
				<programlisting
>&lt;entry component="..." group="somegroup"/&gt;
                                </programlisting>
			</listitem
><listitem>
				<para
>Det är i själva verket också möjligt att definiera grupper (utan avskiljande linjer) implicit:</para>
				<programlisting
>&lt;entry component="first" group="a"/&gt;
                &lt;entry component="third"/&gt;
                &lt;entry component="second" group="a"/&gt;
                                </programlisting>
			</listitem
><listitem>
				<para
>Gruppnamn är specifika för varje meny. Grupp "a" i menyn "Data" ger exempelvis ingen konflikt med grupp "a" i menyn "Analys".</para>
			</listitem
><listitem>
				<para
>Det vanligaste användarfallet är att definiera grupper längst upp eller längst ner i en meny. De fördefinierade grupperna "top" och "bottom" finns i alla menyer för det.</para>
			</listitem
><listitem>
				<para
>Poster inom varje grupp sorteras alfabetiskt. Grupper visas i den ordning de deklareras (om de inte läggs till sist i en annan grupp naturligtvis).</para>
			</listitem
><listitem>
				<para
>Menyer och alternativ utan gruppspecifikation utgör också logiskt en grupp ("").</para>
			</listitem>
		</itemizedlist>
	</sect1>
</chapter>

<chapter id="mainxml">
<title
>Definiera det grafiska användargränssnittet</title>
<sect1 id="sect_defining_the_GUI"
><title
>Definiera en dialogruta</title>
	<para
>I <link linkend="pluginmap"
>föregående kapitel</link
> har du sett hur man registrerar ett insticksprogram i &rkward;. Den viktigaste ingrediensen är att ange sökvägen till en &XML;-fil med en beskrivning av hur insticksprogrammet faktiskt ser ut. I detta kapitel lär du dig hur &XML;-filen skapas. </para>
	<tip>
		<para
>Efter att ha läst det här kapitlet, ta också en titt på <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
>. Det tillhandahåller några &R;-funktioner för att skapa de flesta av &rkward;s &XML;-taggar åt dig. </para>
	</tip>
	<para
>Återigen leder vi dig genom ett exempel. Exemplet är en (något förenklad) version av en tvåvariablers t-test. </para>
	<programlisting
>&lt;!DOCTYPE rkplugin&gt;
        </programlisting>
	<para
>Värdet doctype tolkas egentligen inte, ännu. Ställ in det till <replaceable
>rkplugin</replaceable
> ändå. </para>
	<programlisting
>&lt;document&gt;
        &lt;code file="t_test_two_vars.js"/&gt;
        </programlisting>
	<para
>Alla insticksprogram genererar någon kod. För närvarande är det enda sättet att göra det att använda JS, som beskrivs i detalj i <link linkend="jstemplate"
>nästa kapitel</link
>. Det här definierar var JS-koden kan hittas. Filnamnet är relativt katalogen som insticksprogrammets &XML; finns i. </para>
	<programlisting
>&lt;help file="t_test_two_vars.rkh"/&gt;
        </programlisting>
	<para
>Det är oftast en god idé att också tillhandahålla en hjälpsida för insticksprogrammet. Filnamnet på hjälpsidan anges här, relativt till katalogen där insticksprogrammets &XML;-fil finns. Att skriva hjälpsidor är dokumenterat <link linkend="pluginhelp"
>här</link
>. Utelämna raden om du inte tillhandahåller en hjälpfil. </para>
	<programlisting
>&lt;dialog label="Two Variable t-Test"&gt;
        </programlisting>
	<para
>Som du känner till, kan insticksprogram antingen ha ett dialog- eller guidegränssnitt, eller båda. Här börjar vi definiera ett dialoggränssnitt. Egenskapen <parameter
>label</parameter
> anger dialogrutans rubrik. </para>
	<programlisting
>&lt;tabbook&gt;
                        &lt;tab label="Basic settings"&gt;
        </programlisting>
	<para
>Element i det grafiska användargränssnittet kan organiseras med en flikbok. Här definierar vi en flikbok som det första elementet i dialogrutan. Använd <command
>&lt;tabbook&gt;</command
>[...]<command
>&lt;/tabbook&gt;</command
> för att definiera flikboken och använd därefter <command
>&lt;tab&gt;</command
>[...]<command
>&lt;/tab&gt;</command
> för varje sida i flikboken. Egenskapen <parameter
>label</parameter
> i elementet <command
>&lt;tab&gt;</command
> låter dig ange en rubrik för den sidan i flikboken. </para>
	<programlisting
>&lt;row id="main_settings_row"&gt;
        </programlisting>
	<para
>Taggarna <command
>&lt;row&gt;</command
> och <command
>&lt;column&gt;</command
> anger utläggningen av elementen i det grafiska användargränssnittet. Här talar du om att du vill placera några element sida vid sida (vänster till höger). Egenskapen <parameter
>id</parameter
> är inte helt nödvändig, men vi använder den senare när vi lägger till ett guidegränssnitt i vårt insticksprogram. Det första elementet att placera i raden är: </para>
	<programlisting
>&lt;varselector id="vars"/&gt;
        </programlisting>
	<para
>Genom att använda den här enkla taggen skapar du en lista där användaren kan välja variabler. Du måste ange en <parameter
>id</parameter
> för elementet så att &rkward; vet hur man hittar det. </para>
	<warning>
		<para
>Det går inte att använda en punkt (.) i strängen <parameter
>id</parameter
>. </para>
	</warning>
	<programlisting
>&lt;column&gt;
        </programlisting>
	<para
>Därefter nästlar vi en kolumn, <command
>&lt;column&gt;</command
>, inne i raden. Det vill säga att följande element placeras ovanpå varandra (uppifrån och ner), och alla är till höger om <command
>&lt;varselector&gt;</command
>. </para>
	<programlisting
>&lt;varslot types="number" id="x" source="vars" required="true" label="compare"/&gt;
                                                &lt;varslot types="number" id="y" source="vars" required="true" label="against" i18n_context="compare against"/&gt;
        </programlisting>
	<para
>De här elementen är motsvarigheten till <command
>&lt;varselector&gt;</command
>. De representerar <quote
>platser</quote
> där användaren kan placera variabler. Observera att <parameter
>source</parameter
> tilldelas samma värde som <parameter
>id</parameter
> i <command
>&lt;varselector&gt;</command
>. Det betyder att varje <command
>&lt;varslot&gt;</command
> tar sina variabler från en varselector. Varje <command
>&lt;varslot&gt;</command
> måste också ges en <parameter
>id</parameter
>. De kan ha en <parameter
>label</parameter
>, och de kan sättas till <parameter
>required</parameter
>. Det betyder att knappen <guibutton
>Submit</guibutton
> inte aktiveras förrän dess <command
>&lt;varslot&gt;</command
> har ett giltigt värde. Till sist tolkas inte egenskapen <parameter
>type</parameter
> ännu, men den kommer att användas för att försäkra att bara korrekta typer av variabler tillåts i en <command
>&lt;varslot&gt;</command
>. </para>
	<para
>Om du undrar över egenskapen <parameter
>i18n_context</parameter
>, finns den för att ge sammanhang för att hjälpa till att översätta ordet "against" på ett riktigt sätt, använt som rubrik för <command
>&lt;varslot&gt;</command
>, men det påverkar inte insticksprogrammets funktionalitet. Mer om det i <link linkend="i18n_general"
>ett separat kapitel</link
>. </para>
	<programlisting
>&lt;radio id="hypothesis" label="using test hypothesis"&gt;
                                                        &lt;option value="two.sided" label="Two-sided"/&gt;
                                                        &lt;option value="greater" label="First is greater"/&gt;
                                                        &lt;option value="less" label="Second is greater"/&gt;
                                                &lt;/radio&gt;
        </programlisting>
	<para
>Här definieras en grupp alternativknappar med <command
>&lt;radio&gt;</command
>. Gruppen har en rubrik, <parameter
>label</parameter
>, och en <parameter
>id</parameter
>. Varje knapp, <command
>&lt;option&gt;</command
>, har en rubrik, <parameter
>label</parameter
> och är tilldelad ett värde, <parameter
>value</parameter
>. Det är värdet som elementet <command
>&lt;radio&gt;</command
> returnerar när alternativet väljes. </para>
	<programlisting
>&lt;/column&gt;
                                &lt;/row&gt;
                        &lt;/tab&gt;
        </programlisting>
	<para
>Varje tagg måste avslutas. Vi har lagt till alla element vi vill ha (två <command
>&lt;varslots&gt;</command
> och <command
>&lt;radio&gt;</command
>) i kolumnen <command
>&lt;column&gt;</command
>. Vi har lagt till alla element vi ville (<command
>&lt;varselector&gt;</command
> och <command
>&lt;column&gt;</command
> med de här elementen) i raden <command
>&lt;row&gt;</command
>. Och vi har lagt till alla elementen vi ville på första sidan i flikboken <command
>&lt;tabbook&gt;</command
>. Vi är inte klara med att definiera flikboken <command
>&lt;tabbook&gt;</command
> ännu (fler sidor tillkommer), och naturligtvis tillkommer det också mer i dialogrutan <command
>&lt;dialog&gt;</command
>. Men den här skärmbilden visar i stort vad vi har gjort så här långt: </para>
	<screenshot>
	<screeninfo
>Insticksprogrammet t-test</screeninfo>
		<mediaobject>
		<imageobject>
			<imagedata fileref="t_test_plugin_example.png" format="PNG"/>
		</imageobject>
		<textobject>
			<phrase
>Insticksprogrammet t-test</phrase>
		</textobject>
		</mediaobject>
	</screenshot>
	<para
>Observera att vi inte har angivit knapparna <guibutton
>Skicka</guibutton
>, <guibutton
>Stäng</guibutton
>, etc. eller kodvyn. De här elementen genereras automatiskt. Men vi måste förstås också definiera den andra sidan i flikboken <command
>&lt;tabbook&gt;</command
>: </para>
	<programlisting
>&lt;tab label="Options"&gt;
                                &lt;checkbox id="varequal" label="assume equal variances" value=", var.equal=TRUE"/&gt;
        </programlisting>
	<para
>Normalt läggs element till uppifrån och ner som i en kolumn <command
>&lt;column&gt;</command
>. Eftersom det är vad vi vill här, behöver vi inte explicit ange radlayout med <command
>&lt;row&gt;</command
> eller kolumnlayout med <command
>&lt;column&gt;</command
>. Det första elementet vi definierar är en kryssruta. Precis som med <command
>&lt;radio&gt;</command
><command
>&lt;option&gt;</command
>, har kryssrutan en rubrik <parameter
>label</parameter
> och ett värde <parameter
>value</parameter
>. Värdet <parameter
>value</parameter
> är det som returneras om kryssrutan markeras. Naturligtvis behöver kryssrutan också ett <parameter
>id</parameter
>. </para>
	<programlisting
>&lt;frame label="Confidence Interval" id="frame_conf_int"&gt;
        </programlisting>
	<para
>Här är ytterligare ett layoutelement: För att signalera att de två elementen nedan hör ihop, ritar vi en ram <command
>&lt;frame&gt;</command
> (ruta). Ramen kan ha en rubrik <parameter
>label</parameter
>. Eftersom ramen bara är ett passivt layoutelement, behöver den inte ett <parameter
>id</parameter
>. Vi definierar ändå ett här, eftersom vi refererar till det senare, när vi definierar ett ytterligare guidegränssnitt. </para>
	<programlisting
>&lt;checkbox id="confint" label="print confidence interval" value="1" checked="true"/&gt;
                                        &lt;spinbox type="real" id="conflevel" label="confidence level" min="0" max="1" initial="0.95"/&gt;
                                &lt;/frame&gt;
        </programlisting>
	<para
>Inne i ramen <command
>&lt;frame&gt;</command
> placerar vi en annan kryssruta <command
>&lt;checkbox&gt;</command
> (och genom att använda <parameter
>checked=</parameter
><replaceable
>"true"</replaceable
>, signalerar vi att kryssrutan normalt ska vara markerad), och en nummerruta med <command
>&lt;spinbox&gt;</command
>. Nummerrutan gör det möjligt för användaren att välja ett värde mellan <replaceable
>"min"</replaceable
> och <replaceable
>"max"</replaceable
> med förvalda startvärdet <replaceable
>"0.95"</replaceable
>. Att ange typen <parameter
>type</parameter
> som <replaceable
>"real"</replaceable
> signalerar att reella tal accepteras i motsats till typen <parameter
>type=</parameter
><replaceable
>"integer"</replaceable
> som bara skulle acceptera heltal. </para>
	<note
><para
>Det är också möjligt, och ofta att föredra, att göra själva ramen <command
>&lt;frame&gt;</command
> valbar, istället för att lägga till en kryssruta med  <command
>&lt;checkbox&gt;</command
> inne i den. Se referensen för detaljerad information. Det görs inte här i illustrationssyfte. </para
></note>
	<programlisting
>&lt;/tab&gt;
                &lt;/tabbook&gt;
        &lt;/dialog&gt;
        </programlisting>
	<para
>Det är allt för den andra sidan i flikboken <command
>&lt;tabbook&gt;</command
> och alla element i dialogrutan <command
>&lt;dialog&gt;</command
>. Vi är klara med att definiera hur dialogrutan ser ut. </para>
	<programlisting
>&lt;/document&gt;
        </programlisting>
	<para
>Till sist avslutar vi taggen <command
>&lt;document&gt;</command
>, och det är allt. Det grafiska användargränssnittet är definiera. Nu går det att spara filen. Men hur skapas &R;-syntax från inställningarna i det grafiska användargränssnittet? Det tar vi itu med senare i <link linkend="jstemplate"
>nästa kapitel</link
>. Först undersöker vi dock hur ett guidegränssnitt kan läggas till, och några allmänna hänsynstaganden. </para>
</sect1>

<sect1 id="wizard_interface">
	<title
>Lägga till ett guidegränssnitt</title>
	<para
>I själva verket behöver vi inte definiera något ytterligare guidegränssnitt med <command
>&lt;wizard&gt;</command
>, men så här är hur man skulle göra det. Man lägger till taggen <command
>&lt;wizard&gt;</command
> på samma nivå som taggen <command
>&lt;dialog&gt;</command
>: </para>
	<programlisting
>&lt;wizard label="Two Variable t-Test"&gt;
                        &lt;page id="firstpage"&gt;
                                &lt;text&gt;As a first step, select the two variables you want to compare against
                                        each other. And specify, which one you theorize to be greater. Select two-sided,
                                        if your theory does not tell you, which variable is greater.&lt;/text&gt;
                                &lt;copy id="main_settings_row"/&gt;
                        &lt;/page&gt;
        </programlisting>
	<para
>En del av det här är rätt självförklarligt: Vi lägger till taggen <command
>&lt;wizard&gt;</command
> med en <parameter
>label</parameter
> för guiden. Eftersom en guide kan innehålla flera sidor som visas en i taget, definierar vi därefter den första sidan, <command
>&lt;page&gt;</command
>, och lägger till en förklarande anmärkning där med <command
>&lt;text&gt;</command
>. Därefter använder vi taggen <command
>&lt;copy&gt;</command
>. Vad den gör är att vi slipper att återigen definiera vad vi redan gjorde för dialogrutan <command
>&lt;dialog&gt;</command
>: Taggen letar efter en annan tagg med samma <parameter
>id</parameter
> tidigare i &XML;-koden. Den råkar vara definierad i sektionen <command
>&lt;dialog&gt;</command
>, och är raden <command
>&lt;row&gt;</command
> där det finns en <command
>&lt;varselector&gt;</command
>, <command
>&lt;varslots&gt;</command
> och <quote
>hypotesen</quote
> med alternativknapparna <command
>&lt;radio&gt;</command
>. Allt det kopieras ett-till-ett och infogas direkt vid elementet <command
>&lt;copy&gt;</command
>. </para>
	<para
>Nu till den andra sidan: </para>
	<programlisting
>&lt;page id="secondpage"&gt;
                                &lt;text&gt;Below are some advanced options. It's generally safe not to assume the
                                        variables have equal variances. An appropriate correction will be applied then.
                                        Choosing "assume equal variances" may increase test-strength, however.&lt;/text&gt;
                                &lt;copy id="varequal"/&gt;
                                &lt;text&gt;Sometimes it's helpful to get an estimate of the confidence interval of
                                        the difference in means. Below you can specify whether one should be shown, and
                                        which confidence-level should be applied (95% corresponds to a 5% level of
                                        significance).&lt;/text&gt;
                                &lt;copy id="frame_conf_int"/&gt;
                        &lt;/page&gt;
                &lt;/wizard&gt;
        </programlisting>
	<para
>I stort sett samma sak här. Vi lägger till en del texter, och däremellan kopierar ytterligare sektioner från dialoggränssnittet med <command
>&lt;copy&gt;</command
>. </para>
	<para
>Du kan förstås låta guidegränssnittet se mycket annorlunda ut än den enkla dialogrutan, och inte använda taggen <command
>&lt;copy&gt;</command
> alls. Försäkra dig dock om att motsvarande element tilldelas samma <parameter
>id</parameter
> i båda gränssnitten. Det används inte bara för att överföra inställningarna från dialoggränssnittet till guidegränssnittet och tillbaka, när användaren byter gränssnitt (vilket inte sker ännu i den nuvarande versionen av &rkward;), men förenklar också att skriva kodmallen (se nedan). </para>
</sect1>

<sect1 id="mainxmltips">
	<title
>Några hänsynstaganden vid konstruktion av det grafiska användargränssnittet</title>
	<para
>Det här avsnittet innehåller några allmänna hänsynstaganden om vilka element i det grafiska användargränssnittet som ska användas var. Om det här är ditt första försök att skapa ett insticksprogram, hoppa gärna över avsnittet, eftersom det inte är relevant för att få ett grundläggande grafiska användargränssnitt att fungera. Kom tillbaka hit senare, för att se om du kan förfina insticksprogrammets grafiska användargränssnitt på ett eller annat sätt. </para>
	
	<sect2 id="radio_vs_checkbox_vs_dropdown">
		<title
>&lt;radio&gt; mot &lt;checkbox&gt; mot &lt;dropdown&gt;</title>
		<para
>De tre elementen <command
>&lt;radio&gt;</command
>, <command
>&lt;checkbox&gt;</command
>, <command
>&lt;dropdown&gt;</command
> har alla liknande funktion, att välja ett av flera olika alternativ. Naturligtvis tillåter en kryssruta bara att välja mellan två alternativ: markerad eller inte markerad, så du kan inte använda den om det finns fler än två alternativ att välja mellan. Men när ska vilket av elementen användas? Några tumregler: </para>
		<para
>Om du märker att du skapar en alternativknapp, <command
>&lt;radio&gt;</command
> eller kombinationsruta, <command
>&lt;dropdown&gt;</command
> med bara två alternativ, fråga dig då om valet i stort sett är en fråga med svaret ja eller nej. Är det t.ex. ett val mellan att <quote
>justera resultat</quote
> och <quote
>justera inte resultat</quote
>, eller mellan <quote
>ta bort saknade värden</quote
> och <quote
>behåll saknade värden</quote
>. I detta fall är en kryssruta, <command
>&lt;checkbox&gt;</command
>, det bästa valet: Den använder lite utrymme, har så få ord i beteckningen som möjligt, och är lättast att läsa för användaren. Det finns några få situationer där en alternativknapp, <command
>&lt;radio&gt;</command
>, bör användas istället för kryssrutan <command
>&lt;checkbox&gt;</command
>, när det bara finns två alternativ. Ett exempel kan vara: <quote
>Beräkningsmetod: 'pearson'/'spearman'</quote
>. Här kan det tänkas finnas fler metoder, och de är egentligen inte ett motsatspar. </para>
		<para
>Att välja mellan alternativknappen <command
>&lt;radio&gt;</command
> och kombinationsrutan <command
>&lt;dropdown&gt;</command
> är i huvudsak en fråga om utrymme. En <command
>&lt;dropdown&gt;</command
> har fördelen att ta upp lite utrymme även om det finns många alternativ att välja mellan. Å andra sidan, har en <command
>&lt;radio&gt;</command
> fördelen att alla möjliga alternativ är synliga för användaren på en gång, utan att klicka på kombinationsrutans pil. I allmänhet, om det finns sex eller fler alternativ att välja mellan är en <command
>&lt;dropdown&gt;</command
> att föredra. Om det finns fem eller färre alternativ är en <command
>&lt;radio&gt;</command
> det bättre valet. </para>
	</sect2>
</sect1>
</chapter>

<chapter id="jstemplate">
<title
>Generera &R;-kod från inställningar i det grafiska användargränssnittet</title>
<sect1 id="sect_generating_R_code"
><title
>Använda &javascript; i &rkward;-insticksprogram</title>
	<para
>Nu har vi definierat ett grafiskt användargränssnitt, men vi måste fortfarande skapa &R;-kod från det. För att göra det behöver vi en textfil till, <filename
>code.js</filename
>, placerad i samma katalog som <link linkend="mainxml"
><filename
>description.xml</filename
></link
>. Du kanske eller kanske inte är bekant med &javascript; (eller, för att vara tekniskt precis: ECMA-script). Dokumentation om JS finns i överflöd, både på tryckt form och på Internet (t.ex. <ulink url="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide"
>https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide</ulink
>). Men för de flesta syften behöver du inte kunna så mycket om JS alls, eftersom vi bara använder några mycket grundläggande funktioner. </para>
	<tip>
		<para
>Ta också en titt på <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
> efter att ha läst det här kapitlet. Det tillhandahåller några &R;-funktioner för att skapa &javascript;-kod som ofta används i &rkward;. Det kan också automatiskt detektera variabler som används i ett insticksprograms &XML;-fil och skapa grundläggande &javascript;-kod från det som en startpunkt för dig. </para>
	</tip>
	<note>
		<para
>Insticksprogrammets <literal role="extension"
>.js</literal
>-filer antas vara kodade med UTF-8. Var noga med att kontrollera editorns kodning, om du använder några tecken som inte är ASCII. </para>
	</note>
	<para
>För tvåvariablers t-testen, ser filen <filename
>code.js</filename
> ut som följer (med kommentarer emellan): </para>
	<sect2 id="sect_JS_preprocess"
><title
>preprocess()</title>
		<programlisting
>function preprocess () {
}
                </programlisting>
		<para
>JS-filen är organiserad i tre separata funktioner: <function
>preprocess()</function
>, <function
>calculate()</function
> och <function
>printout()</function
>. Det beror på att all kod inte behövs i alla steg. För närvarande används inte funktionen preprocess på många ställen (typiskt utelämnas den helt och hållet). </para>
	</sect2>
	<sect2 id="sect_JS_calculate"
><title
>calculate()</title>
		<programlisting
>function calculate () {
        echo ('res &lt;- t.test (x=' + getString ("x") + ', y=' + getString ("y") + ', hypothesis="' + getString ("hypothesis") + '"' + getString ("varequal"));
        var conflevel = getString ("conflevel");
        if (conflevel != "0.95") echo (', conf.level=' + conflevel);
        echo (')\n');
}
                </programlisting>
		<para
>Funktionen skapar själva &R;-syntaxen som körs från inställningarna i det grafiska användargränssnittet. Låt oss ta en titt på den i detalj: Koden att använda skapas med satsen <function
>echo()</function
>. Vid en närmare titt på satsen <function
>echo()</function
> steg för steg, är den första delen </para>
		<screen
>res &lt;- t.test (
                </screen>
		<para
>som enkel text. Därefter måste vi fylla i värdet som användaren valde som första variabel. Vi hämtar det genom att använda <function
>getString("x")</function
> och lägger till det i strängen som ska <quote
>ekas</quote
>. Det skriver ut värdet på elementet i det grafiska användargränssnittet med <parameter
>id=</parameter
><replaceable
>"x"</replaceable
>: vår första kryssruta, <command
>&lt;checkbox&gt;</command
>. Därefter lägger vi till ',', och gör samma sak för att hämta värdet av elementet <replaceable
>"y"</replaceable
>, den andra kryssrutan <command
>&lt;checkbox&gt;</command
>. För hypotesen (gruppen <command
>&lt;radio&gt;</command
>) och kryssrutorna med varianserna, <command
>&lt;checkbox&gt;</command
>, är proceduren nästan likadan. </para>
		<para
>Observera att istället för att sammanfoga de utskrivna delarna med <quote
>+</quote
>, kan också flera olika <function
>echo()</function
> satser användas. Allt skrivs ut på en enda rad. För att skapa en ny rad i den skapade koden, infoga <replaceable
>"\n"</replaceable
> i strängen som ekas. Teoretiskt sett kan du till och med skapa många rader med en enda ekosats, men håll den helst till en rad (eller mindre) skapad god per <function
>echo()</function
>. </para>
		<note>
			<para
>Förutom <function
>getString()</function
> finns också funktionerna <function
>getBoolean()</function
>, som försöker returnera ett logiskt värde (lämpligt för användning i en villkorssats, <function
>if()</function
>), och <function
>getList()</function
>, som försöker returnera data som liknar listan i en JS <function
>Array()</function
>. Vi visar exempel på dem senare.</para>
			<para
>Om du tittar på befintliga insticksprogram finner du också många som använder <function
>getValue()</function
> istället för <function
>getString()</function
>, och i själva verket är de två <emphasis
>nästan</emphasis
> identiska. Dock är rekommenderad användning sedan version 0.6.1 att använda <function
>getString()</function
>, <function
>getBoolean()</function
> och <function
>getList()</function
>. </para>
		</note>
		<para
>Det blir lite krångligare för konfidensnivån. Av estetiska skäl vill vi inte explicit ange konfidensnivån som ska användas, om den motsvarar förvalt värde. Sålunda lagrar vi den först till en variabel istället för att ovillkorligt skriva ut värdet. Därefter kontrollerar vi om variabeln skiljer sig från <replaceable
>"0.95"</replaceable
> och i så fall skriver vi ut ett ytterligare argument. Till sist ekar vi en avslutande parentes och en ny rad: <replaceable
>")\n"</replaceable
>. Det är allt i funktionen calculate. </para>
	</sect2>
	<sect2 id="sect_JS_printout"
><title
>printout()</title>
		<programlisting
>function printout () {
        echo ('rk.header (' + i18n ("Two Variable t-Test") + ')\n');
        echo ('rk.print (res)\n');
}
                </programlisting>
		<para
>Och det är allt i funktionen printout i de flesta fall. <function
>rk.header()</function
> skriver ut en standardrubrik för resultaten. Observera att alla översättningsbara strängar måste markeras för hand i <literal role="extension"
>.js</literal
>-filen, genom att använda <command
>i18n()</command
> eller några alternativa kommandon. Mer om detta i <link linkend="i18n_js"
>kapitlet om internationalisering</link
>. Du kan också lägga till en del ytterligare information här, om du vill, exempelvis: </para>
		<programlisting
>function printout () {
        new Header (i18n ("Two Variable t-Test"))
                  .addFromUI ("varequal")
                  .add (i18n ("Confidence level"), getString ("conflevel"))  // Observera: skrivet såhär i illustrationssyfte. Mer automatiskt:
        //        .addFromUI ("conflevel")
                  .print ();
echo ('rk.print (res)\n');
}
                </programlisting>
		<para
><function
>rk.print()</function
> utnyttjar paketet R2HTML för att tillhandahålla utmatning formaterad med HTML. En annan hjälpsam funktion är <function
>rk.results()</function
>, som också kan skriva ut olika sorters resultattabeller. Om du dock tvekar, använd bara <function
>rk.print()</function
>, så är du klar. JS-klassen <function
>Header</function
> är en hjälpklass på JS-nivå för att skapa ett anrop till <function
>rk.header()</function
> (ta bara en titt på den genererade &R;-koden). I vissa fall kan du behöva anropa <function
>echo ('rk.header (...)')</function
> direkt för att skriva ut en rubrik för utmatningen. </para>
		<para
>Observera att internt är utmatningen för närvarande bara ett enkelt &HTML;-dokument. Därför kan du bli frestad att lägga till egen &HTML; genom att använda <function
>rk.cat.output()</function
>. Även om det fungerar, gör helst inte det. Utdataformatet kan ändras i framtiden (t.ex. till ODF), så det är bäst att inte introducera &HTML;-specifik kod. Behåll hellre allt enkelt med <function
>rk.header()</function
>, <function
>rk.print()</function
>, <function
>rk.results()</function
>, och vid behov <function
>rk.print.literal()</function
>. Om det inte verkar uppfylla dina formateringsbehov, kontakta oss på e-postlistan för att få hjälp. </para>
		<para
>Gratulerar! Du har skapat ditt första insticksprogram. Läs vidare i nästa kapitel om mer avancerade begrepp. </para>
	</sect2>
</sect1>

<sect1 id="jsconventions">
<title
>Konventioner, principer och bakgrund</title>
	<para
>Det finns många sätt att skriva &R;-kod för en viss uppgift, och det finns ännu fler sätt att generera &R;-koden från JS. Exakt hur du gör det, bestämmer du själv. Det finns ändå ett antal hänsynstaganden som du bör följa, och bakgrundsinformation som du bör förstå. </para>

	<sect2 id="policylocal">
	<title
>Förstå omgivningen <function
>local()</function
></title>
		<para
>Vanligtvis måste man skapa en eller flera tillfälliga &R;-objekt i koden som genereras av insticksprogrammet. Normalt vill man inte att de ska placeras i användarens arbetsrymd, och potentiellt till och med skriva över användarvariabler. Därför görs all kod genererad av insticksprogram i en lokal omgivning, <function
>local()</function
> (se hjälpsidan i &R; om funktionen <function
>local()</function
>). Det betyder att alla variabler som skapas är tillfälliga och sparas inte permanent. </para>
		<para
>Om användaren explicit ber om att en variabel ska sparas, måste tilldelningar till objektet göras genom att använda <function
>.GlobalEnv$objectname &lt;- value</function
>. I allmänhet ska inte operatorn <function
>&lt;&lt;-</function
> användas. Den tilldelar inte nödvändigtvis i .GlobalEnv. </para>
		<para
>En viktig fallgrop är användning av <function
>eval()</function
>. Här måste man observera att eval normalt använder den aktuella omgivningen för utvärdering, dvs. den lokala. Det fungerar oftast bra, men inte alltid. Om du sålunda behöver använda <function
>eval()</function
>, bör du ange parametern <parameter
>envir</parameter
>: <function
>eval(..., envir=globalenv()</function
>). </para>
	</sect2>

	<sect2 id="policyformatting">
	<title
>Kodformatering</title>
		<para
>Det viktigaste är att den genererade &R;-koden fungerar, men den bör också vara lättläst. Håll därför också ett öga på formateringen. Några överväganden: </para>
		<para
>Normala toppnivå &R;-satser ska vara vänsterjusterade. </para>
		<para
>Satser i ett lägre block ska indenteras med en flik (se exemplet nedan). </para>
		<para
>Om du utför mycket komplexa beräkningar, lägg till en kommentar här och där, i synnerhet för att markera logiska avsnitt. Observera att det finns en särskild funktion, <command
>comment()</command
>, för att infoga översättningsbara kommentarer i genererad kod. </para>
		<para
>Generad kod kan exempelvis se ut så här. Samma kod utan indentering eller kommentarer skulle vara ganska svårläst, trots dess blygsamma svårighetsgrad: </para>
		<programlisting
># bestäm först svaj och rotation
my.wobble &lt;- wobble (x, y)
my.rotation &lt;- wobble.rotation (my.wobble, z)

# vacklingsmetod måste väljas enligt rotation
if (my.rotation &gt; wobble.rotation.limit (x)) {
        method &lt;- "foo"
        result &lt;- boggle.foo (my.wobble, my.rotation)
} else {
        method &lt;- "bar"
        result &lt;- boggle.bar (my.wobble, my.rotation)
}
                </programlisting>
	</sect2>

	<sect2 id="policysimplicity">
	<title
>Hantera komplexa alternativ</title>
		<para
>Många insticksprogram kan göra mer än en sak. Exempelvis kan insticksprogrammet <quote
>Beskrivande statistik</quote
> beräkna medelvärde, intervall, summa, produkt, median, längd, etc. Dock väljer användaren typiskt att bara utföra vissa av beräkningarna. Försök hålla den genererade koden så enkel som möjligt i sådana fall. Den ska bara innehålla delarna som är relevanta för alternativen som faktiskt har valts. För att åstadkomma det är här ett exempel på ett vanligt konstruktionsmönster som det skulle användas (i JS skulle elementen "domean", "domedian" och "dosd" här vara kryssrutor, &lt;checkbox&gt;): </para>
		<programlisting
>function calculate () {
        echo ('x &lt;- &lt;' + getString ("x") + ')\n');
        echo ('results &lt;- list ()\n');

        if (getBoolean ("domean.state")) echo ("results$" + i18n ("Mean value") + " &lt;- mean (x)\n");
        if (getBoolean ("domedian.state")) echo ("results$" + i18n ("Median") + " &lt;- median (x)\n");
        if (getBoolean ("dosd.state")) echo ("results$" + i18n ("Standard deviation") + " &lt;- sd (x)\n");
        //...
}
                </programlisting>
	</sect2>
</sect1>

<sect1 id="jstips">
<title
>Tips och trick</title>
	<para
>Här är några blandade trick som kan göra det mindre arbetsamt att skriva insticksprogram: </para>
	<para
>Om värdet av en inställning i det grafiska användargränssnittet behövs på flera platser i insticksprogrammets kod, överväg att tilldela det till en variabel i JS, och använda den istället för att hämta det upprepade gånger med <function
>getString()/getBoolean()/getList()</function
>. Det är snabbare, mer läsbart, och mindre att skriva på en gång: </para>
	<programlisting
>function calculate () {
        var narm = "";        // na.rm=FALSE är förvalt värde i alla funktioner nedan
        if (getBoolean ("remove_nas")) {
                $narm = ", na.rm=TRUE";
        }
        // ...
        echo ("results$foo &lt;- foo (x" + narm + ")\n");
        echo ("results$bar &lt;- bar (x" + narm + ")\n");
        echo ("results$foobar &lt;- foobar (x" + narm "\n");
        // ...
}
        </programlisting>
	<para
>Den enkla hjälpfunktionen <function
>makeOption()</function
> kan göra det enklare att utelämna parametrar som har sina förvalda värden, i många fall: </para>
	<programlisting
>function calculate () {
        var options
        //...
        // Den här gör ingenting, om VALUE är 0,95 (förvalt värde). Annars lägger den till ', conf.int=VALUE' i alternativen.
        options += makeOption ("conf.int", getString ("confint"), "0.95");
        //...
}
        </programlisting>
</sect1>
</chapter>

<chapter id="pluginhelp">
	<title
>Skriva en hjälpsida</title>
	<para
>När insticksprogrammet i grund och botten fungerar, är det dags att tillhandahålla en hjälpsida. Även om man typiskt inte vill förklara alla bakomliggande koncepten från grunden, kanske du vilja lägga till några fler förklaringar för vissa av alternativen, och länka till relaterade insticksprogram och &R;-funktioner. </para>
	<tip>
		<para
>Efter att ha läst det här kapitlet, ta också en titt på <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
>. Det tillhandahåller några &R;-funktioner för att skapa de flesta av &rkward;s &XML;-taggar åt dig. Det klarar också av att skapa grundmallar för hjälpfiler från insticksprogrammets befintliga &XML;-filer att utgå ifrån. </para>
	</tip>
	<para
>Du kanske minns att du lagt till det här i insticksprogrammets &XML; (om du inte har det, lägg till det nu): </para>
	<programlisting
>&lt;document&gt;
        [...]
        &lt;help file="filnamn.rkh" /&gt;
        [...]
&lt;/document&gt;
        </programlisting>
	<para
>Där du naturligtvis ersätter <filename
>filnamn</filename
> med ett lämpligare namn. Nu är det dags att skapa <literal role="extension"
>.rkh</literal
>-filen. Här är ett självbeskrivande exempel: </para>
	<programlisting
>&lt;!DOCTYPE rkhelp&gt;
&lt;document&gt;
        &lt;summary&gt;
I det här avsnittet skriver man in kort, mycket grundläggande information om vad insticksprogrammet gör.
Avsnittet visas alltid allra längst upp på hjälpsidan.
        &lt;/summary&gt;

        &lt;usage&gt;
Sektionen usage kan innehålla lite mer praktisk information. Den ska dock inte förklara
alla inställningarna i detalj (det görs i sektionen "settings").

Infoga en ny rad för att påbörja ett nytt stycke, som visas ovan.
I motsats till det, ingår den här raden i samma stycke.

Enkel HTML-kod kan infogas i alla avsnitt, såsom text med &lt;b&gt;fetstil&lt;/b&gt; eller
&lt;i&gt;kursiv stil&lt;/i&gt;. Använd dock helst minimal formatering som är nödvändig.

Avsnittet usage är alltid det andra avsnittet som visas på en hjälpsida.
        &lt;/usage&gt;

        &lt;section id="sectionid" title="Generic section" short_title="Generic"&gt;
Om det behövs, kan ytterligare avsnitt läggas till mellan avsnitten usage och settings.
Dock behövs det oftast inte när insticksprogram dokumenteras. Egenskapen "id"
tillhandahåller en ankringspunkt för att gå till avsnittet i navigeringsmenyn. Egenskapen "short_title"
tillhandahåller en kort rubrik att använda i navigeringsraden. Den är valfri, normalt
använd "title" både som rubrik för avsnittet, och som länknamnet i
navigeringsraden.

Man kan vilja infoga länkar till ytterligare information i vilket avsnitt som helst. Det gör man genom att lägga till

&lt;link href="webbadress"&gt;länknamn&lt;/link&gt;

Där webbadress skulle kunna vara en extern adress som http://rkward.kde.org .
Flera speciella webbadresser stöds i hjälpsidorna:

&lt;link href="rkward://sida/sökväg/sid-id"/&gt;

Länkar till en rkward hjälpsida på toppnivå (inte för ett insticksprogram).

&lt;link href="rkward://component/[namnrymd/]komponent-id"/&gt;

Länkar till hjälpsidan för ett annat insticksprogram. Delen [namnrymd/] kan utelämnas
(i så fall, antas rkward som standardnamnrymd, exempelvis är
&lt;link href="rkward://component/import_spss"/&gt; och
&lt;link href="rkward://component/rkward/import_spss"/&gt; ekvivalenta).
Komponent-id är samma som anges av <link linkend="pluginmap"
>&pluginmap;</link
>.

&lt;link href="rkward://rhelp/r-funktion"/&gt;

Länkar till &R;-hjälpsidan om "r-funktion".

Observera att länknamn skapas automatiskt för följande typer av länkar.
        &lt;/section&gt;

        &lt;settings&gt;
                &lt;caption id="id_of_tab_or_frame"/&gt;
                &lt;setting id="id_of_element"&gt;
Beskrivning av elementet i det grafiska användargränssnittet identifierat av angivet id
                &lt;/setting&gt;
                &lt;setting id="id_of_elementb" title="description"&gt;
Oftast extraherar rubriken för elementet i det grafiska användargränssnittet automatiskt från
<link linkend="mainxml"
>insticksprogrammets &XML;-definition</link
>. Dock
kanske beskrivningen inte är nog för att tillförlitligt identifiera dem för vissa element i det grafiska användargränssnittet.
I så fall kan en explicit rubrik läggas till med egenskapen "title".
                &lt;/setting&gt;
                &lt;setting id="id_of_elementc"&gt;
Beskrivning av elementet i det grafiska användargränssnittet identifierat av "id_of_elementc"
                &lt;/setting&gt;
                [...]
        &lt;/settings&gt;

        &lt;related&gt;
Avsnittet related innehåller oftast bara några länkar, såsom:

&lt;ul&gt;
        &lt;li&gt;&lt;link href="rkward://rhelp/mean"/&gt;&lt;/li&gt;
        &lt;li&gt;&lt;link href="rkward://rhelp/median"/&gt;&lt;/li&gt;
        &lt;li&gt;&lt;link href="rkward://component/related_component"/&gt;&lt;/li&gt;
&lt;/ul&gt;
        &lt;/related&gt;

        &lt;technical&gt;
Avsnittet technical (valfritt, alltid sist) kan innehålla några tekniska detaljer om insticksprogrammets
implementering, som bara är av intresse för utvecklare av RKWard. Det är särskilt relevant
för insticksprogram som är konstruerade för att inbäddas i många andra insticksprogram, och kan ange vilka
alternativ är tillgängliga för att anpassa det inbäddade insticksprogrammet, och vilka kodsektioner som innehåller vilken
R-kod.
        &lt;/technical&gt;
&lt;/document&gt;
        </programlisting>
</chapter>


<chapter id="logic">
<title
>Logisk interaktion mellan element i det grafiska användargränssnittet</title>
<sect1 id="sect_GUI_logic"
><title
>Logik för grafiskt användargränssnitt</title>
	<para
>Alla grundkoncepten för att skapa ett insticksprogram för &rkward; har beskrivits i de tidigare kapitlen. Grundkoncepten bör vara tillräckliga för många fall, kanske de allra flesta. Dock vill man ibland ha mer kontroll över hur insticksprogrammets grafiska användargränssnitt beter sig. </para>
	<para
>Antag exempelvis att du vill utöka t-test exemplet som används i den här dokumentationen för att både tillåta att en variabel jämförs med en annan variabel (som visas här), och jämföra en variabel mot ett konstantvärde. Ja, ett sätt att göra det skulle vara att lägga till en alternativknapp som byter mellan de två lägena och lägga till en nummerruta för att skriva in konstantvärdet att jämföra med. Betrakta det här förenklade exemplet: </para>
	<programlisting
>&lt;!DOCTYPE rkplugin&gt;
&lt;document&gt;
        &lt;code file="code.js"/&gt;

        &lt;dialog label="T-Test"&gt;
                &lt;row&gt;
                        &lt;varselector id="vars"/&gt;
                        &lt;column&gt;
                                &lt;varslot id="x" types="number" source="vars" required="true" label="compare"/&gt;
                                &lt;radio id="mode" label="Compare against"&gt;
                                        &lt;option value="variable" checked="true" label="another variable (select below)"/&gt;
                                        &lt;option value="constant" label="a constant value (set below)"/&gt;
                                &lt;/radio&gt;
                                &lt;varslot id="y" types="number" source="vars" required="true" label="variable" i18n_context="Noun; a variable"/&gt;
                                &lt;spinbox id="constant" initial="0" label="constant" i18n_context="Noun; a constant"/&gt;
                        &lt;/column&gt;
                &lt;/row&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Så långt är allt gott och väl, men det finns ett antal problem med det här grafiska användargränssnitt. För det första visas både varslot elementet och nummerrutan, medan bara en av de två verkligen används. Vad värre är, varslot elementet kräver alltid ett giltigt val, även vid jämförelse med en konstant. Om vi skapar ett grafiskt användargränssnitt med flera syften, vill vi uppenbarligen ha mer flexibilitet. Lägg då till sektionen <command
>&lt;logic&gt;</command
> (infogad på samma nivå som <command
>&lt;code&gt;</command
>, <command
>&lt;dialog&gt;</command
> eller <command
>&lt;wizard&gt;</command
>). </para>
	<programlisting
>[...]
        &lt;code file="code.js"/&gt;

        &lt;logic&gt;
                &lt;convert id="varmode" mode="equals" sources="mode.string" standard="variable" /&gt;

                &lt;connect client="y.visible" governor="varmode" /&gt;
                &lt;connect client="constant.visible" governor="varmode.not" /&gt;
        &lt;/logic&gt;

        &lt;dialog label="T-Test"&gt;
        [...]
        </programlisting>
	<para
>Den första raden inne i sektionen logic är taggen <command
>&lt;convert&gt;</command
>. Den tillhandahåller egentligen en ny Boolesk egenskap (på eller av, sann eller falsk), som kan användas senare. Egenskapen (<replaceable
>"varmode"</replaceable
>) är sann så snart den övre alternativknappen är vald, och falsk så snart den nedre alternativknappen är vald. Hur görs det? </para>
	<para
>För det först listas källegenskaperna att arbeta med under <parameter
>sources</parameter
> (i detta fall bara en vardera, flera skulle kunna listas som <parameter
>sources=</parameter
><replaceable
>"mode.string;någonting-annat"</replaceable
>, då skulle <replaceable
>"varmode"</replaceable
> bara vara sann om både <replaceable
>"mode.string"</replaceable
> och <replaceable
>"någonting-annat"</replaceable
> är lika med strängen <replaceable
>"variable"</replaceable
>). Observera att i detta fall skriver vi inte bara <replaceable
>"mode"</replaceable
> (som vi skulle göra i <function
>getString("mode")</function
>), utan  <replaceable
>"mode.string"</replaceable
>. Det är det faktiska interna sättet som en alternativknapp fungerar: Den har egenskapen <quote
>string</quote
> som innehåller dess strängvärde. <function
>getString("mode")</function
> är bara en kortform, och ekvivalent med <function
>getString("mode.string")</function
>. Se referensen för alla egenskaper hos de olika elementen i det grafiska användargränssnittet. </para>
	<para
>För det andra, ställer vi in konverteringens läge till <parameter
>mode=</parameter
><replaceable
>"equals"</replaceable
>. Det betyder att vi vill kontrollera om källan eller källorna är lika med ett visst värde. Till sist är standard värdet att jämföra med, så med <parameter
>standard=</parameter
><replaceable
>"variable"</replaceable
> kontrollerar vi om egenskapen <replaceable
>"mode.string"</replaceable
> är lika med strängen <replaceable
>"variable"</replaceable
> (värdet av den övre alternativknappen). Om de är lika, är egenskapen varmode sann, annars är den falsk. </para>
	<para
>Nu till själva kärnan: Vi använder <command
>&lt;connect&gt;</command
> för att ansluta egenskapen <replaceable
>"varmode"</replaceable
> till y.visible, vilket bestämmer om varslot <replaceable
>"y"</replaceable
> visas eller inte. Observera att eventuella element som görs osynliga implicit inte  krävs. Sålunda, om den övre alternativknappen väljes, krävs varslot <replaceable
>"y"</replaceable
> och är synlig. Annars krävs den inte och är dold. </para>
	<para
>För nummerrutan vill vi ha exakt det motsatta. Som tur är behöver vi inte ett annat <command
>&lt;convert&gt;</command
> för den: Booleska egenskaper kan enkelt negeras genom att lägga till modifieraren <replaceable
>"not"</replaceable
>, så vi använder <command
>&lt;connect&gt;</command
> <replaceable
>"varmode.not"</replaceable
> för nummerrutans egenskap visibility. På så sätt krävs antingen elementet varslot och visas, <emphasis
>eller</emphasis
> krävs nummerrutan och visas, beroende på vilket alternativ som är valt av alternativknapparna. Det grafiska användargränssnittet ändras enligt alternativknapparna. Prova exemplet, om du har lust. </para>
	<para
>Se <link linkend="reference"
>referenskapitlet</link
> för en fullständig lista över egenskaper. Ytterligare en egenskap är dock speciell på det sättet att alla element i det grafiska användargränssnittet har den: <quote
>enabled</quote
>. Den är något mindre drastisk än <quote
>visible</quote
>. Den visar eller döljer inte elementet i det grafiska användargränssnittet, utan bara aktiverar eller inaktiverar det. Inaktiverade element visas typiskt med grått, och reagerar inte på användarinmatning. </para>
	<note>
		<para
>Förutom <command
>&lt;convert&gt;</command
> och <command
>&lt;connect&gt;</command
>, finns det flera ytterligare element att använda i sektionen <command
>&lt;logic&gt;</command
>. Villkorliga konstruktioner kan exempelvis också implementeras genom att använda elementet <command
>&lt;switch&gt;</command
>. Se <link linkend="logicelements"
>referenskapitlet om logiska element</link
> för detaljerad information.</para>
	</note>
</sect1>
<sect1 id="logic_scripted">
<title
>Skriptbaserad logik för det grafiskt användargränssnittet</title>
	<para
>Medan anslutning av egenskaper som beskrivs ovan ofta är nog, är det flexiblare eller bekvämare att använda JS för att hantera det grafiska användargränssnittets logik med ett skript. På detta sätt skulle exemplet ovan kunna skrivas om som: </para>
	<programlisting
>[...]
        &lt;code file="code.js"/&gt;
'
        &lt;logic&gt;
                &lt;script&gt;&lt;![CDATA[
                        // ECMA-skript kod i blocket
                        // toppnivåsatsen anropas bara en gång
                        gui.addChangeCommand ("mode.string", "modeChanged ()");

                        // funktionen anropas så fort "mode" ändras
                        modeChanged = function () {
                                var varmode = (gui.getString ("mode.string") == "variable");
                                gui.setValue ("y.enabled", varmode);
                                gui.setValue ("constant.enabled", !varmode);
                        }
                ]]&gt;&lt;/script&gt;
        &lt;/logic&gt;

        &lt;dialog label="T-Test"&gt;
        [...]
        </programlisting>
	<para
>Den första kodraden talar om för &rkward; att funktionen <function
>modeChanged()</function
> ska anropas så fort värdet på alternativknappen <parameter
>id=</parameter
><replaceable
>"mode"</replaceable
> ändras. Inne i funktionen definierar vi hjälpvariabeln <replaceable
>"varmode"</replaceable
> som är sann när läget är <replaceable
>"variable"</replaceable
> och falsk när det är <replaceable
>"constant" </replaceable
>. Sedan använder vi <function
>gui.setValue()</function
> för att ställa in egenskaperna <quote
>enabled</quote
> för <replaceable
>"y"</replaceable
> och <replaceable
>"constant"</replaceable
>, precis på samma sätt som vi tidgare gjorde med satsen <command
>&lt;connect&gt;</command
>. </para>
	<para
>Skriptmetoden för logik i det grafiska användargränssnittet är särskilt användbart när de tillgängliga alternativen behöver ändras enligt typ av objekt som användaren väljer. Se <link linkend="guilogic_functions"
>referenskapitlet</link
> för tillgängliga funktioner. </para>
	<para
>Observera att skriptmetoden för logik i det grafiska användargränssnittet kan blandas med satserna <command
>&lt;connect&gt;</command
> och <command
>&lt;convert&gt;</command
> om du vill. Observera också att taggen <command
>&lt;script&gt;</command
> tillåter ett skriptfilnamn som tillägg till eller alternativ till att inbädda skriptkoden. Oftast är det dock bekvämast att inbädda den som visas ovan. </para>
</sect1>
</chapter>

<chapter id="embedding">
<title
>Inbädda insticksprogram i insticksprogram</title>
<sect1 id="sect_embedding"
><title
>Användarfall för inbäddning</title>
	<para
>När du skriver insticksprogram, märker du ofta att du skapar ett antal insticksprogram som bara skiljer sig i några avseenden, men har mycket mer gemensamt. Exempelvis för att rita diagram finns ett antal generella &R;-alternativ som kan användas med nästan alla sorters diagram. Ska man skapa ett grafiskt användargränssnitt och JS-mall för dem gång på gång? </para>
	<para
>Uppenbarligen skulle det vara rätt besvärligt. Som tur är behöver man inte göra det. Istället skapar man kärnan med den gemensamma funktionen en gång, och kan senare inbädda den i flera olika insticksprogram. I själva verket är det möjligt att inbädda vilket insticksprogram som helst i vilket annat insticksprogram som helst, även om de ursprungliga upphovsmännen till de inbäddade insticksprogrammen aldrig trodde att någon skulle vilja inbädda deras insticksprogram i något annat. </para>
</sect1>
<sect1 id="embedding_dialog">
<title
>Inbäddning inne i en dialogruta</title>
	<para
>OK, nog sagt. Hur fungerar det? Enkelt: Använd bara taggen <command
>&lt;embed&gt;</command
>. Här är ett avkortat exempel: </para>
	<programlisting
>&lt;dialog&gt;
        &lt;tabbook&gt;
                &lt;tab [...]&gt;
                        [...]
                &lt;/tab&gt;
                &lt;tab label="Plot Options" i18n_context="Options concerning the plot"&gt;
                        &lt;embed id="plotoptions" component="rkward::plot_options"/&gt;
                &lt;/tab&gt;
                &lt;tab [...]&gt;
                        [...]
                &lt;/tab&gt;
        &lt;/tabbook&gt;
&lt;/dialog&gt;
        </programlisting>
	<para
>Vad som händer här är att hela det grafiska användargränssnittet för insticksprogrammet med diagramalternativ (utom förstås standardelementen som knappen <guibutton
>Verkställ</guibutton
>, etc.) inbäddas direkt i ditt insticksprogram (prova det!). </para>
	<para
>Som du märker är syntaxen för taggen <command
>&lt;embed&gt;</command
> rätt enkel. Den har en <parameter
>id</parameter
> som de flesta element. Parameterkomponenten anger vilket insticksprogram som ska inbäddas, som definierad i &pluginmap;-filen (<replaceable
>"rkward::plot_options"</replaceable
> är resultatet av att sammanfoga namnrymden <quote
>rkward</quote
>, en avskiljare <quote
>::</quote
> och komponentens namn <quote
>plot_options</quote
>). </para>
</sect1>
<sect1 id="embedding_code">
<title
>Kodgenerering vid inbäddning</title>
	<para
>Så långt är allt gott och väl, men vad händer med den genererade koden? Hur sammanfogas koden för det inbäddande och det inbäddade insticksprogrammen? Skriv helt enkelt någonting som liknar det här i det inbäddande insticksprogrammet: </para>
	<programlisting
>function printout () {
        // ...
        echo ("myplotfunction ([...]" + getString ("plotoptions.code.printout"); + ")\n");
        // ...
}
        </programlisting>
	<para
>I grund och botten hämtar vi alltså koden som skapas av det inbäddade insticksprogrammet precis som vi hämtar alla andra inställningar av det grafiska användargränssnittet. Här kan strängen <replaceable
>"plotoptions.code.printout"</replaceable
> tolkas del för del som: <quote
>Utskriftssektionen av den skapade koden för elementet med <parameter
>id</parameter
> plotoptions</quote
> (plotoptions är den id som vi angav för taggen <command
>&lt;embed&gt;</command
> ovan). Och jovisst, om du behöver avancerad kontroll, kan du till och med hämta värden av enskilda element i det grafiska användargränssnittet för det inbäddade insticksprogrammet (men inte tvärtom, eftersom det inbäddade insticksprogrammet inte vet någonting om sin omgivning). </para>
</sect1>
<sect1 id="embedding_wizard">
<title
>Inbäddning inne i en guide</title>
	<para
>Om insticksprogrammet tillhandahåller ett grafiskt användargränssnitt med en guide, fungerar inbäddning i stort sett på samma sätt. I allmänhet använder man: </para>
	<programlisting
>&lt;wizard [...]&gt;
                [...]
                &lt;page id="page12"&gt;
                        [...]
                &lt;/page&gt;
                &lt;embed id="plotoptions" component="rkward::plot_options"/&gt;
                &lt;page id="page13"&gt;
                        [...]
                &lt;/page&gt;
                [...]
        &lt;/wizard&gt;
        </programlisting>
	<para
>Om det inbäddade grafiska användargränssnittet tillhandahåller ett guidegränssnitt, infogas dess sidor direkt mellan <replaceable
>page12</replaceable
> och <replaceable
>page13</replaceable
> i ditt insticksprogram. Om det inbäddade grafiska användargränssnittet bara tillhandahåller ett dialoggränssnitt, infogas en enda ny sida mellan dina sidor <replaceable
>page12</replaceable
> och <replaceable
>page13</replaceable
>. Användaren märker aldrig något. </para>
</sect1>
<sect1 id="embedding_as_button">
<title
>Mindre inbäddad inbäddning: Knappen Ytterligare alternativ</title>
	<para
>Med inbäddning är häftigt, bör man vara försiktig så att man inte överdriver. För många funktioner i ett grafiskt användargränssnitt gör det bara svårt att hitta de relevanta alternativen. Man kan naturligtvis ibland vilja inbädda ett stort antal alternativ (som alla alternativ i <function
>plot()</function
>), men eftersom de är helt valfria, vill man inte att de ska synas på en framträdande plats i det grafiska användargränssnittet. </para>
	<para
>Ett alternativ är att inbädda alternativen <quote
>som en knapp</quote
>: </para>
	<programlisting
>&lt;dialog&gt;
        &lt;tabbook&gt;
                [...]
                &lt;tab label="Options"&gt;
                        [...]
                        &lt;embed id="plotoptions" component="rkward::plot_options" as_button="true" label="Specify plotting options"/&gt;
                &lt;/tab&gt;
                [...]
        &lt;/tabbook&gt;
&lt;/dialog&gt;
</programlisting>
	<para
>I detta fall har en enda tryckknapp lagts till i insticksprogrammet, med beteckningen <guibutton
>Specify plotting options</guibutton
>. När knappen klickas, dyker en separat dialogruta upp med alla det inbäddade insticksprogrammets alternativ. Även om det inbäddade grafiska användargränssnittet inte är synligt för det mesta, kan inställningarna hämtas precis som beskrevs <link linkend="embedding_code"
>ovan</link
>. </para>
	<para>
		<caution>
			<para
>Troligen bör metoden med en <quote
>knapp</quote
> enbart användas för insticksprogram som aldrig kan vara ogiltiga (för saknade eller felaktiga inställningar). Annars skulle inte användaren kunna verkställa koden, men kan ha svårt att få reda på det, eftersom orsaken är dold bakom någon knapp. </para
>	
		</caution>
	</para>
</sect1>
<sect1 id="embedding_incomplete">
<title
>Inbädda eller definiera ofullständiga insticksprogram</title>
	<para
>Vissa insticksprogram är inte fullständiga i sig själva, och i själva verket är plot_options använt som exempel ovan ett av dem. De har helt enkelt inte elementen i det grafiska användargränssnittet för att välja vissa viktiga värden. De är bara avsedda att använda inbäddade i andra insticksprogram. </para>
	<para
>Hur långt är insticksprogrammet plot_options ofullständigt? Jo, för vissa inställningsalternativ behöver det veta namnet på objekten eller uttrycken för x- och y-axlarna (i själva verket fungerar det bra om det har endera, men det behöver minst ett för att fungera som det ska). Dock har det inte någon mekanism för att välja objekten, eller mata in dem på något annat sätt. Så hur känner det då till dem? </para>
	<para
>I sektionen logic i insticksprogrammet plot_options finns ytterligare två rader, som inte behandlats ännu: </para>
	<programlisting
>&lt;logic&gt;
                &lt;external id="xvar" /&gt;
                &lt;external id="yvar" /&gt;

                [...]
        &lt;/logic&gt;
        </programlisting>
	<para
>Det definierar ytterligare två egenskaper i insticksprogrammet plot_options, vars enda syfte är att anslutas till några (ännu okända) egenskaper i det inbäddande insticksprogram. I insticksprogrammet plot_options är de två egenskaperna använda precis som vilka andra som helst, och det finns exempelvis anrop till <function
>getString("xvar")</function
> i JS-mallen i plot_options. </para>
	<para
>För det ofullständiga insticksprogrammet finns det inget sätt att veta var det inbäddas, och vad de relevanta inställningarna i det inbäddande insticksprogram heter. Vi måste alltså dessutom lägga till två ytterligare rader i det inbäddande insticksprogrammets sektion logic: </para>
	<programlisting
>&lt;logic&gt;
                [...]

                &lt;connect client="plotoptions.xvar" governor="xvarslot.available" /&gt;
                &lt;connect client="plotoptions.yvar" governor="yvarslot.available" /&gt;
        &lt;/logic&gt;
        </programlisting>
	<para
>Det är principiellt ingenting nytt, vi har behandlat satsen <command
>&lt;connect&gt;</command
> i <link linkend="logic"
>kapitlet om logik i det grafiska användargränssnittet</link
>. Man ansluter helt enkelt värdena i två varslots (benämnda <replaceable
>"xvarslot"</replaceable
> och <replaceable
>"yvarslot"</replaceable
> i exemplet) till de mottagande <quote
>externa</quote
> egenskaperna i det inbäddade insticksprogrammet. Det är allt. Allting annat hanteras automatiskt. </para>
</sect1>
</chapter>

<chapter id="plugin_series">
<title
>Hantera många liknande insticksprogram</title>
<sect1 id="sect_similar_plugins"
><title
>Översikt av olika tillvägagångssätt</title>
	<para
>Ibland kan man vilja utveckla insticksprogram för en serie liknande funktioner. Som ett exempel, fundera på fördelningsdiagram. De genererar ganska lika kod, och det är naturligtvis önskvärt att få det grafiska gränssnitten att likna varandra. Till sist kan stora delar av hjälpfilerna vara identiska. Bara några få parametrar är olika i varje insticksprogram. </para>
	<para
>Det naiva tillvägagångssättet är att utveckla ett insticksprogram, därefter i stort sett kopiera och klistra in hela innehållet i <literal role="extension"
>.js</literal
>-, <literal role="extension"
>.xml</literal
>- och <literal role="extension"
>.rkh</literal
>-filerna, och ändra de få delarna som är olika. Men vad händer om du någon gång senare hittar ett stavfel som har kopierats och klistrats in i alla insticksprogrammen? Vad händer om du vill lägga till stöd för en ny funktion? Du måste hitta alla insticksprogram igen, och ändra vart enda ett. En tröttsam och långdragen process. </para>
	<para
>Ett annat tillvägagångssätt skulle vara att använda <link linkend="embedding"
>inbäddning</link
>. Dock lämpar sig inte det väl för det aktuella problemet i vissa fall, eftersom bitarna som kan inbäddas ibland är för stora för att vara användbara, och det innebär vissa begränsningar av layouten. I sådan fall kan koncepten att <link linkend="include_js"
>inkludera <literal role="extension"
>.js</literal
> filer</link
>, <link linkend="include_xml"
>inkludera <literal role="extension"
>.xml</literal
> filer</link
> och använda <link linkend="snippets"
>kodsnuttar</link
> vara mycket användbara (med se <link linkend="include_snippets_vs_embedding"
>funderingarna om när det är att föredra att använda inbäddning</link
>). </para>
	<para
>Dock ett varningens ord innan du börjar läsa: Koncepten kan göra det enklare att hantera många liknande insticksprogram, och kan förbättra insticksprogrammens underhåll och läsbarhet. Att gå för långt kan dock enkelt ge motsatt effekt. Använd med viss försiktighet. </para>
</sect1>
<sect1 id="include_js">
<title
>Använda JS include-sats</title>
	<para
>Det är enkelt att inkludera en skriptfil i en annan med &rkward; insticksprogram. Värden av det är omedelbart uppenbart om vissa delar av JS-koden är likadan mellan insticksprogram. Det går helt enkelt att definiera sådana delar i en separat <literal role="extension"
>.js</literal
>-fil och inkludera den i alla insticksprograms <literal role="extension"
>.js</literal
>-filer. Exempelvis så här: </para>
	<programlisting
>// det här är en fil som heter "common_functions.js"

function doCommonStuff () {
        // kanske hämta några alternativ, etc.
        // ...
        comment ("This is R code you want in several different plugins\n");
        // ...
}
        </programlisting>
	<programlisting
>// det här är en av de vanliga <literal role="extension"
>.js</literal
> filerna i ett insticksprogram

// inkludera common functions
include ("common_functions.js");

function calculate () {
        // gör någonting
        // ...

        // infoga den gemensamma koden
        doCommonStuff ();
}
        </programlisting>
	<para
>Observera att det ibland är ännu mer användbart att vända på det, och definiera <quote
>mallar</quote
> av funktionerna <function
>preprocess()</function
>, <function
>calculate()</function
> och <function
>printout()</function
> i en gemensam fil, och låta dem anropa tillbaka för delarna som är olika mellan insticksprogram. Exempelvis: </para>
	<programlisting
>// det här är en fil som heter "common_functions.js"

function calculate () {
        // gör någonting som är samma i alla insticksprogram
        // ...

        // lägg till något som är olika mellan insticksprogram
        getSpecifics ();

        // ...
}
        </programlisting>
	<programlisting
>// det här är en av de vanliga <literal role="extension"
>.js</literal
> filerna i ett insticksprogram

// inkludera common functions
include ("common_functions.js");

// observera: funktionen calculate() definieras inte här.
// den finns istället i common_functions.js.

function getSpecifics () {
        // skriv ut någon R-kod
}
        </programlisting>
	<para
>Ett problem som man måste vara medveten om när tekniken används är variabelräckvidd. Se JS-manualen om variabelräckvidd (variable scope). </para>
	<para
>Tekniken används flitigt i insticksprogrammen för fördelningsdiagram (distribution plot) och CLT-fördelningsdiagram (distribution CLT plot), så det kan vara värt att titta där för exempel. </para>
</sect1>

<sect1 id="include_xml">
<title
>Inkludera <literal role="extension"
>.xml</literal
>-filer</title>
	<para
>I stort sett samma funktion för att inkludera filer är också tillgänglig för användning i <literal role="extension"
>.xml</literal
>, &pluginmap; och <literal role="extension"
>.rkh</literal
>-filer. På vilket ställe som helst i filerna kan taggen <command
>&lt;include&gt;</command
> placeras, som visas nedan. Effekten är att hela innehållet i den &XML;-filen (för att vara exakt: allting inom taggen <command
>&lt;document&gt;</command
> i den filen) inkluderas ordagrant på det stället i filen. Observera att det bara går att inkludera en annan &XML;-fil. </para>
	<programlisting
>&lt;document&gt;
        [...]
        &lt;include file="en_annan_xml_fil.xml"/&gt;
        [...]
&lt;/document&gt;
        </programlisting>
	<para
>Egenskapen <parameter
>file</parameter
> är filnamnet relativt katalogen där den aktuella filen finns. </para>
</sect1>

<sect1 id="snippets">
<title
>Använda &lt;snippets&gt;</title>
	<para
>Medan det är ganska kraftfullt att inkludera filer som visas i <link linkend="include_xml"
>föregående avsnitt</link
>, blir det som mest användbart när det kombineras med <command
>&lt;snippets&gt;</command
>. De är egentligen mindre delar som kan infogas på ett annat ställe i filen. Det åskådliggörs bäst av ett exempel: </para>
	<programlisting
>&lt;document&gt;
        &lt;snippets&gt;
                &lt;snippet id="note"&gt;
                        &lt;frame&gt;
                                &lt;text&gt;
                Det här infogas på två ställen i det grafiska användargränssnittet
                                &lt;/text&gt;
                        &lt;/frame&gt;
                &lt;/snippet&gt;
        &lt;/snippets&gt;
        &lt;dialog label="test"&gt;
                &lt;column&gt;
                        &lt;insert snippet="note"/&gt;
                        [...]
                        &lt;insert snippet="note"/&gt;
                &lt;/column&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Sålunda definieras delen på ett ställe längst upp i &XML;-filen, och sedan infogas den på vilket eller vilka ställen som man vill med <command
>&lt;insert&gt;</command
>. </para>
	<para
>Medan exemplet inte är alltför användbart i sig, tänk på att kombinera det med en <literal role="extension"
>.xml</literal
>-fil inkluderad med <command
>&lt;include&gt;</command
>. Observera att det också går att placera delar för <literal role="extension"
>.rkh</literal
>-filen i samma fil. Man inkluderar helt enkelt filen där också med <command
>&lt;include&gt;</command
>, och infogar relevanta delar med <command
>&lt;insert&gt;</command
>: </para>
	<programlisting
>&lt;!-- Det här är en fil som heter "common_snippets.xml" --&gt;
&lt;document&gt;
        &lt;snippet id="common_options"&gt;
                &lt;spinbox id="någonting" [...]/&gt;
                [...]
        &lt;/snippet&gt;
        &lt;snippet id="common_note"&gt;
                &lt;text&gt;En viktig anmärkning för den här typen av insticksprogram&lt;/text&gt;
        &lt;/snippet&gt;

        &lt;snippet id="common_help"&gt;
                &lt;setting id="something"&gt;Det här gör någonting&lt;/setting&gt;
                [...]
        &lt;/snippet&gt;
&lt;/document&gt;
        </programlisting>
	<programlisting
>&lt;!-- Det här är insticksprogrammets .xml-fil --&gt;
&lt;document&gt;
        &lt;snippets&gt;
                &lt;!-- Importera common snippets --&gt;
                &lt;include file="common_snippets.xml"/&gt;
        &lt;/snippets&gt;

        &lt;dialog label="test2"&gt;
                &lt;insert snippet="common_note"/&gt;
                &lt;spinbox id="någonting_insticksprogramspecifikt" [...] /&gt;
                &lt;insert snippet="common_options"/&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>I likhet med att <link linkend="include_js"
>inkludera i JS</link
>, är det omvända tillvägagångssättet ofta ännu mer användbart: </para>
	<programlisting
>&lt;!-- Det här är en fil som heter "common_layout.xml" --&gt;
&lt;document&gt;
        &lt;column&gt;
                &lt;insert snippet="note"&gt;
                [...]
                &lt;insert snippet="plugin_parameters"&gt;
        &lt;/column&gt;
        [...]
&lt;/document&gt;
        </programlisting>
	<programlisting
>&lt;!-- Det här är insticksprogrammets .xml-fil --&gt;
&lt;document&gt;
        &lt;snippets&gt;
                &lt;snippet id="note"&gt;
                        &lt;text&gt;Anmärkningen använd för det här specifika insticksprogrammet&lt;/text&gt;
                &lt;/snippet&gt;

                &lt;snippet id="plugin_parameters"&gt;
                        &lt;frame label="Parametrar specifika för det här insticksprogrammet"&gt;
                                [...]
                        &lt;/frame&gt;
                &lt;/snippet&gt;
        &lt;/snippets&gt;

        &lt;dialog label="test3"&gt;
                &lt;include file="common_layout.xml"/&gt;
        &lt;/dialog&gt;
&lt;/document&gt;
        </programlisting>
	<para
>Till sist, är det också möjligt att infoga delar med <command
>&lt;insert&gt;</command
> i andra delar, under förutsättning att det för det första bara finns en nivå av inkapsling, och för det andra att sektionen med <command
>&lt;snippets&gt;</command
> placeras längst upp i filen (innan en inkapslad del infogas), beroende på att satser med <command
>&lt;insert&gt;</command
> hanteras uppifrån och ner. </para>
</sect1>

<sect1 id="include_snippets_vs_embedding">
<title
>&lt;include&gt; och &lt;snippets&gt; mot &lt;embed&gt;</title>
	<para
>Vid första ögonkastet tillhandahåller <command
>&lt;include&gt;</command
> och <command
>&lt;snippets&gt;</command
> funktionalitet som är ganska lik <link linkend="embedding"
>inbäddning</link
>: De möjliggör återanvändning av vissa delar av koden mellan insticksprogram. Vad är då skillnaden mellan tillvägagångssätten, och när ska man använda vilket? </para>
	<para
>Den avgörande skillnaden mellan koncepten är att inbäddningsbara insticksprogram utgör ett tätare kopplat paket. De kombinerar ett fullständigt grafiskt användargränssnitt, kod för att generera &R;-kod från det och en hjälpsida. I motsats till det, tillåter include och insert mycket finkornigare kontroll, men till priset av mindre modularitet. </para>
	<para
>Det vill säga, ett insticksprogram som inbäddar ett annat insticksprogram behöver typiskt inte veta mycket om det inbäddade insticksprogrammets interna detaljer. Ett utmärkt exempel är insticksprogrammet plot_options. Insticksprogram som vill inbädda det behöver inte nödvändigtvis känna till alla alternativ som tillhandahålls, och hur de tillhandahålls. Det är bra, eftersom annars skulle en ändring av insticksprogrammet plot_options göra det nödvändigt att justera alla insticksprogram som inbäddar det (många). I kontrast till det, exponerar include och insert alla de interna detaljerna, och insticksprogram som använder dem, måste exempelvis känna till exakt id och kanske till och med typ för de använda elementen. </para>
	<para
>Sålunda är tumregeln följande: include och insert är utmärkta om de relevanta alternativen bara behövs för en tydligt begränsat grupp av insticksprogram. Inbäddade insticksprogram är bättre om gruppen av insticksprogram som det kan vara användbart för inte är klart definierad, och om funktionaliteten enkelt kan modulariseras. En annan tumregel: om det går att placera de gemensamma delarna i ett enda <quote
>block</quote
>, gör det och använd inbäddning. Om det behövs många små delar för att definiera allt gemensamma, använd då <command
>&lt;snippets&gt;</command
>. Ett sista sätt att se på det: Om alla insticksprogram tillhandahåller <emphasis
>mycket</emphasis
> liknande funktionalitet, är include och insert troligen en god idé. Om de bara delar en eller två gemensamma <quote
>moduler</quote
> är inbäddning sannolikt bättre. </para>
</sect1>
</chapter>

<chapter id="specialized_plugins">
<title
>Koncept för användning i specialiserade insticksprogram</title>
<para
>Kapitlet innehåller information om några ämnen som bara är användbara för vissa klasser av insticksprogram. </para>

<sect1 id="specialized_plugins_plots">
	<title
>Insticksprogram som skapar ett diagram</title>
	<para
>Att skapa ett diagram från ett insticksprogram är lätt att göra. Dock finns det några subtila misstag att undvika, och också en del utmärkt generell funktionalitet som man bör vara medveten om. Det här avsnittet visar grundkoncepten, och avslutas med ett standardexempel som bör följas så snart diagraminsticksprogram skapas. </para>
	<sect2 id="rk_graph_on">
		<title
>Rita ett diagram i utmatningsfönstret</title>
		<para
>Använd <function
>rk.graph.on()</function
> direkt innan diagrammet skapas, och <function
>rk.graph.off()</function
> direkt efteråt, för att rita ett diagram i utmatningsfönstret. Det liknar t.ex. anrop av <function
>postscript()</function
> och <function
>dev.off()</function
> i en vanlig &R;-session. </para>
		<para
>Det är dock viktigt att <emphasis
>alltid</emphasis
> anropa <function
>rk.graph.off()</function
> efter att ha anropat <function
>rk.graph.on()</function
>. Annars lämnas utdatafilen i ett felaktigt tillstånd. För att försäkra att <function
>rk.graph.off()</function
> verkligen anropas, måste <emphasis
>alla</emphasis
> &R;-kommandon mellan de två anropen omges med en <function
>try()</function
>-sats. Har du aldrig hört talas om det? Var inte orolig, det är enkelt. Allt du behöver göra är att följa mönstret som visas i <link linkend="plot_plugin_example"
>exemplet</link
> nedan. </para>
	</sect2>
	<sect2 id="preview_plots">
		<title
>Lägga till funktionalitet för förhandsgranskning</title>
		<note
><para
>Det här avsnittet beskriver hur förhandsgranskningsfunktionalitet läggs till i insticksprogram som skapar diagram. Det finns separata avsnitt om <link linkend="preview_output"
>förhandsgranskning av (&HTML;-)utmatning</link
>, <link linkend="preview_data"
>förhandsgranskningar av (importerad) data</link
> och <link linkend="preview_custom"
>anpassade förhandsgranskningar</link
>. Dock rekommenderas du att läsa det här avsnittet först, eftersom tillvägagångssättet är liknande i alla tre fallen.</para
></note>
		<para
>En mycket användbar funktion för alla insticksprogram som skapar ett diagram eller graf är att tillhandahålla en förhandsgranskning med automatisk uppdatering. Det behövs två saker för att göra det: Tillägg av kryssrutan <command
>&lt;preview&gt;</command
> i <link linkend="mainxml"
>definitionen av det grafiska användargränssnittet</link
>, och justering av den <link linkend="jstemplate"
>genererade koden</link
> för förhandsgranskningen. </para>
		<para
>Att lägga till kryssrutan <command
>&lt;preview&gt;</command
> är enkelt. Placera bara följande någonstans i det grafiska användargränssnittet. Det tar hand om all magi bakom kulisserna för att skapa en förhandsgranskningsenhet, uppdatera förhandsgranskningen så fort inställningarna har ändrats, etc. Exempel: </para>
		<note
><para
>Från version 0.6.5 av &rkward; hanteras förhandsgranskningselement med <command
>&lt;preview&gt;</command
> speciellt i insticksprogrammens dialogrutor (inte guider). De placeras i knappkolumnen, oberoende av exakt var de definieras i användargränssnittet. Det är ändå en bra idé att definiera dem på ett vettigt ställe i layouten, för bakåtkompatibilitet. </para
></note>
		<programlisting
>&lt;document&gt;
                [...]
                &lt;dialog [...]&gt;
                        [...]
                        &lt;preview id="preview"/&gt;
                        [...]
                &lt;/dialog&gt;
                [...]
        &lt;/document&gt;
                </programlisting>
		<para
>Och det är allt för definitionen av det grafiska användargränssnittet. </para>
		<para
>Att justera JS-mallen är bara lite mer arbete. Här måste man säkerställa att bara själva diagrammet skapas, och visas på en skärmenhet, istället för att skickas som utdata, dvs. ingen utskrift av rubriker, <function
>rk.graphics.on()</function
>, eller liknande anrop. För att hjälpa till med det, anropar &rkward; funktionerna <function
>preprocess()</function
>, <function
>calculate()</function
> och <function
>printout()</function
> med en ytterligare parameter som ställs in till <parameter
>true</parameter
> när kod genereras för en förhandsgranskning. (Parametern utelämnas när den slutliga koden skapas. I Javascript utvärderas det som <parameter
>false</parameter
> när det används inne i en <function
>if</function
>-sats.) Se <link linkend="plot_plugin_example"
>exemplet</link
> nedan för det typiska mönstret man ska använda. </para>
		<para
>Som ett alternativ, om mer kontroll behövs än så här, kan man istället lägga till en ny funktion vid namn <function
>preview()</function
> i JS-mallen, och generera koden som krävs för en förhandsgranskning där (troligen, åtminstone delvis, igen genom att anropa <function
>calculate()</function
>, etc.). </para>
	</sect2>
	<sect2 id="plot_options">
		<title
>Generella diagramalternativ</title>
		<para
>Du har märkt att de flesta diagraminsticksprogram i &rkward; tillhandahåller ett stort antal generella alternativ, t.ex. för att anpassa axlarnas rubriker eller figurmarginaler. Det är enkelt att lägga till alternativen i ett insticksprogram. De tillhandahålls av ett <link linkend="embedding"
>inbäddningsbart</link
> insticksprogram som heter <command
>rkward::plot_options</command
>. Inbädda det i insticksprogrammets användargränssnitt så här: </para>
		<programlisting
>&lt;document&gt;
                [...]
                &lt;logic [...]&gt;
                        &lt;connect client="plotoptions.xvar" governor="x.available"/&gt;
                        &lt;set id="plotoptions.allow_type" to="true"/&gt;
                        &lt;set id="plotoptions.allow_ylim" to="true"/&gt;
                        &lt;set id="plotoptions.allow_xlim" to="false"/&gt;
                        &lt;set id="plotoptions.allow_log" to="false"/&gt;
                        &lt;set id="plotoptions.allow_grid" to="true"/&gt;
                &lt;/logic&gt;
                &lt;dialog [...]&gt;
                        [...]
                        &lt;embed id="plotoptions" component="rkward::plot_options" as_button="true" label="Plot Options"/&gt;
                        [...]
                &lt;/dialog&gt;
                [...]
        &lt;/document&gt;
                </programlisting>
		<para
>Det lägger till en knapp i användargränssnittet för att visa ett fönster med diagramalternativ. Sektionen logic är bara ett exempel. Den ger en viss kontroll över insticksprogrammet för diagramalternativ. Läs mer på insticksprogrammet plot_options hjälpsida (länkad från hjälpsidan i alla insticksprogram som tillhandahåller de generella alternativen). </para>
		<para
>Därefter måste du försäkra dig om att koden som motsvarar diagramalternativen läggs till i koden som genereras för ditt diagram. Hämta egenskaperna <command
>code.preprocess</command
>, <command
>code.printout</command
> och <command
>code.calculate</command
> från det inbäddade insticksprogrammet för diagramalternativ för att göra det, och infoga dem i din kod som visas i <link linkend="plot_plugin_example"
>exemplet</link
> nedan. </para>
	</sect2>
	<sect2 id="plot_plugin_example">
		<title
>Ett standardexempel</title>
		<para
>Här är ett exempel på en .JS-fil som bör användas som mall, så fort ett diagraminsticksprogram skapas: </para>
		<programlisting
>function preprocess () {
    // "somepackage" behövs för att skapa diagrammet
    echo ("require (somepackage)\n");
  }

  function printout (is_preview) {
    // Om "is_preview" tilldelas false/odefinierad,skapas fullständig kod, inklusive rubriker.
    // Om "is_preview" tilldelas true, skapas bara det viktigaste.

    if (!is_preview) {
      echo ('rk.header (' + i18n ("Ett exempeldiagram") + ')\n\n');
      echo ('rk.graph.on ()\n');
    }
    // bara följande del skapas när is_preview==true

    // kom ihåg att allting mellan rk.graph.on() och rk.graph.off() ska omges med en try()-sats:
    echo ('try ({\n');
    // infoga eventuell kod för inställning av alternativ som ska köras innan själva uppritningskommandona.
    // Själva koden tillhandahålls av det inbäddade insticksprogrammet för uppritningsalternativ. printIndentedUnlessEmpty() tar hand om snygg formatering.
    printIndentedUnlessEmpty ('\t', getString ("plotoptions.code.preprocess"), '', '\n');

    // skapa själva diagrammet. plotoptions.code.printout tillhandahåller de generella uppritningsalternativen
    // som måste läggas till i själva uppritningsanropet.
    echo ('plot (5, 5' + getString ("plotoptions.code.printout") + ')\n');

    // infoga eventuell kod för inställning av alternativ som ska köras efter själva uppritningen.
    printIndentedUnlessEmpty ('\t', getString ("plotoptions.code.calculate"), '\n');
    echo ('})'\n);  // avslutning av try()-satsen

    if (!is_preview) {
      echo ('rk.graph.off ()\n');
    }
  }
                </programlisting>
	</sect2>
</sect1>
<sect1>
	<title
>Förhandsgranskningar av data, utmatning och andra resultat</title>
	<sect2 id="preview_output">
		<title
>Förhandsgranskning av (HTML-)utmatning</title>
		<note
><para
>Det här avsnittet beskriver hur förhandsgranskningsfunktionalitet läggs till i insticksprogram som skapar utmatning eller HTML-utskrifter. Vi rekommenderar att du läser det separata avsnittet om <link linkend="preview_plots"
>förhandsgranskning av diagram</link
> innan det här avsnittet.</para
></note>
		<para
>Att skapa en förhandsgranskning av HTML-utmatning använder nästan samma procedur som att skapa en förhandsgranskning av ett diagram. I det här fallet måste man bara försäkra sig om att <command
>preview()</command
> genererar relevanta kommandon med <command
>rk.print()/rk.results()</command
>. Det är i allmänhet en god idé att utelämna rubriksatser i förhandsgranskningen. Här är ett avkortat exempel: </para>
		<programlisting
>&lt;!-- I insticksprogrammets XML-fil --&gt;>
        &lt;dialog label="Import CSV data" &gt;
                &lt;browser id="file" type="file" label="File name"/&gt;
                &lt;!-- [...] --&gt;>
                &lt;preview id="preview" mode="output"/&gt;
        &lt;/dialog&gt;
>
                </programlisting>
		<para
>Observera specifikationen av <parameter
>mode="output"</parameter
> i elementet <command
>&lt;preview&gt;</command
>. </para>
		<programlisting
>// In the plugin's JS file
        function preview () {
                // skapa koden som används för förhandsgranskningen
                printout (true);
        }

        function printout (is_preview) {
                // genererar bara en rubrik om is_preview==false
                if (!is_preview) {
                        new Header ("This is a caption").print ();
                }
                echo ('rk.print (result)');
        }
                </programlisting>
	</sect2>
	<sect2 id="preview_data">
		<title
>Förhandsgranskningar av (importerad) data</title>
		<note
><para
>Det här avsnittet beskriver hur förhandsgranskningsfunktionalitet läggs till i insticksprogram som skapar (importerar) data. Vi rekommenderar att du läser det separata avsnittet om <link linkend="preview_plots"
>förhandsgranskning av diagram</link
> innan det här avsnittet.</para
></note>
		<para
>Att skapa en förhandsgranskning av importerad data (vilken typ av data som helst som <command
>rk.edit()</command
> kan hantera), liknar mycket att skapa en <link linkend="preview_plots"
>förhandsgranskning av diagram</link
>. Följande avkortade exemplet bör hjälpa till att illustrera hur en dataförhandsgranskning skapas: </para>
		<programlisting
>&lt;!-- I insticksprogrammets XML-fil --&gt;>
        &lt;dialog label="Import CSV data" &gt;
                &lt;browser id="file" type="file" label="File name"/&gt;
                &lt;!-- [...] --&gt;>
                &lt;preview id="preview" active="true" mode="data"/&gt;
        &lt;/dialog&gt;
>
                </programlisting>
		<para
>Observera att elementet <command
>&lt;preview&gt;</command
> anger <parameter
>mode="data"</parameter
> den här gången. <parameter
>active="true"</parameter
> gör helt enkelt förhandsgranskningen normalt aktiv. </para>
		<programlisting
>// In the plugin's JS file
        function preview () {
                // genererar koden använd för förhandsgranskning
                calculate (true);
        }

        function calculate (is_preview) {
                echo ('imported &lt;- read.csv (file="' + getString ("file") /* [+ options] */);
                if (is_preview) {
                        echo ('preview_data &lt;- imported\n');
                } else {
                        echo ('.GlobalEnv$' + getString ("name") + ' &gt;- imported\n');
                }
        }

        function printout () {
                // [...]
        }
                </programlisting>
		<para
>Återigen genererar funktionen <command
>preview()</command
> nästan samma &R;-kod som funktionen <command
>calculate()</command
>, så vi skapar hjälpfunktionen <command
>doCalculate()</command
> för att plocka ut de gemensamma delarna. Det viktigaste att observera är att importerad data måste tilldelas till objektet som heter <parameter
>preview_data</parameter
> (inne i den aktuella, lokala, omgivningen). <emphasis
>Allt annat sker automatiskt</emphasis
> (grovt sett anropar &rkward; <command
>rk.edit(preview_data)</command
>, omgivet av ett anrop till <command
>.rk.with.window.hints()</command
>). </para>
		<note
><para
>Medan förhandsgranskningar är en utmärkt funktion, kräver de resurser. I fallet med dataförhandsgranskningar, kan det finnas fall då förhandsgranskningar kan orsaka betydande prestandaproblem. Det kan vara för import av mycket stora datamängder (som helt enkelt är för stora att öppna för redigering i &rkward;s editorfönster), men också för "normala" datamängder som kan importeras felaktigt, vilket skapar ett mycket stort antal rader eller kolumner. <emphasis
>Det rekommenderas starkt att <parameter
>preview_data</parameter
></emphasis
> begränsas till en dimension som ger en användbar förhandsgranskning, utan risk att skapa märkbara prestandaproblem (t.ex. 50 rader och  50 kolumner bör vara mer än tillräckligt i de flesta fall). </para
></note>
	</sect2>
	<sect2 id="preview_custom">
		<title
>Anpassade förhandsgranskningar</title>
		<para
>Elementet <command
>&lt;preview&gt;</command
> kan användas för att skapa förhandsgranskningar av godtycklig typ av "dokumentfönster" som kan anslutas till &rkward;s arbetsrymd. Förutom <link linkend="preview_plots"
>diagram</link
> och <link linkend="preview_data"
>datafönster</link
>, inkluderar det HTML-filer, &R;-skript och fönster med objektsammanfattningar. För de senare, måste <command
>&lt;preview mode="custom"&gt;</command
> användas. </para>
		<para
>Om du har läst avsnitten som beskriver förhandsgranskningar av diagram och data, bör du ha en allmän idé om proceduren, men förhandsgranskningar av typen "custom" kräver något mer manuellt arbete bakom kulisserna. Den viktigaste &R;-funktionen att titta på här är <command
>rk.assign.preview.data()</command
>. Följande korta listning visar hur den genererade &R;-koden (för förhandsgranskning) skulle kunna se ut för ett insticksprogram som skapar textfilutmatning: </para>
		<programlisting
>## Att genereras i kodsektionen preview() i ett insticksprogram
        pdata &lt;- rk.get.preview.data("SOMEID")
        if (is.null (pdata)) {
                outfile &lt;- rk.get.tempfile.name(prefix="preview", extension=".txt")
                pdata &lt;- list(filename=outfile, on.delete=function (id) {
                        unlink(rk.get.preview.data(id)$filename)
                })
                rk.assign.preview.data("SOMEID", pdata)
        }
        try ({
                cat ("This is a test", pdata$filename)
                rk.edit.files(file=pdata$filename)
        })
                </programlisting>
		<para
>Här ska värdet <parameter
>SOMEID</parameter
> hämtas från egenskapen <parameter
>id</parameter
> i elementet <command
>&lt;preview&gt;</command
>, dvs. genom att använda <command
>getString ("preview.id")</command
> i insticksprogrammets .js-fil. </para>
	</sect2>
</sect1>

<sect1 id="contextualized_plugins">
	<title
>Sammanhangsberoende insticksprogram</title>
	<para
>Hittills har vi antagit att alla insticksprogram alltid är meningsfulla, och alla placerade i huvudmenyn. Dock är vissa insticksprogram bara (eller mer) meningsfulla i vissa sammanhang. Exempelvis är ett insticksprogram för att exportera innehållet i en &R; X11-grafikenhet uppenbarligen mest användbar när den är placerad i menyn för en X11-enhet, inte i huvudmenyraden. Dessutom bör ett sådant insticksprogram känna till enhetsnumret som den ska arbeta med, utan att behöva fråga användaren om det. </para>
	<para
>Vi kallar sådana insticksprogram sammanhangsberoende. På motsvarande sätt är de inte (eller inte bara) placerade i huvudhierarkin i <link linkend="pluginmap"
>&pluginmap;-filen</link
> med <command
>&lt;hierarchy&gt;</command
>, utan istället i elementet <command
>&lt;context&gt;</command
>. Hittills stöds bara två olika sammanhang (fler kommer senare): x11 och filimport. Vi hanterar dem i tur och ordning. Även om du bara är intresserad av importsammanhanget, läs också gärna avsnittet om x11-sammanhanget, eftersom det är något mer utvecklat. </para>

	<sect2 id="context_x11">
		<title
>X11-enhetssammanhang</title>
		<para
>För att använda ett insticksprogram i sammanhang med en x11-enhet, det vill säga placera det i menyraden för fönstret som man får när <function
>x11()</function
> anropas i terminalen, deklarera det först som vanligt i filen <link linkend="pluginmap"
>&pluginmap;</link
>: </para>
		<programlisting
>&lt;document [...]&gt;
        &lt;components&gt;
                [...]
                &lt;component id="my_x11_plugin" file="my_x11_plugin.xml" label="An X11 context plugin"/&gt;
                [...]
        &lt;/components&gt;
                </programlisting>
		<para
>Dock behövs det inte definieras i hierarkin (det går, om det också är meningsfullt som ett insticksprogram på toppnivå): </para>
		<programlisting
>&lt;hierarchy&gt;
                [...]
        &lt;/hierarchy&gt;
                </programlisting>
		<para
>Lägg istället till en definition av sammanhanget "x11", och lägg till det i menyn där: </para>
		<programlisting
>&lt;context id="x11"&gt;
                [...]
                &lt;menu id="edit"&gt;
                        [...]
                        &lt;entry id="my_x11_plugin"/&gt;
                &lt;/menu&gt;
        &lt;/context&gt;
&lt;/document&gt;
                </programlisting>
		<para
>I insticksprogrammets XML-sektion <link linkend="logic"
>logic</link
>, kan nu två egenskaper deklareras med <command
>&lt;external&gt;</command
>: <parameter
>devnum</parameter
> och <parameter
>context</parameter
> (om deklarerad) sätts till <parameter
>"x11"</parameter
> när insticksprogrammet startas i det sammanhanget. <replaceable
>devnum</replaceable
> sätts till grafikenhetens nummer som ska arbetas med. Och det är allt. </para>
	</sect2>

	<sect2 id="context_import">
		<title
>Importdatasammanhang</title>
		<para
>Innan du läser det här avsnittet, se till att du har läst avsnittet om <link linkend="context_x11"
>X11-enhetssammanhang</link
>, eftersom det förklarar grundkoncepten. </para>
		<para
>Sammanhanget <replaceable
>"import"</replaceable
> används för att deklarera filterinsticksprogram för importfiler. De placeras helt enkelt i ett sammanhang med <parameter
>id=</parameter
><replaceable
>"import"</replaceable
> i &pluginmap;-filen. Dock finns det en extra knepighet när sådana insticksprogram deklareras: För att erbjuda en enhetlig filvalsdialogruta för alla filtyper som stöds, måste en del extra information deklareras för komponenten: </para>
		<programlisting
>&lt;document [...]&gt;
        &lt;components&gt;
                [...]
                &lt;component id="my_xyz_import_plugin" file="my_xyz_import_plugin.xml" label="Import XYZ files"&gt;
                        &lt;attribute id="format" value="*.xyz *.zyx" label="XYZ data files"/&gt;
                &lt;/component&gt;
                [...]
        &lt;/components&gt;
        &lt;hierarchy&gt;
                [...]
        &lt;/hierarchy&gt;
        &lt;context id="import"&gt;
                [...]
                &lt;menu id="import"&gt;
                        [...]
                        &lt;entry id="my_xyz_import_plugin"/&gt;
                &lt;/menu&gt;
        &lt;/context&gt;
        [...]
&lt;/document&gt;
                </programlisting>
		<para
>Egenskapslinjen talar helt enkelt om att de tillhörande filnamnsändelserna för XYZ-filer är <literal role="extension"
>*.xyz</literal
> eller <literal role="extension"
>*.zyx</literal
>, och att filtret ska namnges <quote
> XYZ data files</quote
> i filvalsdialogrutan. </para>
		<para
>Du kan deklarerar två egenskaper med <command
>&lt;external&gt;</command
> i insticksprogrammet. <parameter
>filename</parameter
> sätts till den valda filens namn, och <parameter
>context</parameter
> sätts till <replaceable
>"import"</replaceable
>. </para>
	</sect2>
</sect1>

<sect1 id="querying_r_for_info">
<title
>Begära information från &R;</title>
	<para
>I vissa fall kan man vilja hämta ytterligare information från &R;, som ska presenteras i insticksprogrammets användargränssnitt. Man kanske exempelvis vill erbjuda ett urval av nivåer för en faktor som användaren har valt att analysera. Från version 0.6.2 av &rkward; är det möjligt att göra det. Innan vi börjar är det viktigt att du är medveten om några förbehåll:</para>
	<para
>R-kod som körs inne i insticksprogrammets logik för användargränssnittet utvärderas i R:s händelsesnurra, vilket betyder att de kan köras <emphasis
>medan</emphasis
> andra beräkningar pågår. Det görs för att se till att insticksprogrammets användargränssnitt är användbart även när &R; är upptaget med att göra andra saker. Dock gör detta att det är mycket viktigt att koden inte har några sidoeffekter. I synnerhet:</para>
	<itemizedlist>
		<listitem
><para
>Gör <emphasis
>inte</emphasis
> några tilldelningar i .GlobalEnv eller några andra icke-lokala omgivningar.</para
></listitem>
		<listitem
><para
>Skriv <emphasis
>inte</emphasis
> ut någonting i utdatafilen.</para
></listitem>
		<listitem
><para
>Rita <emphasis
>inte</emphasis
> någonting på skärmen.</para
></listitem>
		<listitem
><para
>I allmänhet, gör <emphasis
>ingenting</emphasis
> som får sidoeffekter. Koden kan <emphasis
>läsa in information</emphasis
>, inte "<emphasis
>göra</emphasis
>" någonting.</para
></listitem>
	</itemizedlist>
	<para
>Med det i åtanke, här är det allmänna mönstret. Det används inne i en sektion med <link linkend="logic_scripted"
>skriptbaserad logik för användargränssnittet</link
>:</para>
	<programlisting
>&lt;script&gt;&lt;![CDATA[
                                last_command_id = -1;
                                gui.addChangeCommand ("variable", "update ()");
                                update = function () {
                                        gui.setValue ("selector.enabled", 0);
                                        variable = gui.getValue ("variable");
                                        if (variable == "") return;

                                        last_command_id = doRCommand ('levels (' + variable + ')', "commandFinished");
                                }

                                commandFinished = function (result, id) {
                                        if (id != last_command_id) return;  // ett annat resultat är på väg att anlända
                                        if (typeof (result) == "undefined") {
                                                gui.setListValue ("selector.available", Array ("ERROR"));
                                                return;
                                        }
                                        gui.setValue ("selector.enabled", 1);
                                        gui.setListValue ("selector.available", result);
                                }
                ]]&gt;&lt;/script&gt;
        </programlisting>
	<para
>Här är <parameter
>variable</parameter
> en egenskap som innehåller ett objektnamn (t.ex. inne i en <command
>&lt;varslot&gt;</command
>). Så snart den ändras, vill man uppdatera visningen av nivåer inne i <command
>&lt;valueselector&gt;</command
>, benämnd <parameter
>selector</parameter
>. Nyckelfunktionen här är <command
>doRCommand()</command
>, som har kommandosträngen att köra som första parameter, och namnet på en funktion att anropa när kommandot är klart som andra parameter. Observera att kommandot körs asynkront, och det gör saker och ting lite mer komplicerat. Man vill åtminstone försäkra sig om att <command
>&lt;valueselector&gt;</command
> förblir inaktiverad medan den inte innehåller aktuell information. En annan sak är att man potentiellt kan ha köat mer än ett kommando innan det första resultatet levereras. Det är därför varje kommando ges en "id", som vi lagrar i <parameter
>ast_command_id</parameter
> för senare referens.</para>
	  <para
>När kommandot är klart, anropas det angivna återanropet (<parameter
>commandFinished</parameter
> i det här fallet) med två parametrar: Själva resultatet, och id för motsvarande kommando. Resultatet har en typ som liknar representationen i &R;, dvs. ett numeriskt fält, om resultatet är numeriskt, etc. Det kan till och med vara en <command
>list()</command
> i &R;, men i det här fallet representeras det som en <command
>Array()</command
> i JS utan namn.</para>
	  <para
>Observera att till och med det här exemplet är något förenklat. I verkligheten bör man vidta ytterligare försiktighetsåtgärder, för att t.ex. undvika att lägga till ett extremt antal nivåer i väljaren. De goda nyheterna är att du troligtvis inte behöver göra allt själv. Exemplet ovan kommer från insticksprogrammet <command
>rkward::level_select</command
>, som du helt enkelt kan <link linkend="embedding"
>inbädda</link
> i ditt eget insticksprogram. Det låter dig till och med ange ett annat uttryck att köra istället för <command
>levels()</command
>.</para>
</sect1>

<sect1 id="current_object">
<title
>Referera till det aktuella objektet eller aktuella filen</title>
	<para
>I många insticksprogram är det önskvärt att arbeta med det aktuella objektet, <quote
>current</quote
>. Exempelvis skulle ett <quote
>sorteringsinsticksprogram</quote
> kunna välja data.frame som för närvarande redigeras för sortering i förväg. Namnet på det aktuella objektet är tillgängligt för insticksprogram som en fördefinierad egenskap vid namn <parameter
>current_object</parameter
>. Det går att ansluta till egenskapen på vanligt sätt. Om inget objekt är aktuellt, utvärderas egenskapen till en tom sträng. På liknande sätt är webbadressen för den aktuella skriptfilen tillgänglig som en fördefinierad egenskap som kallas <parameter
>current_filename</parameter
>. Egenskapen är tom om ingen skriptfil för närvarande redigeras, eller om skriptfilen inte ännu har sparats. </para>
	<para
>För närvarande kan <parameter
>current_object</parameter
> bara ha klassen <function
>data.frame</function
>, men förlita dig inte på det, eftersom det kommer att utökas till andra datatyper i framtiden. Om du bara är intresserad av objekt av klassen <function
>data.frame</function
>, anslut istället till egenskapen <parameter
>current_dataframe</parameter
>. Som alternativ kan typkrav påtvingas genom att använda lämpliga begränsningar för de använda <command
>&lt;varslot&gt;</command
>, eller genom att använda <link linkend="logic_scripted"
>skriptlogik för det grafiska användargränssnittet</link
>. </para>
</sect1>

<sect1 id="optionset">
	<title
>Repetera (ett antal) alternativ</title>
	<para
>Ibland vill man upprepa ett antal alternativ för att godtyckligt antal objekt. Antag t.ex. att du vill implementera ett insticksprogram för att sortera en data.frame. Du vill tillåta sortering enligt ett godtyckligt antal kolumner (i händelse av liket i den första kolumnen eller de första kolumnerna). Det skulle helt enkelt kunna realiseras genom att tillåta att användare väljer flera variabler i en <command
>&lt;varslot&gt;</command
> med <parameter
>multi="true"</parameter
>. Men om du vill utöka det, t.ex. tillåta att användaren anger om varje variabel ska konverteras till tecken eller ett nummer, eller om sorteringen ska vara stigande eller fallande, behövs större flexibilitet. Andra exempel skulle kunna vara uppritning av flera linjer i ett diagram (med möjlighet att välja objekt, linjestil, linjefärg, etc. för varje linje), eller ange en avbildning för att koda om från en mängd gamla värden till nya. </para>
	<para
>Här kommer <command
>&lt;optionset&gt;</command
> in. Låt oss föst ta en titt på ett enkelt exempel: </para>
		<programlisting
>&lt;dialog [...]&gt;
        [...]
        &lt;optionset id="set" min_rows="1"&gt;
                &lt;content&gt;
                        &lt;row&gt;
                                &lt;input id="firstname" label="Given name(s)" size="small"&gt;
                                &lt;input id="lastname" label="Family name" size="small"&gt;
                                &lt;radio id="gender" label="Gender"&gt;
                                        &lt;optioncolumn label="Male" value="m"/&gt;
                                        &lt;optioncolumn label="Female" value="f"/&gt;
                                &lt;/radio&gt;
                        &lt;/row&gt;
                &lt;/content&gt;

                &lt;optioncolumn id="firstnames" label="Given name(s)" connect="firstname.text"&gt;
                &lt;optioncolumn id="lastnames" label="Family name" connect="lastname.text"&gt;
                &lt;optioncolumn id="gender" connect="gender.string"&gt;
        &lt;/optionset&gt;
        [...]
&lt;/dialog&gt;
                </programlisting>
	<para
>Här skapade vi ett användargränssnitt för att ange ett antal personer (t.ex. upphovsmän). Användargränssnittet gräver minst en post (<parameter
>min_rows="1"</parameter
>). Inne i elementet <command
>&lt;optionset&gt;</command
> börjar vi med att ange innehållet med <command
>&lt;content&gt;</command
>, dvs, de element som hör till alternativmängden. Du bör redan vara bekant med de flesta elementen inne i <command
>&lt;content&gt;</command
>. </para
><para
>Därefter anger vi de intressanta variabler som vi vill läsa från alternativmängden i vår JS-fil. Eftersom vi hanterar ett godtyckligt antal objekt, kan vi inte bara läsa <function
>getString ("firstname")</function
> i JS. Istället anger vi en <command
>&lt;optioncolumn&gt;</command
> för varje intressant värde. För den första optioncolumn i exemplet, betyder <command
>&lt;connect="firstname.text"&gt;</command
> att innehållet i elementet <command
>&lt;input&gt;</command
>, "firstname", läses för varje objekt. Alla <command
>&lt;optioncolumn&gt;</command
> där en <parameter
>label</parameter
> anges visas på skärmen i en kolumn med den beteckningen. Nu kan vi hämta förnamnen på alla upphovsmän genom att använda <function
>getList("set.firstname")</function
>, <function
>getList("set.lastnames")</function
> för efternamnen, och <function
>getList("set.gender")</function
> för ett strängfält med "m" eller "f". </para>
	<para
>Observera att det inte finns några begränsningar för vad som kan placeras inne i <command
>&lt;optionset&gt;</command
>. Det går till och med att använda <link linkend="embedding"
>inbäddade</link
> komponenter. Precis som med alla andra element, är det enda man måste göra att samla utmatningsvariablerna av intresse i en specifikation med <command
>&lt;optioncolumn&gt;</command
>. I fallet med inbäddade insticksprogram, är det ofta en sektion med egenskapen "code". Till exempel: </para>
		<programlisting
>&lt;dialog [...]&gt;
        [...]
        &lt;optionset id="set" min_rows="1"&gt;
                &lt;content&gt;
                        [...]
                        &lt;embed id="color" component="rkward::color_chooser" label="Color"/&gt;
                &lt;/content&gt;

                [...]
                &lt;optioncolumn id="color_params" connect="color.code.printout"&gt;
        &lt;/optionset&gt;
        [...]
&lt;/dialog&gt;
                </programlisting>
	<para
>Man kan förstås också använda <link linkend="logic"
>gränssnittslogik</link
> inne i ett optionset. Det finns två sätt att göra det: Man kan skapa en anslutning (eller ett skript) i huvudsektionen <command
>&lt;logic&gt;</command
> av insticksprogrammet, som vanligt. Dock måste användargränssnittets element i innehållsregionen kommas åt som (t.ex.) "set.contents.firstname.XYZ". Observera prefixet "set" (det <parameter
>id</parameter
> som har tilldelats till mängden och "contents"). Som alternativ kan en separat sektion läggas till som ett underliggande objekt till <command
>&lt;optionset&gt;</command
> med <command
>&lt;logic&gt;</command
>. I detta fall, adresseras alla <parameter
>id</parameter
> relativt till innehållsregionen, t.ex. "firstname.XYZ". Endast elementet <command
>&lt;script&gt; </command
> tillåts inte i logiksektionen för ett optionset. Om skript ska användas, måste insticksprogrammets huvudsektion <command
>&lt;logic&gt;</command
> utnyttjas. </para>
	<note>
		<para
>När skriptlogik används i optionset, är allt man kan göra att komma åt <emphasis
>aktuell</emphasis
> innehållsregionen. Sålunda är den typiskt bara användbar för att ansluta element inne i innehållsregionen till varandra. Att ansluta en egenskap utanför <command
>&lt;optionset&gt;</command
> till en egenskap inne i innehållsregionen kan vara användbart för initiering. Dock gäller <emphasis
>inte</emphasis
> ändring av innehållsregionen efter initieringen objekten som användaren redan har definierat, bara objektet i mängden som för närvarande är markerat. </para>
	</note>
	<sect2 id="optionset_driven">
		<title
>"Drivna" optionsets</title>
		<para
>Hittills har vi betraktat ett <command
>&lt;optionset&gt;</command
> som tillhandahåller knappar för att lägga till eller ta bort objekt. Dock är det i vissa fall mycket naturligare att välja objekt utanför <command
>&lt;optionset&gt;</command
>, och bara tillhandahålla alternativ för att anpassa vissa aspekter av varje objekt i ett <command
>&lt;optionset&gt;</command
>. Antag t.ex. att du vill låta användaren rita upp flera objekt inne i ett diagram. Användaren ska kunna ange linjefärg för varje objekt. Du <emphasis
>skulle</emphasis
> kunna lösa det genom att lägga till en <command
>&lt;varselector&gt;</command
> och <command
>&lt;varslot&gt;</command
> inne i området <command
>&lt;content&gt;</command
>, vilket låter användaren välja ett objekt i taget. Dock blir det mycket färre klick för användaren, om <command
>&lt;varslut multi="true"&gt;</command
> används <emphasis
>utanför</emphasis
> <command
>&lt;optionset&gt;</command
> istället. Därefter ansluts de utvalda objekten till ett så kallat "drivet" optionset. Så här gör man: </para>
		<programlisting
>&lt;dialog [...]&gt;
        &lt;logic&gt;
                &lt;connect client="set.vars" governor="vars.available"/&gt;
                &lt;connect client="set.varnames" governor="vars.available.shortname"/&gt;
        &lt;/logic&gt;
        [...]
        &lt;varselector id="varsel"/&gt;
        &lt;varslot id="vars" label="Objects to plot"/&gt;
        &lt;optionset id="set" keycolumn="var"&gt;
                &lt;content&gt;
                        [...]
                        &lt;embed id="color" component="rkward::color_chooser" label="Line color"/&gt;
                &lt;/content&gt;

                [...]
                &lt;optioncolumn id="vars" external="true"&gt;
                &lt;optioncolumn id="varnames" external="true" label="Variable"&gt;
                &lt;optioncolumn id="color_params" connect="color.code.printout"&gt;
        &lt;/optionset&gt;
        [...]
&lt;/dialog&gt;
                </programlisting>
		<para
>Vi börjar med att titta på exemplet längst ner. Observera att två specifikationer av <command
>&lt;optioncolumn&gt;</command
> har <parameter
>external="true"</parameter
>. Det talar om för &rkward; att de kontrolleras från utsidan av <command
>&lt;optionset&gt;</command
>. Här är det enda syftet med alternativkolumnen "varnames" att tillhandahålla lättlästa beteckningar vid visning av optionset (den är ansluten till värdet "shortname" i egenskapen som innehåller de valda objekten). Syftet med alternativkolumnen "vars" är att fungera som "nyckelkolumn", enligt specifikationen <command
>&lt;optionset keycolumn="vars"...&gt;</command
>. Det betyder att för varje post i listan, erbjuder mängden en uppsättning alternativ, och alternativen är logiskt kopplade till posterna. Kolumnen är ansluten till egenskapen som innehåller de valda objekten i <command
>&lt;varslot&gt;</command
>. Det vill säga för varje objekt som är valt där, tillåter <command
>&lt;optionset&gt;</command
> att ange linjefärg. </para>
		<note>
			<para
>Externa kolumner kan också anslutas med <parameter
>connect</parameter
> till egenskaper inne i regionen <command
>&lt;content&gt;</command
>. Dock är det viktigt att observera att optioncolumns deklarerade med <parameter
>external="true"</parameter
> aldrig ska ändras inne i <command
>&lt;optionset&gt;</command
>, och optioncolumns deklarerade med <parameter
>external="false"</parameter
> (förval) aldrig ska ändras utanför <command
>&lt;optionset&gt;</command
>. </para>
		</note>
	</sect2>
	<sect2 id="optionset_alternatives">
		<title
>Alternativ: När optionsets inte ska användas</title>
		<para
>Att använda optionset är ett kraftfullt verktyg, men de kan ibland göra mer skada än nytta, eftersom de adderar betydande komplexitet, både från insticksprogramutvecklarens och användarens perspektiv. Tänk dig alltså för en extra gång innan du använder dem. Här är några råd: </para>
		<itemizedlist>
			<listitem
><para
>I några enkla fall kan elementet <command
>&lt;matrix&gt;</command
> vara ett användbart lättviktigt alternativ.</para
></listitem>
			<listitem
><para
>Låt inte insticksprogrammet göra för mycket. Vi gav exemplet att använda optionset för ett insticksprogram för att rita flera linjer i ett diagram. Men i allmänhet är det inte en god idé att skapa ett insticksprogram som producerar enskilda diagram för varje objekt i ett optionset. Låt istället insticksprogrammet skapa ett diagram, som användaren kan anropa flera gånger. </para
></listitem>
			<listitem
><para
>Om du inte förväntar dig mer än två eller tre objekt i en mängd, överväg att upprepa alternativen manuellt istället.</para
></listitem>
		</itemizedlist>
	</sect2>
</sect1>

</chapter>

<chapter id="chapter_dependencies">
<title
>Hantera beroenden och kompatibilitetsfrågor</title>
<sect1 id="sect_dependencies_rkward_version"
><title
>&rkward; versionskompatibilitet</title>
	<para
>Vi gör vårt bästa för att se till att insticksprogram utvecklade för en gammal version av &rkward; fortsätter fungera i senare versioner av &rkward;. Dock är det omvända inte alltid sant, eftersom nya funktioner läggs till. Eftersom inte alla användare kör senaste versionen av &rkward;, kan det betyda att ditt insticksprogram inte fungerar för alla.</para>
	<para
>När du är medveten om sådana kompatibilitetsproblem, bör du se till att detta faktum dokumenteras i din &pluginmap;-fil, genom att använda <command
>&lt;dependencies&gt;</command
>. Elementet <command
>&lt;dependencies&gt;</command
> kan antingen specificeras som ett direkt underliggande objekt till elementet &lt;document&gt; i en &pluginmap;, eller som underliggande objekt till individuella <command
>&lt;component&gt;</command
>-definitioner. I det första fallet, gäller beroendena <emphasis
>alla</emphasis
> insticksprogram i avbildningen. I det senare fallet bara de individuella komponenterna, <command
>&lt;component&gt;</command
>. Det går också att blanda toppnivå "globala" och "specifika" beroenden. I det fallet läggs de "globala" beroendena till de för individuella komponenter.</para>
	<para
>Låt oss titta på ett litet exempel:</para>
	<programlisting
>&lt;document ...&gt;
        &lt;dependencies rkward_min_version="0.5.0c" /&gt;
        &lt;components ...&gt;
                &lt;component id="myplugin" file="reduced_version_of_myplugin.xml" ...&gt;
                        &lt;dependencies rkward_max_version="0.6.0z" /&gt;
                &lt;/component&gt;
                &lt;component id="myplugin" file="fancy_version_of_myplugin.xml" ...&gt;
                        &lt;dependencies rkward_min_version="0.6.1" /&gt;
                &lt;/component&gt;
                ...
x        &lt;/components ...&gt;
&lt;/document&gt;
        </programlisting>
	<para
>I det här exemplet är det känt att alla insticksprogram kräver minst version 0.5.0c av &rkward;. Ett insticksprogram, med <replaceable
>id="myplugin"</replaceable
> tillhandahålls i två olika varianter. Den första, förenklade, versionen används för &rkward; versioner innan 0.6.1. Den senare utnyttjar funktioner som är nya i &rkward; 0.6.1 och används bara i &rkward; 0.6.1 och framåt.</para>
	<para
>Att tillhandahålla alternativa varianter på detta sätt är ett mycket användarvänligt sätt att utnyttja nya funktioner, och fortfarande behålla stöd för tidigare versioner av &rkward;. Alternativa versioner ska dela samma <parameter
>id</parameter
> (annars produceras varningar), och kan bara definieras <emphasis
>inne i samma</emphasis
> &pluginmap;-fil.</para>
	<para
>Insticksprogram som inte är kompatibla med versionen av &rkward; som kör, och som inte levereras med en alternativversion, ignoreras med en varning.</para>
	<note
><para
>I själva verket är &rkward; 0.6.1 den första versionen som tolkar beroenden, och rapporterar beroendefel, överhuvudtaget. Sålunda, i motsats till vad exemplet förespeglar, blir det ingen direkt effekt av att specificera några tidigare versioner i beroenden (men kan ändå vara en god idé i dokumentationssyfte).</para
></note>
	<para
><emphasis
>Ibland</emphasis
> kan det till och med vara möjligt att hantera inkompatibilitetsproblem mellan versioner <emphasis
>inne i</emphasis
> en enda &pluginmap;-fil, genom att använda elementet <command
>&lt;dependency_check&gt;</command
>, som beskrivs i nästa avsnitt.</para>
</sect1>
<sect1 id="sect_dependencies_r_version"
><title
>Kompatibilitet med &R;-version</title>
	<para
>I likhet med <parameter
>rkward_min_version</parameter
> och <parameter
>rkward_max_version</parameter
>, tillåter elementet <command
>&lt;dependencies&gt;</command
> att egenskaperna <parameter
>R_min_version</parameter
> och <parameter
>R_max_version</parameter
> anges. Dock finns följande skillnader:</para>
	<itemizedlist>
		<listitem
><para
>Insticksprogram som inte uppfyller kraven på &R;-version hoppas för närvarande <emphasis
>inte</emphasis
> över när en &pluginmap;-fil läses. Användaren kan ändå anropa insticksprogrammet, och ser inte någon omedelbar varning (i framtida versioner kommer troligen ett varningsmeddelande visas).</para
></listitem>
		<listitem
><para
>Som en konsekvens är det alltså <emphasis
>inte</emphasis
> möjligt att definiera alternativa versioner av ett insticksprogram beroende på vilken version av &R; som kör.</para
></listitem>
		<listitem
><para
>Dock är det oftast enkelt att uppnå bakåtkompatibilitet som visas nedan. Om du är medveten om kompatibilitetsproblem med &R;, fundera på att använda den här metoden istället för att definiera ett beroende av en viss version av &R;.</para
></listitem>
	</itemizedlist>
	<para
>I många fall är det lätt möjligt att tillhandahålla reducerad funktionalitet, om en viss funktion inte är tillgänglig i versionen av &R; som kör. Betrakta följande korta exempel på en <literal role="extension"
>.xml</literal
>-fil för ett insticksprogram:</para>
	<programlisting
>&lt;dialog [...]&gt;
        &lt;logic&gt;
                &lt;dependency_check id="ris210" R_min_version="2.10.0"/&gt;
                &lt;connect client="compression.xz.enabled" governor="ris210"/&gt;
        &lt;/logic&gt;
        [...]
        &lt;radio id="compression" label="Compression method"&gt;
                &lt;option label="None" value=""&gt;
                &lt;option label="gzip" value="gzip"&gt;
                &lt;option id="xz" label="xz" value="xz"&gt;
        &lt;/radio&gt;
        [...]
&lt;/dialog&gt;
        </programlisting>
	<para
>I exemplet inaktiveras helt enkelt komprimeringsalternativet "xz" när den körbara &R;-versionen är äldre än 2.10.0 (som inte stödde komprimering med xz). Elementet <command
>&lt;dependency_check&gt;</command
> stöder samma egenskaper som elementet <command
>&lt;dependencies&gt;</command
> i &pluginmap;-filer. Det skapar en Boolesk egenskap, som är sann om de angivna beroendena är uppfyllda, och annars falsk.</para>
</sect1>
<sect1 id="sect_dependencies_r_packages"
><title
>Beroenden av &R;-paket</title>
<para
>Beroenden på specifika &R;-paket kan definieras, men för &rkward; 0.6.1 kontrolleras varken sådana beroenden eller installeras/läses in automatiskt. De visas dock i insticksprogrammets hjälpfiler. Här är ett exempel på en definition:</para>
<programlisting
>&lt;dependencies&gt;
                &lt;package 
                        name="heisenberg"
                        min_version="0.11-2"
                        repository="http://rforge.r-project.org"
                /&gt;
        &lt;/dependencies&gt;
</programlisting>
<note
><para
>Försäkra dig alltid om att lägga till lämpliga anrop till <function
>require()</function
>, om insticksprogrammet kräver att vissa paket ska läsas in.</para
></note>
<note
><para
>Om <link linkend="external_plugins"
>en &pluginmap; distribueras som ett &R;-paket</link
>, och alla insticksprogram beror på ett visst paket, ska det beroendet definieras på &R;-paketnivå. Att definiera beroenden av &R;-paket på nivån för en &rkward; &pluginmap; är mest användbart om bara vissa av insticksprogrammen har beroendet, om paketet inte är tillgängligt från CRAN, eller för en &pluginmap; som inte distribueras som ett &R;-paket.</para
></note>
</sect1>
<sect1 id="sect_dependencies_other_pluginmaps"
><title
>Beroenden av andra &rkward; &pluginmap;</title>
	<para
>Om insticksprogram beror på insticksprogram definierade i en annan &pluginmap; (som <emphasis
>inte</emphasis
> ingår i paketet) kan beroendet definieras så här:</para>
<programlisting
>&lt;dependencies&gt;
                &lt;pluginmap 
                        name="heisenberg_plugins"
                        url="http://eternalwondermaths.example.org/hsb"
                /&gt;
        &lt;/dependencies&gt;
</programlisting>
<para
>För närvarande läses inte en saknad &pluginmap; in, eller installeras, eller varnas för, men åtminstone visas information om beroenden (och var de kan erhållas) på insticksprogrammens hjälpsidor. Man behöver inte (och ska inte) deklarera beroenden på en &pluginmap; som levereras med den officiella distributionen av &rkward;, eller för en &pluginmap; som är inne i det egna paketet. Dessutom, om en nödvändig &pluginmap; <link linkend="external_plugins"
>distribueras som ett &R;-paket</link
>, ska ett beroende av paketet deklareras (som visas i föregående avsnitt), istället för avbildningen.</para>
	<para
>För att se till att en nödvändig &pluginmap; verkligen läses in, använd taggen <command
>&lt;require&gt;</command
> (se <link linkend="pluginmapelements"
>referensen</link
> för detaljerad information).</para>
</sect1>
<sect1 id="sect_dependencies_example"
><title
>Ett exempel</title>
	<para
>För att klargöra hur beroendedefinitioner kan blandas, följer här ett kombinerat exempel:</para>
<programlisting
>&lt;document ...&gt;
        &lt;dependencies rkward_min_version="0.5.0c"&gt;
                &lt;package 
                        name="heisenberg"
                        min_version="0.11-2"
                        repository="http://rforge.r-project.org"
                /&gt;
                &lt;package 
                        name="DreamsOfPi"
                        min_version="0.2"
                /&gt;
                &lt;pluginmap 
                        name="heisenberg_plugins"
                        url="http://eternalwondermaths.example.org/hsb"
                /&gt;
        &lt;dependencies&gt;

        &lt;require map="heisenberg::heisenberg_plugins"/&gt;

        &lt;components ...&gt;
                &lt;component id="myplugin" file="reduced_version_of_myplugin.xml" ...&gt;
                        &lt;dependencies rkward_max_version="0.6.0z" /&gt;
                &lt;/component&gt;
                &lt;component id="myplugin" file="fancy_version_of_myplugin.xml" ...&gt;
                        &lt;dependencies rkward_min_version="0.6.1" /&gt;
                &lt;/component&gt;
                ...
x        &lt;/components ...&gt;
&lt;/document&gt;
</programlisting>
</sect1>
</chapter>

<chapter id="i18n">
	<title
>Översättning av insticksprogram</title>
	<para
>Hittills hara vi använd några få begrepp rörande översättningar, eller "i18n" (kort för "internationalization" som har 18 tecken mellan i och n), i förbigående. I det här kapitlet ger vi en mer djupgående redogörelse om i18n-funktionalitet för &rkward;-insticksprogram. I de flesta fall behövs <emphasis
>inte</emphasis
> allt detta i dina insticksprogram. Dock kan det vara en god idé att läsa igenom hela kapitlet, eftersom förståelse av begreppen hjälper dig att skapa insticksprogram som är fullständigt översättningsbara, och tillåta översättningar med hög kvalitet. </para>
	<sect1 id="i18n_general"
><title
>Allmänna hänsynstaganden</title>
		<para
>En viktigt sak att förstå om översättning av programvara, i motsats till översättning av annat textmaterial, är att översättare ofta har svårighet att få en fullständig bild av <emphasis
>vad</emphasis
> de översätter. Översättningar av programvara är av nödvändighet ofta baserad på ganska korta textfragment: Varje beteckning som anges för en <command
>&lt;option&gt;</command
> i en <command
>&lt;radio&gt;</command
>, varje sträng som markeras för översättning med ett funktionsanrop till <command
>i18n()</command
>, utgör en separat "översättningsenhet". I allt väsentligt, presenteras varje sådant fragment isolerat för översättaren. Nå, inte fullständigt isolerat, eftersom vi försöker ge översättaren så mycket meningsfullt sammanhang som kan extraheras automatiskt. Men på vissa ställen behöver översättare ytterligare sammanhang för att förstå en sträng, i synnerhet när strängarna är korta. </para>
	</sect1>
	<sect1 id="i18n_xml"
><title
>i18n i &rkward;s XML-filer</title>
		<para
>För &XML;-filer i &rkward;, kommer i18n oftast bara fungera. Om man skriver sin egen <command
>.pluginmap</command
> (t.ex. för ett <link linkend="external_plugins"
>externt insticksprogram</link
>), måste <replaceable
>po_id</replaceable
> anges intill <replaceable
>id</replaceable
> för pluginmap. Det definierar "meddelandekatalog" att använda. I allmänhet ska det vara identiskt med <replaceable
>id</replaceable
> för en <command
>.pluginmap</command
>, men om man tillhandahåller flera relaterade <command
>.pluginmap</command
> i ett enda paket, vill man troligen ange ett gemensamt <replaceable
>po_id</replaceable
> för alla. Ett <replaceable
>po_id</replaceable
> för en <command
>.pluginmap</command
>-fil ärvs av alla insticksprogram deklarerade i den, om de inte deklarerar annorlunda <replaceable
>po_id</replaceable
>. </para>
		<para
>För insticksprogram och hjälpsidor behöver man inte tala om för &rkward; vilka strängar som ska översättas, eftersom det i allmänhet är uppenbart av deras användning. Dock bör man hålla utkik efter strängar som kan vara tvetydiga eller kräver viss förklaring för att kunna översättas korrekt, som förklarades ovan. Ange <replaceable
>i18n_context</replaceable
> för strängar som kan ha olika betydelse, på följande sätt: </para>
		<programlisting
>&lt;checkbox id="scale" label="Scale" i18n_context="Show the scale"/&gt;
&lt;checkbox id="scale" label="Scale" i18n_context="Scale the plot"/&gt;
                </programlisting>
		<para
>Att ange <replaceable
>i18n_context</replaceable
> gör att de två strängarna översätts separat. Annars skulle de dela en enda översättning. Dessutom visas sammanhanget för översättaren. Egenskapen <replaceable
>i18n_context</replaceable
> stöd för alla element som kan ha översättningsbara strängar någonstans, inklusive element som har text inne i sig (t.ex. element som <command
>&lt;text&gt;</command
>). </para>
		<para
>I andra fall har strängen en enda otvetydig betydelse, men kan ändå behöva en viss förklaring. I detta fall kan en kommetar läggas till som visas för översättare. Exempel kan omfatta: </para>
		<programlisting
>&lt;!-- i18n: No, this is not a typo for screen plot! --&gt;
&lt;component id="scree_plot" label="Scree plot"/&gt;

&lt;!-- i18n: If you can, please make this string short. Having more than some 15 chars
looks really ugly at this point, and the meaning should be mostly self-evident to the
user (selection from a list of values shown next to this element) --&gt;
&lt;valueslot id="selected" label="Pick one"/&gt;
                </programlisting>
		<para
>Observera att sådana kommentarer måste föregå elementen de gäller, och måste antingen börja med "i18n" eller "TRANSLATORS:". </para>
		<para
>Till sist, i sällsynta fall kan man vilja undanta vissa strängar från översättning. Det kan vara vettigt om man till exempel erbjuder ett val mellan olika &R;-funktionsnamn via alternativknappar med <command
>&lt;radio&gt;</command
>. Då vill man inte att de ska översättas (men beroende på sammanhang, kanske man istället skulle fundera på att ge dem beskrivande beteckningar): </para>
		<programlisting
>&lt;radio id="transformation" label="R function to apply"&gt;
  &lt;option id="as.list" noi18n_label="as.list()"/&gt;
  &lt;option id="as.vector" noi18n_label="as.vector()"/&gt;
  [...]
&lt;/radio&gt;
                </programlisting>
		<para
>Observera att egenskapen <replaceable
>label</replaceable
> då ska utelämnas, och <replaceable
>noi18n_label</replaceable
> anges istället. Observera också, att i motsats till <replaceable
>i18n_context</replaceable
> och kommentarer, blir insticksprogrammet inte kompatibelt med versioner av &rkward; tidigare än 0.6.3 om <replaceable
>noi18n_label</replaceable
> används. </para>
	</sect1>
	<sect1 id="i18n_js"
><title
>i18n i &rkward;s JS-filer och sektioner</title>
		<para
>I motsats till <literal role="extension"
>.xml</literal
>-filerna, krävs mer eget arbete för att göra <literal role="extension"
>.js</literal
>-filerna i ett insticksprogram översättningsbara. Den stora skillnaden är att här finns det inget rimligt sätt att automatiskt avgöra om en sträng är avsedd att visas som en mänskligt läsbar sträng, eller är en bit kod. Man måste alltså markera det själv. Vi har redan visat exempel på det, hela tiden. Här är en fullständigare beskrivning av i18n-funktioner tillgängliga i js-kod, och några tips för komplexare fall: </para>
<variablelist>
<varlistentry>
	<term
><command
>i18n (msgid, [...])</command
></term>
	<listitem
><para
>Den viktigaste funktionen. Markerar strängen för översättning. Strängen (vare sig den översätts eller inte) returneras inom dubbla citationstecken (""). Ett godtyckligt antal platsmarkörer kan användas i strängen som visas nedan. Att använda sådana platsmarkörer istället för att sammanfoga små delsträngar gör det mycket lättare för översättare:</para>
		<programlisting
>i18n ("Compare objects %1 and %2", getString ('x'), getString ('y'));
                </programlisting
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>i18nc (msgctxt, msgid, [...])</command
></term>
	<listitem
><para
>Samma som <command
>i18n()</command
> men tillhandahåller dessutom ett meddelandesammanhang:</para>
		<programlisting
>i18nc ("proper name, not state of mind", "Mood test");
                </programlisting
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>i18np (msgid_singularis, msgid_pluralis, n, [...])</command
></term>
	<listitem
><para
>Samma som <command
>i18n()</command
> men för meddelanden som kan skilja sig i singularis och pluralis (och vissa språk skiljer på ännu fler numerus). Observera att precis som med <command
>i18n()</command
> kan ett godtyckligt antal ersättningar användas, men den första ('%1') krävs, och måste vara ett heltal.</para>
		<programlisting
>i18np ("Comparing a single pair", "Comparing %1 distinct pairs", n_pairs);
                </programlisting
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>i18ncp (msgctxt, msgid_singularis, msgid_pluralis, n, [...])</command
></term>
	<listitem
><para
><command
>i18np()</command
> med tillagt meddelandesammanhang.</para
></listitem>
</varlistentry>
<varlistentry>
	<term
><command
>comment (kommentar, [indentering])</command
></term>
	<listitem
><para
>Ekar en kodkommentar markerad för översättning. I motsats till övriga i18n()-funktioner citeras den inte, men tecknet '#' läggs till på varje kommentarrad.</para>
		<programlisting
>comment ("Transpose the matrix");
                        echo ('x &lt;- t (x)\n');
                </programlisting
></listitem>
</varlistentry>
</variablelist>
	<para
>För att lägga till kommentarer för översättarna (se <link linkend="i18n_xml"
>ovan</link
> för en diskussion om skillnaderna mellan kommentarer och sammanhang), lägg till en kommentar som börjar med "i18n:" eller "translators:" direkt ovanför <command
>i18n()</command
>-anropet  som ska kommenteras, till exempel: </para>
	<programlisting
>// i18n: Spelling is correct: Scree plot.
                echo ('rk.header (' + i18n ("Scree plot") + ')\n');
        </programlisting>

		<sect2 id="i18n_js_quoting"
><title
>i18n och citationstecken</title>
			<para
>I de flesta fall behöver man inte bekymra sig om hur i18n() beter sig när det gäller citationstecken. Eftersom översättningsbara strängar typiskt är stränglitteraler, är det helt rätt att citera dem, och det sparar en del skrivarbete. Dessutom är i18n()-strängar skyddade från duplicerade citationstecken i funktioner såsom <command
>makeHeaderCode()/Header()</command
> som normalt citerar sina argument. Väsentligen fungerar det genom att först skicka den översatta strängen via <command
>quote()</command
> (för att citera den) och därefter genom <command
>noquote()</command
> (för att skydda den från ytterligare citering). Om en översättningsbar sträng som inte är citerad behövs, använd <command
>i18n(noquote ("My message"))</command
>. Om en översättningsbar sträng måste citeras en andra gång, skicka den genom <command
>quote()</command
> <emphasis
>två gånger</emphasis
>. </para>
			<para
>Trots det, är det i allmänhet inte en god idé att göra bitar som funktionsnamn eller variabelnamn översättningsbara. För det första är &R;, programspråket, inneboende på engelska, och det finns ingen internationalisering av själva språket. Kodkommentarer är en annan best, men man bör använda funktionen <command
>comment()</command
> för dem. För det andra, genom att göra syntaktiskt relevanta delar av den genererade koden översättningsbara, kan översättningar faktiskt orsaka fel i insticksprogrammet, exempelvis om en intet ont anande översättare översätter en sträng som är avsedd som ett variabelnamn med två separata ord skilda åt med ett mellanslag. </para>
		</sect2>
	</sect1>
	<sect1 id="i18n_workflow"
><title
>Underhåll av översättningar</title>
		<para
>Nu när insticksprogrammet har gjorts översättningsbart, hur får man det faktiskt översatt? I allmänhet behöver man bara bekymra sig om det när ett <link linkend="external_plugins"
>externt insticksprogram</link
> utvecklas. För insticksprogram i &rkward;s huvudarkiv, görs allt magiskt åt dig. Här är det grundläggande arbetsflödet för externa insticksprogram. Observera att man måste ha "gettext"-verktygen installerade: </para>
		<itemizedlist>
			<listitem
><para
>Markera alla strängar, tillhandahåll sammanhang och kommentarer där det behövs</para
></listitem>
			<listitem
><para
>Kör <command
>python3 scripts/update_plugin_messages.py --extract-only /sökväg/till/min.pluginmap</command
>. Skriptet scripts/update_plugin_messages.py är för närvarande inte en del av källkodsutgåvorna, men finns när källkodsarkivet checkas ut.</para
></listitem>
			<listitem
><para
>Distribuera den resulterande filen <command
>rkward__<replaceable
>POID</replaceable
>.pot</command
> till översättarna. För externa insticksprogram rekommenderas att placera den i underkatalogen "po" i inst/rkward.</para
></listitem>
			<listitem
><para
>Översättaren öppnar filen i ett översättningsverktyg såsom <command
>lokalize</command
>. Även om du inte tänker göra någon översättning själv, bör du prova steget. Bläddra igenom de extraherade stängarna och titta efter problem eller tvetydigheter.</para
></listitem>
			<listitem
><para
>Översättaren sparar översättningar som <command
>rkward__<replaceable
>POID</replaceable
>.<replaceable
>xx</replaceable
>.po</command
> (där <replaceable
>xx</replaceable
> är språkkoden), och skickar tillbaka den till dig.</para
></listitem>
			<listitem
><para
>Kopiera <command
>rkward__<replaceable
>POID</replaceable
>.<replaceable
>xx</replaceable
>.po</command
> till din källkod, intill <command
>rkward__<replaceable
>POID</replaceable
>.pot</command
>. Kör <command
>python3 scripts/update_plugin_messages.py /path/to/my.pluginmap</command
> (observera: utan <replaceable
>--extract-only</replaceable
> den här gången). Det sammanfogar översättningen med eventuella senare ändringar av strängarna, kompilerar översättningen och installerar den i <command
><replaceable
>DIR_OF_PLUGINMAP</replaceable
>/po/<replaceable
>xx</replaceable
>/LC_MESSAGES/rkward__<replaceable
>POID</replaceable
>.mo</command
> (där <replaceable
>xx</replaceable
> återigen är språkkoden).</para
></listitem>
			<listitem
><para
>Du bör också inkludera den okompilerade översättningen (dvs. <command
>rkward__<replaceable
>POID</replaceable
>.<replaceable
>xx</replaceable
>.po</command
>) i distributionen, i underkatalogen "po".</para
></listitem>
			<listitem
><para
>För alla uppdateringar av insticksprogrammet, kör <command
>python3 scripts/update_plugin_messages.py /path/to/my.pluginmap</command
> för att uppdatera .pot-filen, liksom också de befintliga .po-filerna, och de kompilerade meddelandekatalogerna.</para
></listitem>
		</itemizedlist>
	</sect1>
	<sect1 id="i18n_translators"
><title
>Skriva översättningar för insticksprogram</title>
		<para
>Vi antar att du kan ditt hantverk som översättare, eller är villig att läsa på om det på annat håll. Dock några få ord särskilt om översättning av &rkward; insticksprogram: </para>
		<itemizedlist>
			<listitem
><para
>&rkward; insticksprogram gick inte att översätta förrän version 0.6.3, och var i de flesta fall inte skrivna med i18n i åtanke innan dess. Alltså kommer du att stöta på ganska många fler tvetydiga strängar, och andra problem med i18n, än i andra mogna projekt. Gå inte bara runt dem i tysthet, utan låt oss (eller underhållsansvariga för insticksprogrammet) få veta, så att vi kan fixa problemen.</para
></listitem>
			<listitem
><para
>Många insticksprogram i &rkward; hänvisar till mycket speciella termer från datahantering och statistik, men också från andra vetenskapliga fält. I många fall kräver en god översättning åtminstone grundkunskaper inom dessa fält. I vissa fall <emphasis
>finns</emphasis
> ingen god översättning för en teknisk term, och det bästa alternativet är att lämna termen oöversatt, eller inkludera den engelska termen inom parentes. Fokusera inte alltför mycket på att uppnå 100 % översatta strängar, utan fokusera på att erbjuda en bra översättning, även om det betyder att hoppa över vissa strängar (eller till och med hoppa över vissa meddelandekataloger i sin helhet). Andra användare kan ha möjlighet att fylla i eventuella luckor för tekniska termer.</para
></listitem>
		</itemizedlist>
	</sect1>
</chapter>

<chapter id="chapter_about_information">
<title
>Information om upphovsman, licens och version</title>
<para
>Så du har skrivit ett antal insticksprogram och är klar att <link linkend="external_plugins"
>att dela med dig av ditt arbete</link
>. För att vara säker på att användare vet vad ditt arbete handlar om, med vilka villkor de kan använda och distribuera det, och vem de ska kontakta om problem eller idéer, bör du lägga till en del information <emphasis
>om</emphasis
> insticksprogrammen. Det kan göras med elementet <command
>&lt;about&gt;</command
>, som antingen kan användas i en &pluginmap; eller i .xml-filer i enskilda insticksprogram (i båda fall som ett direkt underliggande objekt till dokumenttaggen). När det anges i en &pluginmap; gäller det alla insticksprogram. Om <command
>&lt;about&gt;</command
> anges på båda ställen, överskrider informationen i <command
>&lt;about&gt;</command
> i insticksprogrammets <literal role="extension"
>.xml</literal
>-fil den i &pluginmap;-filen. Det går också att lägga till elementet <command
>&lt;about&gt;</command
> på .rkh-sidor, som inte är kopplade till ett insticksprogram, om det finns behov av det.</para>
<para
>Nedan är ett exempel på en &pluginmap;-fil med bara några få förklaringar. I tveksamma fall, kan mer information finnas tillgänglig i referensen.</para>
<programlisting
>&lt;document 
        namespace="rkward"
        id="SquaretheCircle_rkward"
&gt;
        &lt;about 
                name="Square the Circle"
                shortinfo="Squares the circle using Heisenberg compensation."
                version="0.1-3"
                releasedate="2011-09-19"
                url="http://eternalwondermaths.example.org/23/stc.html"
                license="GPL"
                category="Geometry"
        &gt;
                &lt;author 
                        given="E.A."
                        family="Dölle"
                        email="doelle@eternalwondermaths.example.org"
                        role="aut"
                 /&gt;
                &lt;author 
                        given="A."
                        family="Assistant"
                        email="alterego@eternalwondermaths.example.org"
                        role="cre, ctb"
                 /&gt;
        &lt;/about&gt;
        &lt;dependencies&gt;
                ...
        &lt;/dependencies&gt;
        &lt;components&gt;
                ...
        &lt;/components&gt;
        &lt;hierarchy&gt;
                ...
        &lt;/hierarchy&gt;
&lt;/document&gt;
</programlisting>
<para
>Det mesta av det här bör vara självförklarande, så vi diskuterar inte varenda tagg-element. Men låt oss ta en titt på en del detaljer som troligen behöver några kommentarer för bättre förståelse. </para>
<para
>Elementet <parameter
>category</parameter
> i <command
>&lt;about&gt;</command
> kan definieras ganska fritt, men bör vara meningsfullt, eftersom det är avsett att ordna insticksprogram i grupper. Alla andra egenskaper i den inledande taggen krävs, och måste fyllas i med rimligt innehåll. </para>
<para
>Åtminstone en <command
>&lt;author&gt;</command
> med en giltig e-postadress och rollen <quote
>aut</quote
> (<quote
>author</quote
>) måste också anges. Ifall insticksprogrammet orsakar problem, eller någon skulle vilja dela sin tacksamhet med dig, bör det vara enkelt att kontakta någon som är inblandad. För ytterligare information om andra giltiga roller, såsom <quote
>ctb</quote
> för bidragsgivare av kod eller <quote
>cre</quote
> för paketunderhåll, se <ulink url="http://stat.ethz.ch/R-manual/R-patched/library/utils/html/person.html"
> R-dokumentation om <function
>person()</function
></ulink
>. </para>
<note
><para
>Kom ihåg att det går att använda <command
>&lt;include&gt;</command
> och/eller <command
>&lt;insert&gt;</command
> för att upprepa information i flera <literal role="extension"
>.xml</literal
>-filer (t.ex. information om en upphovsman som är inblandad i flera insticksprogram). <link linkend="sect_similar_plugins"
>Mer information</link
>.</para
></note>
<tip
><para
>Du måste inte skriva &XML;-koden för hand. Om du använder funktionen <function
>rk.plugin.skeleton()</function
> från <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
> och tillhandahåller all nödvändig information via alternativet <parameter
>about</parameter
>, skapas automatiskt en &pluginmap;-fil med en fungerande &lt;about&gt;-sektion åt dig.</para
></tip>
</chapter>

<chapter id="external_plugins">
<title
>Dela med dig av ditt arbete med andra</title>
<sect1 id="sect_external_plugins"
><title
>Externa insticksprogram</title>
	<para
>Från version 0.5.5 tillhandahåller &rkward; ett bekvämt sätt att installera ytterligare insticksprogram från tredje part, som inte hör till själva paketet. Vi kallar dem <quote
>externa insticksprogram</quote
>. De levereras i form av ett &R;-paket, och kan direkt hanteras via de vanliga pakethanteringsfunktionerna i &R; och/eller &rkward;. </para>
	<para
>Det här avsnittet av dokumentationen beskriver hur externa insticksprogram ska paketeras så att &rkward; kan använda dem. Hur själva insticksprogrammet skapas är förstås identiskt med föregående avsnitt. Det vill säga, det är troligen bäst att först skriva ett insticksprogram som fungerar, och därefter komma tillbaka hit för att ta reda på hur man distribuerar det. </para>
	<para
>Eftersom externa insticksprogram är en relativt sen funktion, kan detaljer av detta troligen komma att ändras i framtida utgåvor. Du är välkommen att bidra med dina idéer för att förbättra processen. </para>
	<tip>
		<para
>Dokumentationen förklarar detaljerna hos externa insticksprogram så att du kan lära dig hur de fungerar. Förutom det, ta en titt på paketet <link linkend="rkwarddev"
><application
>rkwarddev</application
></link
>, som konstruerats för att automatisera en stor del av skrivprocessen. </para>
	</tip>
</sect1>
<sect1 id="why_external_plugins">
<title
>Varför externa insticksprogram?</title>
	<para
>Antal paket för att utöka funktionaliteten hos &R; är redan enormt, och växande. Å ena sidan vill vi uppmuntra dig att skriva insticksprogram även för de mest specialiserade uppgifter som behöver lösas. Å andra sidan ska inte den vanliga användaren behöva gå vilse i jättestora menyträd fulla av okända statistiska termer. Därför verkade det rimligt att låta hanteringen av insticksprogram i &rkward; också vara riktigt modulär. &rkward;-gruppen underhåller sitt eget öppna paketarkiv på <ulink url="http://files.kde.org/rkward/R"
>http://files.kde.org/rkward/R</ulink
>, avsett att ta hand om externa insticksprogram. </para>
	<para
>Som en tumregel, bör insticksprogram som verkar tjäna ett syfte som används i stor utsträckning (t.ex. t-tester) ingå i det centrala paketet, medan de som betjänar en ganska begränsad grupp med särskilda intressen ska tillhandahållas som ett valfritt paket. För dig, som upphovsman till insticksprogram, är den bästa metoden att helt enkelt börja med ett externt insticksprogram. </para>
</sect1>
  
<sect1 id="structure_of_a_plugin_package">
<title
>Strukturen hos ett insticksprogrampaket</title>
	<para
>För att externa insticksprogram ska installeras och fungera riktigt, måste de följa några strukturella tumregler när det gäller deras filhierarki. </para>
    
	<sect2 id="file_hierarchy"
><title
>Filhierarki</title>
		<para
>Låt oss ta en titt på en prototypliknande filhierarki för ett komplicerat  insticksprogramarkiv. Man behöver inte inkludera alla de här katalogerna och/eller filerna för att ett insticksprogram ska fungera (läs vidare för att ta reda på vad som är absolut nödvändigt). Betrakta det här som en <quote
>bästa metodens</quote
> exempel: </para>
		<programlisting
>plugin_name/
                inst/
                        rkward/
                                plugins/
                                        plugin_name.xml
                                        plugin_name.js
                                        plugin_name.rkh
                                        ...
                                po/
                                        ll/
                                                LC_MESSAGES/
                                                        rkward__plugin_name_rkward.mo
                                        rkward__plugin_name_rkward.ll.po
                                        rkward__plugin_name_rkward.pot
                                tests/
                                        testsuite_name/
                                                RKTestStandards.sometest_name.rkcommands.R
                                                RKTestStandards.sometest_name.rkout
                                                ...
                                        testsuite.R
                                plugin_name.pluginmap
                                ...
        ChangeLog
        README
        AUTHORS
        LICENSE
        DESCRIPTION
                </programlisting>
		<note>
			<para
>I exemplet ska alla förekomster av <token
>plugin_name</token
>, <token
>testsuite_name</token
> och <token
>sometest_name</token
> ersättas med de riktiga namnen. Dessutom är <token
>ll</token
> en platsmarkör för en språkförkortning (t.ex. <quote
>de</quote
>, <quote
>en</quote
> eller <quote
>sv</quote
>). </para>
		</note>
		<tip>
			<para
>Du behöver inte skapa filhierarkin för hand. Om funktionen <function
>rk.plugin.skeleton()</function
> från <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
>, skapar den automatiskt alla nödvändiga filer och kataloger åt dig, utom katalogen <filename
>po</filename
> som skapas och hanteras av <link linkend="i18n_workflow"
>översättningsskriptet</link
>. </para>
		</tip>
		<sect3 id="basic_plugin_components">
		<title
>Grundläggande insticksprogramkomponenter</title>
			<para
>Det är nödvändig att inkludera minst tre filer: en <link linkend="pluginmap"
>&pluginmap;</link
>, en <link linkend="mainxml"
>.xml</link
>-beskrivning av ett insticksprogram, och en <link linkend="jstemplate"
>.js</link
>-fil för ett insticksprogram. Det vill säga, till och med katalogen "plugins" är valfri. Den kan dock hjälpa till att ge filerna en viss ordning, särskilt om mer än ett insticksprogram eller dialog inkluderas i arkivet, vilket förstås inte är något problem. Det går att ha så många kataloger för själva insticksprogramfilerna som anses lämpligt, de måste bara likna respektive <link linkend="pluginmap"
>&pluginmap;</link
>. Det är också till och med möjligt att inkludera flera &pluginmap;-filer, om det passar behoven, men då bör alla inkluderas i <quote
>plugin_name.pluginmap</quote
>. </para>
			<para
>Varje &R;-paket måste ha en giltig beskrivningsfil, <filename
>DESCRIPTION</filename
>, som också är väsentlig för att &rkward; ska känna igen att den tillhandahåller ett insticksprogram. Det mesta av informationen den bär med sig behövs också i insticksprogrammets <link linkend="chapter_about_information"
>meta-information</link
> och möjligen <link linkend="chapter_dependencies"
>beroenden</link
>, men med ett annat format (&R;-dokumentationen förklarar <ulink url="http://cran.r-project.org/doc/manuals/R-exts.html#The-DESCRIPTION-file"
>beskrivningsfilen <filename
>DESCRIPTION</filename
> i detalj</ulink
>). </para>
			<para
>Förutom det allmänna innehållet i <filename
>DESCRIPTION</filename
>-filen, se till att också inkludera raden <quote
>Enhances: rkward</quote
>. Det gör att &rkward; automatiskt söker igenom paketet efter insticksprogram om det är installerat. Ett exempel på en <filename
>DESCRIPTION</filename
>-fil ser ut så här: </para>
			<programlisting
>Package: SquaretheCircle
        Type: Package
        Title: Square the circle
        Version: 0.1-3
        Date: 2011-09-19
        Author: E.A. Dölle &lt;doelle@eternalwondermaths.example.org&gt;
        Maintainer: A. Assistant &lt;alterego@eternalwondermaths.example.org&gt;
        Enhances: rkward
        Description: Squares the circle using Heisenberg compensation.
        License: GPL
        LazyLoad: yes
        URL: http://eternalwondermaths.example.org/23/stc.html
        Authors@R: c(person(given="E.A.", family="Dölle", role="aut",
                        email="doelle@eternalwondermaths.example.org"),
                        person(given="A.", family="Assistant", role=c("cre",
                        "ctb"), email="alterego@eternalwondermaths.example.org"))
                        </programlisting>
			<tip>
				<para
>Du måste inte skriva filen för hand. Om du använder funktionen <function
>rk.plugin.skeleton()</function
> från <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
> och tillhandahåller all nödvändig information via alternativet <parameter
>about</parameter
>, skapas automatiskt en fungerande <quote
>DESCRIPTION</quote
>-fil åt dig. </para>
			</tip>
		</sect3>
		<sect3 id="additional_information">
		<title
>Ytterligare information (valfri)</title>
			<para
><filename
>ChangeLog</filename
>, <filename
>README</filename
>, <filename
>AUTHORS</filename
>, <filename
>LICENSE</filename
> bör vara självförklarliga och är helt valfria. I själva verket tolkas de inte av &rkward;, så de är istället avsedda att innehålla ytterligare information som kan vara relevant för t.ex. distributörer. Det mesta av deras relevanta innehåll (erkännanden av upphovsmän, licensvillkor, etc.)är dock ändå inkluderade i själva insticksprogrammets filer (se <link linkend="chapter_about_information"
>avsnittet om meta-information</link
>). Observera att alla filerna skulle också kunna placeras någonstans i katalogen "Inst", om man inte vill att de bara ska vara tillgängliga i källkodsarkivet utan också i det installerade paketet. </para>
		</sect3>
		<sect3 id="automated_plugin_testing">
		<title
>Automatiserad test av insticksprogram (valfri)</title>
			<para
>En annan valfri katalog är "tests", som är avsett att tillhandahålla filer som behövs för <ulink url="http://sourceforge.net/apps/mediawiki/rkward/index.php?title=Automated_Plugin_Testing"
>automatiserad test av insticksprogram</ulink
>. Testerna är användbara för att snabbt kontrollera om insticksprogrammet fortfarande fungerar med nya versioner av &R; eller &rkward;. Om du vill inkludera tester, bör du verkligen begränsa dig till namnkonventionen och hierarkin som visas här. Det vill säga, tester ska finnas i en katalog som heter <filename
>tests</filename
>, som inkluderar filen <filename
>testsuite.R</filename
> och en katalog med teststandarder namngivna efter lämplig testsvit. Du kan dock tillhandahålla mer än en testsvit: I så fall, om du inte vill lägga till alla i en enda <filename
>testsuite.R</filename
>, kan de t.ex. delas upp i en fil för varje testsvit och en <filename
>testsuite.R</filename
> skapas som har anrop till varje svit med <function
>source()</function
>. I båda fall, skapa separata underkataloger med teststandarder för varje definierad svit. </para>
			<para
>Fördelen med att upprätthålla strukturen är att tester av insticksprogram kan helt enkelt köras genom att anropa <function
>rktests.makplugintests()</function
> från paketet <ulink url="rkward://rhelp/rkwardtests"
>rkwardtests</ulink
> utan ytterligare argument. Ta en titt på dokumentationen på nätet i <ulink url="http://sourceforge.net/apps/mediawiki/rkward/index.php?title=Automated_Plugin_Testing"
>Automated Plugin Testing</ulink
> för ytterligare information. </para>
		</sect3>
	</sect2>
</sect1>
  
	<sect1 id="building_the_plugin_package">
		<title
>Bygga insticksprogrampaketet</title>
		<para
>Som tidigare förklarats, är externa &rkward;-insticksprogram i själva verket &R;-paket, och därför är paketeringsprocessen identisk. I motsats till "riktiga" &R;-paket, innehåller ett rent insticksprogrampaket inte någon ytterligare &R;-kod (även om man förstås också kan lägga till &rkward;-insticksprogram i vanliga &R;-paket, genom att använda samma metoder som förklaras här). Det bör göra det ännu enklare att skapa ett fungerade paket, under förutsättning att man har en giltig <filename
>DESCRIPTION</filename
>-fil och håller sig till filhierarkin som förklaras i <link linkend="structure_of_a_plugin_package"
>tidigare avsnitt</link
>.</para>
		<para
>Det enklaste sättet att faktiskt bygga och prova insticksprogrammet är att använda <application
>R</application
>-kommandot på kommandoraden, till exempel:</para>
		<para
><userinput
><command
>R</command
> <option
>CMD build</option
> <parameter
><filename
>SquaretheCircle</filename
></parameter
> </userinput
></para>
		<para
><userinput
><command
>R</command
> <option
>CMD INSTALL</option
> <parameter
><filename
>SquaretheCircle_0.1-3.tar.gz</filename
></parameter
> </userinput
></para>
		<tip
><para
>Paketet behöver inte byggas så här på kommandoraden. Om funktionen <function
>rk.build.package()</function
> i <link linkend="rkwarddev"
>paketet <application
>rkwarddev</application
></link
> används, bygger den och/eller kontrollerar insticksprogrammet åt dig.</para
></tip>
	</sect1>
</chapter>

<chapter id="rkwarddev">
	<title
>Utveckling av insticksprogram med paketet <application
>rkwarddev</application
></title>
	<sect1 id="rkdev_overview"
><title
>Översikt</title>
		<para
>Att skriva externa insticksprogram innefattar att skriva filer på tre språk (&XML;, &javascript; och R), och att skapa en standardiserad kataloghierarki. För att göra det mycket enklare för villiga utvecklare av insticksprogram, tillhandahåller vi paketet <application
>rkwarddev</application
>. Det tillhandahåller ett antal enkla &R;-funktioner för att skapa &XML;-koden för alla dialogelement som flikböcker, kryssrutor, kombinationslistor eller filbläddrare, samt funktioner för att skapa &javascript;-kod och &rkward; hjälpfiler att börja med. Funktionen <function
>rk.plugin.skeleton()</function
> skapar det förväntade katalogträdet och alla nödvändiga filer där det är meningen de ska finnas.</para>
		<para
>Paketet är inte normalt installerat, utan måste installeras för hand från <ulink url="http://files.kde.org/rkward/R/"
>&rkward;s eget arkiv</ulink
>. Du kan antingen göra det genom att använda det grafiska användargränssnittet (<menuchoice
><guimenu
>Inställningar</guimenu
> <guimenuitem
>Anpassa paket</guimenuitem
></menuchoice
>), eller från en godtycklig &R;-session som kör:</para>
		<programlisting
>install.packages("rkwarddev", repos="http://files.kde.org/rkward/R")
                library(rkwarddev)
                </programlisting>
		<para
>Paketet <application
>rkwarddev</application
> beror på ett annat litet paket som kallas <quote
>XiMpLe</quote
>, vilket är en mycket enkel &XML;-tolk och generator som också finns i samma arkiv.</para>
		<para
>Hela <ulink url="http://http://files.kde.org/rkward/R/pckg/rkwarddev/rkwarddev.pdf"
>dokumentationen på PDF-format</ulink
> hittas också där. En mer detaljerad introduktion till att arbeta med paketet hittas i <ulink url="http://files.kde.org/rkward/R/pckg/rkwarddev/rkwarddev_vignette.pdf"
>rkwarddev vinjetten</ulink
>.</para>
	</sect1>

	<sect1 id="rkdev_example"
><title
>Praktiskt exempel</title>
		<para
>För att ge dig en idé om hur det ser ut att <quote
>skapa ett insticksprogram med skript</quote
>, jämfört med den direkta metod som du har sett i tidigare kapitel, skapar vi hela t-test insticksprogrammet igen, denna gång bara med &R;-funktionerna i paketet <application
>rkwarddev</application
>.</para>

		<tip
><para
>Paketet lägger till en ny dialogruta i det grafiska användargränssnittet i &rkward; under <menuchoice
><guimenu
>Arkiv</guimenu
> <guimenuitem
>Export</guimenuitem
><guimenuitem
>Skapa &rkward; insticksprogramskript</guimenuitem
></menuchoice
>. Som namnet anger, kan insticksprogrammallar för vidare redigering skapas med det. Dialogrutan själv skapades i sin tur av ett <application
>rkwarddev</application
>-skript, som finns i katalogen <quote
>demo</quote
> i det installerade paketet och paketkällkoden, som ett ytterligare exempel. Det går också att köra det genom att anropa <function
>demo("skeleton_dialog")</function
>.</para
></tip>

		<sect2 id="rkdev_gui"
><title
>Beskrivning av det grafiska användargränssnittet</title>
		<para
>Man märker omedelbart att arbetsflödet är betydligt annorlunda: I motsats till att skriva XML-koden direkt, börjar man inte med definitionen av <command
>&lt;document&gt;</command
>, utan direkt med elementen i insticksprogram som man vill ha i dialogrutan. Det går att tilldela alla gränssnittselement, vare sig de är kryssrutor, kombinationsmenyer, variabelplatser eller någonting annat, till individuella &R;-objekt och därefter kombinera dessa objekt till det verkliga grafiska användargränssnittet. Paketet har funktioner för <link linkend="interfaceelements"
>varje XML-tagg</link
> som kan användas för att definiera insticksprogrammets grafiska användargränssnitt och de flesta har till och med samma namn, förutom prefixet <function
>rk.XML.*</function
>. Att exempelvis definiera ett <command
>&lt;varselector&gt;</command
>- och två <command
>&lt;varslot&gt;</command
>-element för variablerna <replaceable
>"x"</replaceable
> och <replaceable
>"y"</replaceable
> i t-testen kan göras med:</para>
		<programlisting
>variables &lt;- rk.XML.varselector(id.name="vars")
var.x &lt;- rk.XML.varslot("compare", source=variables, types="number", required=TRUE, id.name="x")
var.y &lt;- rk.XML.varslot("against", source=variables, types="number", required=TRUE, id.name="y")
                </programlisting>
		<para
>Den mest intressanta detaljen är troligen <parameter
>source=</parameter
><replaceable
>variabler</replaceable
>: En framträdande funktion i paketet är att alla funktioner kan skapa automatiska id, så att man inte behöver vare sig bry sig om att tänka på <parameter
>id</parameter
>-värden eller komma ihåg dem för att referera till ett specifikt element i insticksprogrammet. Man kan helt enkelt ange &R;-objekten som referens, eftersom alla funktioner som behöver en id från något annat element också kan läsa det från dessa objekt. <function
>rk.XML.varselector()</function
> är något speciell, eftersom den oftast inte har något särskilt innehåll att skapa en id från (den kan göra det, men bara om du anger en beteckning), så vi måste ange ett id-namn. Men <function
>rk.XML.varslot()</function
> skulle inte behöva argumenten <parameter
>id.name</parameter
> här, så följande skulle vara nog:</para>
		<programlisting
>variables &lt;- rk.XML.varselector(id.name="vars")
var.x &lt;- rk.XML.varslot("compare", source=variables, types="number", required=TRUE)
var.y &lt;- rk.XML.varslot("against", source=variables, types="number", required=TRUE)
                </programlisting>
		<para
>För att återskapa exempelkoden exakt, skulle alla id värden behöva ställas in för hand. Men eftersom paketet är avsett att göra livet enklare, bryr vi oss inte om det längre.</para>
		<tip>
			<para
><application
>rkwarddev</application
> har möjlighet att automatisera en hel del för att hjälpa till att skapa insticksprogram. Dock kanske det är att föredra att inte använda det fullt ut. Om målet är att skapa kod som inte bara fungerar, men är lättläst och jämförbart med genereringsskriptet av en person, bör man fundera på att alltid ange användbara id med <parameter
>id.name</parameter
>. Namngivning av &R;-objekt identiska med dessa id, hjälper också för att få skriptkod som är lätt att förstå. </para>
		</tip>
		<para
>Om man vill se hur XML-koden för det definierade elementet ser ut om det exporterades till en fil, kan objektet bara anropas enligt namn. Om man nu anropar <quote
>var.x</quote
> i &R;-sessionen, bör man se någonting som liknar det här:</para>
		<programlisting
>&lt;varslot id="vrsl_compare" label="compare" source="vars" types="number" required="true" /&gt;
                </programlisting>
		<para
>Vissa taggar är bara användbara i sammanhang med andra. Därför finns exempelvis inte någon funktion för taggen <command
>&lt;option&gt;</command
>. Istället definieras både alternativknappar och kombinationslistor så att deras alternativ inkluderas som en namngiven lista, där namnen representerar beteckningar som ska visas i dialogrutan, och deras värden är en namngiven vektor som kan ha två poster, <parameter
>val</parameter
> för alternativets värde och Boolean <parameter
>chk</parameter
> för att ange att alternativet normalt ska kontrolleras.</para>
		<programlisting
>test.hypothesis &lt;- rk.XML.radio("using test hypothesis",
        options=list(
                "Two-sided"=c(val="two.sided"),
                "First is greater"=c(val="greater"),
                "Second is greater"=c(val="less")
        )
)
                </programlisting>
		<para
>Resultatet ser ut så här:</para>
		<programlisting
>&lt;radio id="rad_usngtsth" label="using test hypothesis"&gt;
        &lt;option label="Two-sided" value="two.sided" /&gt;
        &lt;option label="First is greater" value="greater" /&gt;
        &lt;option label="Second is greater" value="less" /&gt;
&lt;/radio&gt;
                </programlisting>
		<para
>Allt som saknas för elementen under fliken <quote
>Basic settings</quote
> är kryssrutan för parade samplingar, och strukturering av alla elementen i rader och kolumner.</para>
		<programlisting
>check.paired &lt;- rk.XML.cbox("Paired sample", value="1", un.value="0")
basic.settings &lt;- rk.XML.row(variables, rk.XML.col(var.x, var.y, test.hypothesis, check.paired))
                </programlisting>
		<para
><function
>rk.XML.cbox()</function
> är ett ovanligt undantag där funktionsnamnet inte innehåller hela taggnamnet, för att minska skrivbördan för det här ofta använda elementet. Det här är vad <function
>basic.settings</function
> nu innehåller:</para>
		<programlisting
>&lt;row id="row_vTFSPP10TF"&gt;
        &lt;varselector id="vars" /&gt;
        &lt;column id="clm_vrsTFSPP10"&gt;
                &lt;varslot id="vrsl_compare" label="compare" source="vars" types="number" required="true" /&gt;
                &lt;varslot id="vrsl_against" label="against" i18n_context="compare against" source="vars" types="number" required="true" /&gt;
                &lt;radio id="rad_usngtsth" label="using test hypothesis"&gt;
                        &lt;option label="Two-sided" value="two.sided" /&gt;
                        &lt;option label="First is greater" value="greater" /&gt;
                        &lt;option label="Second is greater" value="less" /&gt;
                &lt;/radio&gt;
                &lt;checkbox id="chc_Pardsmpl" label="Paired sample" value="1" value_unchecked="0" /&gt;
        &lt;/column&gt;
&lt;/row&gt;
                </programlisting>
		<para
>På ett liknande sätt, skapar följande rader &R;-objekt för elementen under fliken <quote
>Options</quote
>, inklusive funktioner för nummerrutor, ramar och utsträckning:</para>
		<programlisting
>check.eqvar &lt;- rk.XML.cbox("assume equal variances", value="1", un.value="0")
conf.level &lt;- rk.XML.spinbox("confidence level", min=0, max=1, initial=0.95)
check.conf &lt;- rk.XML.cbox("print confidence interval", val="1", chk=TRUE)
conf.frame &lt;- rk.XML.frame(conf.level, check.conf, rk.XML.stretch(), label="Confidence Interval")
                </programlisting>
		<para
>Nu är allt vi behöver göra att lägga ihop objekten i en flikbok, och placera den i en dialogsektion:</para>
		<programlisting
>full.dialog &lt;- rk.XML.dialog(
        label="Two Variable t-Test",
        rk.XML.tabbook(tabs=list("Basic settings"=basic.settings, "Options"=list(check.eqvar, conf.frame)))
)
                </programlisting>
		<para
>Vi kan också skapa guidesektionen med dess två sidor genom att använda samma objekt, så att deras id extraheras för taggarna <command
>&lt;copy&gt;</command
>:</para>
		<programlisting
>full.wizard &lt;- rk.XML.wizard(
                label="Two Variable t-Test",
                rk.XML.page(
                        rk.XML.text("As a first step, select the two variables you want to compare against
                                each other. And specify, which one you theorize to be greater. Select two-sided,
                                if your theory does not tell you, which variable is greater."),
                        rk.XML.copy(basic.settings)),
                rk.XML.page(
                        rk.XML.text("Below are some advanced options. It's generally safe not to assume the
                                variables have equal variances. An appropriate correction will be applied then.
                                Choosing \"assume equal variances\" may increase test-strength, however."),
                        rk.XML.copy(check.eqvar),
                        rk.XML.text("Sometimes it's helpful to get an estimate of the confidence interval of
                                the difference in means. Below you can specify whether one should be shown, and
                                which confidence-level should be applied (95% corresponds to a 5% level of
                                significance)."),
                        rk.XML.copy(conf.frame)))
                </programlisting>
		<para
>Det är allt för det grafiska användargränssnittet. Det globala dokumentet kombineras till sist av <function
>rk.plugin.skeleton()</function
>.</para>
		</sect2>

		<sect2 id="rkdev_jscode"
><title
>&javascript;-kod</title>
			<para
>Hittills kanske det inte verkar som användning av paketet <application
>rkwarddev</application
> har hjälpt så mycket. Det kommer att ändras nu.</para>
			<para
>För det första, precis som vi inte behövde bry oss om id för elementen när layouten av det grafiska användargränssnittet definierades, behöver vi inte bry oss om namn på &javascript;-variabler i nästa steg. Om man vill ha större kontroll, kan man skriva vanlig &javascript;-kod och få den inklistrad i den genererade filen. Men det är troligen mycket effektivare att göra det på sättet som i <application
>rkwarddev</application
>.</para>
			<para
>Framför allt behöver man inte definiera några variabler själv, eftersom <function
>rk.plugin.skeleton()</function
> kan söka igenom &XML;-koden och automatiskt definiera alla variabler som troligen behövs. Man skulle exempelvis inte bry sig om att inkludera en kryssruta om inte dess värde eller tillstånd senare används. Så vi kan börja skriva den verkliga &R;-koden som skapar JS omedelbart.</para>
			<tip
><para
>Funktionen <function
>rk.JS.scan()</function
> kan också söka igenom befintliga &XML;-filer efter variabler.</para
></tip>
			<para
>Paketet har några funktioner för JS-kodkonstruktioner som vanligtvis används i &rkward;-insticksprogram, såsom funktionen <function
>echo()</function
> eller villkor med <function
>if() {...} else {...}</function
>. Det finns några skillnader mellan JS och &R;, t.ex. används kommatecken för att konkatenera teckensträngar för funktionen <function
>paste()</function
> i &R;, medan för <function
>echo()</function
> i JS används <quote
>+</quote
>, och rader måste sluta med ett semikolon. Genom att använda &R;-funktionerna kan man nästan glömma bort skillnaderna och fortsätta skriva &R;-kod.</para>
			<para
>Funktionerna kan acceptera olika klasser av indataobjekt: Antingen vanlig text, &R;-objekt med XML-kod som ovan, eller i sin tur resultat från några andra JS-funktioner i paketet. I slutändan måste alltid <function
>rk.paste.JS()</function
> anropas, som beter sig på liknande sätt som <function
>paste()</function
>, men beroende på indataobjekt, ersätter dem med deras &XML; id, &javascript; variabelnamn eller till och med fullständiga &javascript; kodblock.</para>
			<para
>För t-test exemplet behöver vi två JS-objekt: Ett för att beräkna resultatet, och ett för att skriva ut dem i funktionen <function
>printout()</function
>.</para>
		<programlisting
>JS.calc &lt;- rk.paste.JS(
        echo("res &lt;- t.test (x=", var.x, ", y=", var.y, ", hypothesis=\"", test.hypothesis, "\""),
        js(
                if(check.paired){
                        echo(", paired=TRUE")
                },
                if(!check.paired &amp;&amp; check.eqvar){
                        echo(", var.equal=TRUE")
                },
                if(conf.level != "0.95"){
                        echo(", conf.level=", conf.level)
                },
                linebreaks=TRUE
        ),
        echo(")\n"),
        level=2
)

JS.print &lt;- rk.paste.JS(echo("rk.print (res)\n"), level=2)
                </programlisting>
		<para
>Som du kan se, tillhandahåller <application
>rkwarddev</application
> också en &R;-implementering av funktionen <function
>echo()</function
>. Den returnerar exakt en teckensträng med en giltig JS-version av sig själv. Du kanske också märker att alla &R;-objekten här är de vi skapade tidigare. De ersätts automatiskt av sina variabelnamn, så det bör vara riktigt intuitivt. Så snart bara den här ersättningen behövs, kan funktionen <function
>id()</function
> användas, som också returnerar exakt en teckensträng för alla objekt som anges (man kan säga att den beter sig som <function
>paste()</function
> med en mycket specifik objektsubstitution).</para>
    <para
>Funktionen <function
>js()</function
> är en omgivande funktion som låter dig använda &R;-villkor, <command
>if(){...} else {...}</command
> som du är van vid. De översätts direkt till JS-kod. Det bevarar också vissa operatorer som <command
>&lt;</command
>, <command
>&gt;=</command
> och <command
>||</command
>, så det går att jämföra &R;-objekten logiskt utan behov av citering för det mesta. Låt oss ta en titt på det resulterade objektet <quote
>JS.calc</quote
>, som nu har en teckensträng med följande innehåll:</para>
		<programlisting
>echo("res &lt;- t.test (x=" + vrslCompare + ", y=" + vrslAgainst + ", hypothesis=\"" + radUsngtsth + "\"");
        if(chcPardsmpl) {
                echo(", paired=TRUE");
        } else {}
        if(!chcPardsmpl &amp;&amp; chcAssmqlvr) {
                echo(", var.equal=TRUE");
        } else {}
        if(spnCnfdnclv != "0.95") {
                echo(", conf.level=" + spnCnfdnclv);
        } else {}
        echo(")\n");
                </programlisting>
    <note>
      <para
>Som alternativ till <function
>if()</function
>-villkor nästlade i <function
>js()</function
>, kan man använda funktionen <function
>ite()</function
>, som beter sig på liknande sätt som <function
>ifelse()</function
> i &R;. Dock är det oftast svårare att läsa villkorssatser skapade med <function
>ite()</function
>, och de bör ersättas med <function
>js()</function
> så fort det är möjligt. </para>
    </note>
		</sect2>

		<sect2 id="rkdev_pluginmap"
><title
>Insticksavbildning</title>
		<para
>Det här avsnittet är mycket kort: Vi behöver inte skriva en &pluginmap; alls, eftersom den kan skapas automatiskt av <function
>rk.plugin.skeleton()</function
>. Menyhierarkin kan anges via alternativet <parameter
>pluginmap</parameter
>:</para>
			<programlisting
>[...]
        pluginmap=list(
                name="Two Variable t-Test",
                hierarchy=list("analysis", "means", "t-Test"))
        [...]
                        </programlisting>
		</sect2>

		<sect2 id="rkdev_rkh"
><title
>Hjälpsida</title>
			<para
>Det här avsnittet är också mycket kort: <function
>rk.plugin.skeleton()</function
> kan inte skriva en hel hjälpsida med den information den har. Men den kan söka igenom &XML;-dokumentet efter element som troligen förtjänar att omnämnas på hjälpsidan, och automatiskt skapa en mall för vårt insticksprogram. Allt vi måste göra efteråt är att skriva några rader för varje sektion som listas.</para>
			<tip
><para
>Funktionen <function
>rk.rkh.scan()</function
> kan också söka igenom befintliga &XML;-filer för att skapa en mall för hjälpfilen.</para
></tip>
		</sect2>

		<sect2 id="rkdev_plugin_generator"
><title
>Generera insticksprogrammets filer</title>
			<para
>Nu kommer det sista steget, då vi lämnar över alla genererade objekt till <function
>rk.plugin.skeleton()</function
>:</para>
			<programlisting
>plugin.dir &lt;- rk.plugin.skeleton("t-Test",
        xml=list(
                dialog=full.dialog,
                wizard=full.wizard),
        js=list(
                results.header="Two Variable t-Test",
                calculate=JS.calc,
                printout=JS.print),
        pluginmap=list(
                name="Two Variable t-Test",
                hierarchy=list("analysis", "means", "t-Test")),
        load=TRUE,
        edit=TRUE,
        show=TRUE)
                        </programlisting>
			<para
>Filerna skapa normalt i en tillfällig katalog. De tre sista alternativen är inte nödvändiga, men mycket praktiska: <parameter
>load=</parameter
><replaceable
>TRUE</replaceable
> lägger automatiskt till det nya insticksprogrammet i &rkward;s inställning (eftersom det finns i en tillfällig katalog, och därför slutar existera när &rkward; stängs, tas det automatiskt bort igen av &rkward; vid nästa start), <parameter
>edit=</parameter
><replaceable
>TRUE</replaceable
> öppnar alla skapade filer för redigering i &rkward;s editorflikar, och <parameter
>show=</parameter
><replaceable
>TRUE</replaceable
> försöker att direkt starta insticksprogrammet, så att du kan undersöka hur det ser ut utan något klick. Du kan överväga att lägga till <parameter
>overwrite=</parameter
><replaceable
>TRUE</replaceable
> om du tänker köra skriptet upprepade gånger (t.ex. efter kodändringar), eftersom normalt skrivs inga filer över.</para>
			<para
>Resultatobjektet <quote
>plugin.dir</quote
> innehåller sökvägen till katalogen där insticksprogrammet skapades. Det kan vara användbart i kombination med funktionen <function
>rk.build.package()</function
> för att bygga ett verkligt &R;-paket, för att dela insticksprogrammet med andra, t.ex. genom att skicka det till &rkward;-utvecklingsgruppen för att läggas till i vårt insticksprogramarkiv.</para>
		</sect2>
		<sect2 id="rkdev_ttest_script"
><title
>Hela skriptet</title>
		<para
>För att rekapitulera allt det ovanstående, här är hela skriptet för att skapa det fungerande t-test exemplet. Som tillägg till koden som redan har förklarats, läser det också in paketet vid behov, och använder miljön <function
>local()</function
>, så att de skapade objekten inte hamnar i din nuvarande arbetsrymd (utom <quote
>plugin.dir</quote
> förstås):</para>
		<programlisting
>require(rkwarddev)

local({
        variables &lt;- rk.XML.varselector(id.name="vars")
        var.x &lt;- rk.XML.varslot("compare", source=variables, types="number", required=TRUE)
        var.y &lt;- rk.XML.varslot("against", source=variables, types="number", required=TRUE)
        test.hypothesis &lt;- rk.XML.radio("using test hypothesis",
                options=list(
                        "Two-sided"=c(val="two.sided"),
                        "First is greater"=c(val="greater"),
                        "Second is greater"=c(val="less")
                )
        )
        check.paired &lt;- rk.XML.cbox("Paired sample", value="1", un.value="0")
        basic.settings &lt;- rk.XML.row(variables, rk.XML.col(var.x, var.y, test.hypothesis, check.paired))

        check.eqvar &lt;- rk.XML.cbox("assume equal variances", value="1", un.value="0")
        conf.level &lt;- rk.XML.spinbox("confidence level", min=0, max=1, initial=0.95)
        check.conf &lt;- rk.XML.cbox("print confidence interval", val="1", chk=TRUE)
        conf.frame &lt;- rk.XML.frame(conf.level, check.conf, rk.XML.stretch(), label="Confidence Interval")

        full.dialog &lt;- rk.XML.dialog(
                label="Two Variable t-Test",
                rk.XML.tabbook(tabs=list("Basic settings"=basic.settings, "Options"=list(check.eqvar, conf.frame)))
        )

        full.wizard &lt;- rk.XML.wizard(
                        label="Two Variable t-Test",
                        rk.XML.page(
                                rk.XML.text("As a first step, select the two variables you want to compare against
                                        each other. And specify, which one you theorize to be greater. Select two-sided,
                                        if your theory does not tell you, which variable is greater."),
                                rk.XML.copy(basic.settings)),
                        rk.XML.page(
                                rk.XML.text("Below are some advanced options. It's generally safe not to assume the
                                        variables have equal variances. An appropriate correction will be applied then.
                                        Choosing \"assume equal variances\" may increase test-strength, however."),
                                rk.XML.copy(check.eqvar),
                                rk.XML.text("Sometimes it's helpful to get an estimate of the confidence interval of
                                        the difference in means. Below you can specify whether one should be shown, and
                                        which confidence-level should be applied (95% corresponds to a 5% level of
                                        significance)."),
                                rk.XML.copy(conf.frame)))

        JS.calc &lt;- rk.paste.JS(
                echo("res &lt;- t.test (x=", var.x, ", y=", var.y, ", hypothesis=\"", test.hypothesis, "\""),
                js(
                        if(check.paired){
                        echo(", paired=TRUE")
                        },
                        if(!check.paired &amp;&amp; check.eqvar){
                        echo(", var.equal=TRUE")
                        },
                        if(conf.level != "0.95"){
                        echo(", conf.level=", conf.level)
                        },
                        linebreaks=TRUE
                ),
                echo(")\n"), level=2)

        JS.print &lt;- rk.paste.JS(echo("rk.print (res)\n"), level=2)

        plugin.dir &lt;&lt;- rk.plugin.skeleton("t-Test",
                xml=list(
                        dialog=full.dialog,
                        wizard=full.wizard),
                js=list(
                        results.header="Two Variable t-Test",
                        calculate=JS.calc,
                        printout=JS.print),
                pluginmap=list(
                        name="Two Variable t-Test",
                        hierarchy=list("analysis", "means", "t-Test")),
                load=TRUE,
                edit=TRUE,
                show=TRUE,
                overwrite=TRUE)
})
                </programlisting>
		</sect2>

  </sect1>
  <sect1 id="rkwarddev_rkh"
><title
>Lägga till hjälpsidor</title>
    <para
>Om du vill skriva en hjälpsida för insticksprogrammet, är det mest rättframma sättet att göra det att direkt lägga till de specifika instruktionerna i definitionen av &XML;-elementen de hör till: </para>
    <programlisting
>variables &lt;- rk.XML.varselector(
  id.name="vars",
  help="Select the data object you would like to analyse.",
  component="Data"
)
    </programlisting>
    <para
>Texten som ges till parametern <parameter
>help</parameter
> kan då hämtas av <function
>rk.rkh.scan()</function
> och skrivas till hjälpsidan för den komponenten i insticksprogrammet. För att det ska fungera tekniskt, måste dock <function
>rk.rkh.scan()</function
> veta vilka &R;-objekt som hör till en komponenten i insticksprogrammet. Det är orsaken till att du också måste tillhandahålla parametern <parameter
>component</parameter
>, och se till att den är identisk för alla objekt som hör ihop. </para>
    <para
>Eftersom du oftast kombinerar många objekt i en dialogruta, och också kan vilja återanvända objekt som <command
>&lt;varslot&gt;</command
> för flera komponenter i dina insticksprogram, är det möjligt att definiera en komponent globalt med <function
>rk.set.comp()</function
>. Om det är gjort, antas att alla följande objekt som används i skriptet hör till den specifika komponent, tills <function
>rk.set.comp()</function
> anropas igen med ett annat komponentnamn. Då kan parametern <parameter
>component</parameter
> utelämnas: </para>
    <programlisting
>rk.set.comp("Data")
variables &lt;- rk.XML.varselector(
  id.name="vars",
  help="Select the data object you would like to analyse."
)
    </programlisting>
    <para
>För att lägga till allmänna sektioner som <command
>&lt;summary&gt;</command
> eller <command
>&lt;usage&gt;</command
> på hjälpsidan, används funktioner som <function
>rk.rkh.summary()</function
> eller <function
>rk.rkh.usage()</function
>. Deras resultat används sedan för att ange listelement som <parameter
>summary</parameter
> eller <parameter
>usage</parameter
> i parametern <parameter
>rkh</parameter
> för <function
>rk.plugin.component()</function
> och <function
>rk.plugin.skeleton()</function
>. </para>
	</sect1>
  <sect1 id="rkwarddev_i18n"
><title
>Översätta insticksprogram</title>
    <para
>Paketet <application
>rkwarddev</application
> klarar av att skapa externa insticksprogram med fullständigt stöd för i18n. Alla relevanta funktioner som genererar XML-objekt erbjuder en valfri parameter för att ange <replaceable
>i18n_context</replaceable
> eller <replaceable
>noi18n_label</replaceable
>: </para>
    <programlisting
>varComment &lt;- rk.XML.varselector(id.name="vars", i18n=list(comment="Main variable selector"))
varContext &lt;- rk.XML.varselector(id.name="vars", i18n=list(context="Main variable selector"))
cboxNoi18n &lt;- rk.XML.cbox(label="Power", id.name="power", i18n=FALSE)
    </programlisting>
    <para
>Exemplen ovan ger utmatning som ser ut så här:</para>
    <programlisting
># varComment
&lt;!-- i18n: Main variable selector --&gt;
  &lt;varselector id="vars" /&gt;

# varContext
&lt;varselector id="vars" i18n_context="Main variable selector" /&gt;

# cboxNoi18n
&lt;checkbox id="power" noi18n_label="Power" value="true" /&gt;
    </programlisting>
    <para
>Det finns också stöd för översättningsbar JS-kod. I själva verket försöker paketet lägga till anrop till <function
>i18n()</function
> direkt på platser där det oftast är till hjälp. Funktionen <function
>rk.JS.header()</function
> är ett bra exempel: </para>
    <programlisting
>jsHeader &lt;- rk.JS.header("Test results")
    </programlisting>
    <para
>Det producerar följande JS-kod:</para>
    <programlisting
>new Header(i18n("Test results")).print();
    </programlisting>
    <para
>Men det går också att markera strängar i JS-koden som översättningsbara för hand, genom att använda funktionen <function
>i18n()</function
> precis som man skulle göra om JS-filen skrevs direkt.</para>
  </sect1>
</chapter>

<appendix id="reference">
<title
>Referens</title>

<sect1 id="propertytypes"
><title
>Typer av egenskaper och modifierare</title>
<para
>På några ställen i den här introduktionen har vi talat om <quote
>egenskaper</quote
> hos element i det grafiska användargränssnittet eller annars. I själva verket finns det flera olika typer av egenskaper. Oftast behöver man inte bekymra sig om det, eftersom man kan använda sunt förnuft för att ansluta vilken egenskap som helst till vilken annan egenskap som helst. Dock finns det internt olika typer av egenskaper. När det har betydelse är när vissa särskilda värden hämtas i JS-mallen. I satser som getString ("id")/getBoolean ("id")/getList ("id") kan man också ange vissa så kallade <quote
>modifierare</quote
> på följande sätt: <function
>getString ("id.modifierare")</function
>. En modifierare påverkar på vilket sätt värdet skrivs ut. Läs vidare för listan över egenskaper, och de modifierare som var och en tillhandahåller. </para>
<variablelist>
<varlistentry>
<term
>Strängegenskaper</term>
<listitem
><para
>Den enklaste typen av egenskap, som helt enkelt används för att innehålla ett textstycke. Modifierare: <variablelist>
	<varlistentry>
	<term
>Ingen modifierare ("")</term>
	<listitem
><para
>Strängen som den definierades eller tilldelades.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>quoted</term>
	<listitem
><para
>Strängen i citerad form (lämplig att skicka till &R; som tecken).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Booleska egenskaper</term>
<listitem
><para
>Egenskaperna kan antingen vara på eller av, sanna eller falska. Exempelvis egenskaper skapade av &lt;convert&gt;-taggar, samt egenskapen som följer en &lt;checkbox&gt; (se nedan). Följande värden returneras enligt angiven modifierare: <variablelist>
	<varlistentry>
	<term
>Ingen modifierare ("")</term>
	<listitem
><para
>Normalt returnerar egenskapen 1 om den är sann, och 0 annars. Det rekommenderade sättet att hämta Booleska värden är att använda <function
>getBoolean()</function
>. Observera att för <function
>getString()</function
> returneras strängen "0" när egenskapen är falsk. Strängen kan utvärderas som sann, inte falsk, i JS.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"labeled"</term>
	<listitem
><para
>Returnerar strängen "true" när sann, "false" när falsk, eller de egna strängarna som har angivits (typiskt i en &lt;checkbox&gt;).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"true"</term>
	<listitem
><para
>Returnerar strängen som om egenskapen var sann, även om den är falsk</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"false"</term>
	<listitem
><para
>Returnerar strängen som om egenskapen var falsk, även om den är sann</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"not"</term>
	<listitem
><para
>Returnerar i själva verket en annan Boolesk egenskap, som är det omvända av den nuvarande (dvs. falsk om sann, sann om falsk)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"numeric"</term>
	<listitem
><para
>Föråldrad, tillhandahålls för bakåtkompatibilitet. Samma som ingen modifierare "". Returnera "1" om egenskapen är sann, eller "0" om den är falsk.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Heltalsegenskaper</term>
<listitem
><para
>En egenskap konstruerad för att innehålla ett heltalsvärde (men returnerar förstås ändå en sträng med numeriska tecken i JS-mallen). Den accepterar inga modifierare. Används i &lt;spinbox&gt; (se nedan)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>Egenskaper för reella tal</term>
<listitem
><para
>En egenskap konstruerad för att innehålla ett reellt numeriskt värde (men returnerar förstås ändå en sträng med numeriska tecken i JS-mallen). Används i &lt;spinbox&gt; (se nedan) <variablelist>
	<varlistentry>
	<term
>Ingen modifierare ("")</term>
	<listitem
><para
>För <function
>getValue() / getString()</function
> returneras samman som "formatted". I framtida versioner kommer det att vara möjligt att erhålla en numerisk representation istället.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"formatted"</term>
	<listitem
><para
>Returnerar det formaterade talet (som en sträng).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>RObject-egenskaper</term>
<listitem
><para
>En egenskap konstruerad för urval av ett eller flera &R;-objekt. Används mest framträdande i varselector och varslot. Följande värden returneras enligt angiven modifierare: <variablelist>
	<varlistentry>
	<term
>Ingen modifierare ("")</term>
	<listitem
><para
>Normalt returnerar egenskapen det valda objektets fullständiga namn. Om mer än ett objekt är valt, skiljs objektnamnen åt av radbrytningar ("\n").</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"shortname"</term>
	<listitem
><para
>Som ovan, men returnerar bara korta namn på objekten. Exempelvis skulle ett objekt inne i en lista bara ges namnet det har inne i listan, utan listans namn.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"label"</term>
	<listitem
><para
>Som ovan, men returnerar objektens &rkward; beteckningar (om ingen beteckning är tillgänglig, är det samma sak som "shortname").</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Egenskaper för stränglistor</term>
<listitem
><para
>Egenskapen innehåller en lista med strängar. <variablelist>
	<varlistentry>
	<term
>Ingen modifierare ("")</term>
	<listitem
><para
>För <function
>getValue()/getString()</function
>, returneras alla strängar åtskilda av "\n". Eventuella "\n"-tecken i varje objekt hanteras som litteralen "\\n". Dock är den rekommenderade användningen att hämta värdet med <function
>getList()</function
> istället, som returnerar ett fält av strängar.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"joined"</term>
	<listitem
><para
>Returnerar listan som en enda sträng, med objekten sammanfogade av "\n". I motsats till ingen modifierare (""), ändras <emphasis
>inte</emphasis
> de individuella strängarna.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>Kodegenskaper</term>
<listitem
><para
>En egenskap som hålls av insticksprogram som genererade kod. Den är viktig för inbäddning av insticksprogram, för att kunna inbädda koden som genereras av det inbäddade insticksprogrammet i koden som genereras av det inbäddande (toppnivå) insticksprogrammet. Följande värden returneras enligt angiven modifierare: <variablelist>
	<varlistentry>
	<term
>Ingen modifierare ("")</term>
	<listitem
><para
>Returnerar den fullständiga koden, dvs. sektionerna "preprocess", "calculate", "printout" (men inte "preview") konkatenerade i en sträng.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"preprocess"</term>
	<listitem
><para
>Returnerar bara kodens förbehandlingssektion preprocess</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"calculate"</term>
	<listitem
><para
>Returnerar bara kodens beräkningssektion calculate</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"printout"</term>
	<listitem
><para
>Returnerar bara kodens utskriftssektion printout</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>"preview"</term>
	<listitem
><para
>Returnerar kodens förhandsgranskningssektion preview</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="globalxmlelements">
	<title
>Element för allmänna syften att använda i vilken &XML;-fil som helst (<literal role="extension"
>.xml</literal
>, <literal role="extension"
>.rkh</literal
>, &pluginmap;)</title>
	<variablelist>
	<varlistentry>
	<term
>&lt;snippets&gt;</term>
	<listitem
><para
>Tillåten som ett direkt underliggande objekt till noden &lt;document&gt; och bara där. Bör placeras nära filens början. Se <link linkend="snippets"
>avsnittet om att använda snippet</link
>. Det får bara finnas ett &lt;snippet&gt;-element. Valfri, inga egenskaper.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;snippet&gt;</term>
	<listitem
><para
>Definierar en enskild snippet. Bara tillåten som ett direkt underliggande objekt till elementet &lt;snippets&gt;. Egenskaper: <variablelist
> <varlistentry>
		<term
>&lt;id&gt;</term>
		<listitem
><para
>En identifierarsträng för denna snippet. Krävs.</para
></listitem>
		</varlistentry>
		</variablelist
></para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;insert&gt;</term>
	<listitem
><para
>Infoga innehållet i en &lt;snippet&gt;. Tillåten var som helst. Egenskaper: <variablelist
> <varlistentry>
		<term
>&lt;snippet&gt;</term>
		<listitem
><para
>Identifierarsträngen för den snippet som ska infogas. Krävs.</para
></listitem>
		</varlistentry>
		</variablelist
></para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;include&gt;</term>
	<listitem
><para
>Inkluderar innehållet i en annan &XML;-fil (allting inne i elementet &lt;document&gt; i den filen). Tillåten var som helst. Egenskaper: <variablelist
> <varlistentry>
		<term
>&lt;file&gt;</term>
		<listitem
><para
>Filnamnet, relativt till katalogen som den aktuella filen är i. Krävs.</para
></listitem>
		</varlistentry>
		</variablelist
></para
></listitem>
	</varlistentry>
	</variablelist>
</sect1>

<sect1 id="xmlelements"
><title
>Element att använda i insticksprogrammets &XML;-beskrivning</title>
<para
>Egenskaper som elementen innehåller listas i ett <link linkend="elementproperties"
>separat avsnitt</link
>.</para>

<sect2 id="generalelements"
><title
>Allmänna element</title>
<variablelist>
<varlistentry>
<term
>&lt;document&gt;</term>
<listitem
><para
>Måste finnas i alla beskrivning.xml-filer som rotnoden. Ingen specialfunktion. Inga egenskaper</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;about&gt;</term>
<listitem
><para
>Information om insticksprogrammet (upphovsman, licens, etc.). Elementet tillåts i både ett individuellt insticksprograms .xml-fil, och i &pluginmap;-filer. Se <link linkend="pluginmapelements"
>&pluginmap; filreferens</link
> för detaljerad referensinformation, och <link linkend="chapter_about_information"
>kapitlet om 'om' information</link
> för en introduktion.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;code&gt;</term>
<listitem
><para
>Definierar var JS-mallen för insticksprogrammet kan hittas. Använd bara en gång per fil, som ett direkt underliggande objekt till taggen document. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>file</parameter
></term>
	<listitem
><para
>JS-mallens filnamn, relativt till katalogen som insticksprogrammets XML finns i</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;help&gt;</term>
<listitem
><para
>Definierar var hjälpfilen för insticksprogrammet kan hittas. Använd bara en gång per fil, som ett direkt underliggande objekt till taggen document. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>file</parameter
></term>
	<listitem
><para
>Hjälpfilens filnamn, relativt till katalogen som insticksprogrammets XML finns i</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;copy&gt;</term>
<listitem
><para
>Kan användas som underliggande objekt (direkt eller indirekt) till huvudelementen för layout, dvs. &lt;dialog&gt; och &lt;wizard&gt;. Används för att kopiera ett helt block av &XML;-element ett-till-ett. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Id att söka efter. Taggen &lt;copy&gt; söker efter ett tidigare &XML;-element som har givits samma id, och kopierar det inklusive alla underliggande element.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>copy_element_tag_name</parameter
></term>
	<listitem
><para
>I några få fall, vill man ha en nästan exakt kopia, men ändra taggnamnet på elementet som kopieras. Det viktigaste exemplet på det är när man vill kopiera en hel flik, &lt;tab&gt;, från ett dialoggränssnitt till en sida, &lt;page&gt;, i ett guidegränssnitt. I detta fall, skulle man ange copy_element_tag_name="page" för att automatiskt utföra konverteringen.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="interfaceelements"
><title
>Gränssnittsdefinitioner</title>
<variablelist>
<varlistentry>
<term
>&lt;dialog&gt;</term>
<listitem
><para
>Definierar ett gränssnitt av dialogtyp. Placera definitionen av det grafiska användargränssnittet inne i taggen. Använd bara en gång per fil, som ett direkt underliggande objekt till taggen document. Åtminstone en av taggarna "dialog" eller "wizard" krävs för ett insticksprogram. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Dialogrutans rubrik</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>recommended</parameter
></term>
	<listitem
><para
>Ska dialogrutan användas som det "rekommenderade" gränssnittet (dvs. gränssnittet som normalt visas, om användaren inte har ställt in &rkward; att använda ett specifikt förvalt gränssnitt)? Egenskapen har inte någon effekt för närvarande, eftersom den implicit är "sann", om inte guiden rekommenderas.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;wizard&gt;</term>
<listitem
><para
>Definierar ett gränssnitt av guidetyp. Placera definitionen av det grafiska användargränssnittet inne i taggen. Använd bara en gång per fil, som ett direkt underliggande objekt till taggen document. Åtminstone en av taggarna "dialog" eller "wizard" krävs för ett insticksprogram. Accepterar bara taggarna &lt;page&gt; eller &lt;embed&gt; som direkt underliggande objekt. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Guidens rubrik</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>recommended</parameter
></term>
	<listitem
><para
>Ska guiden användas som det "rekommenderade" gränssnittet (dvs. gränssnittet som normalt visas, om användaren inte har ställt in &rkward; att använda ett specifikt förvalt gränssnitt)? Valfri, förvalt värde är "false".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="layoutelements"
><title
>Layoutelement</title>
<para
>Alla element i den här sektionen accepterar egenskapen id="identifierarsträng". Egenskapen är valfri för alla element. Den kan exempelvis användas för att dölja eller inaktivera hela layoutelementet och alla element som finns i det (se <link linkend="logic"
>kapitlet om logik i det grafiska användargränssnittet</link
>). Id-strängen får inte innehålla "." (punkt) eller ";" (semikolon), och bör i allmänhet begränsas till alfanumeriska tecken och understreck ("_"). Bara ytterligare egenskaper listas.</para>
<variablelist>
<varlistentry>
<term
>&lt;page&gt;</term>
<listitem
><para
>Definierar en ny sida i en guide. Tillåts bara som ett direkt underliggande objekt av elementet &lt;wizard&gt;.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;row&gt;</term>
<listitem
><para
>Alla direkt underliggande objekt till taggen "row" placeras från vänster till höger.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;column&gt;</term>
<listitem
><para
>Alla direkt underliggande objekt till taggen "column" placeras uppifrån och ner.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;stretch&gt;</term>
<listitem
><para
>Normalt upptar elementen i det grafiska användargränssnittet allt tillgängligt utrymme. Om man exempelvis har två kolumner sida vid sida, där den vänstra är fylld med element, medan den högra bara innehåller en ensam alternativknapp, <command
>&lt;radio&gt;</command
>, expanderas <command
>&lt;radio&gt;</command
>-knappen vertikalt även om den inte egentligen behöver det tillgängliga utrymmet, och det ser fult ut. I det här fallet vill man egentligen lägga till ett "tomrum" under <command
>&lt;radio&gt;</command
>-knappen. Använd elementet &lt;stretch&gt; för det. Det upptar helt enkelt ett visst utrymme. Använd inte elementet i onödan, oftast är det en god idé att låta elementen i det grafiska användargränssnittet få allt tillgängligt utrymme. Det är bara ibland som layouten blir utsträckt. Elementet &lt;stretch&gt; har inga argument, inte ens "id". Det går inte heller att placera några underliggande objekt inne i elementet &lt;stretch&gt; (med andra ord, används det bara som "&lt;stretch/&gt;").</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;frame&gt;</term>
<listitem
><para
>Ritar en ram eller ruta omkring sina direkt underliggande objekt. Kan användas för att visuellt gruppera relaterade alternativ. Layouten inne i en ram är uppifrån och ner, om man inte placerar en &lt;row&gt; inne i den. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Ramens rubrik (valfri)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>checkable</parameter
></term>
	<listitem
><para
>Ramar kan göras markeringsbara. I detta fall, inaktiveras alla ingående element när ramen avmarkeras, och aktiveras när den är markerad (valfri, förvalt värde "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>checked</parameter
></term>
	<listitem
><para
>Bara för markeringsbara ramar: Ska ramen normalt vara markerad? Förvalt värde är "true". Tolkas inte för ramar som inte är markeringsbara.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;tabbook&gt;</term>
<listitem
><para
>Organiserar elementen i en flikbok. Accepterar bara &lt;tab&gt;-taggar som direkt underliggande objekt.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;tab&gt;</term>
<listitem
><para
>Definierar en sida i en flikbok. Placera flikens definition i det grafiska användargränssnittet inne i taggen. Kan bara användas som ett direkt underliggande objekt till taggen &lt;tabbook&gt;. En &lt;tabbook&gt; måste ha minst två flikar definierade. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Fliksidans rubrik (krävs)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;text&gt;</term>
<listitem
><para
>Visar texten innesluten i taggen i det grafiska användargränssnittet. Viss enkel &HTML;-liknande markering stöds (i synnerhet <markup
>&lt;b&gt;</markup
>, <markup
>&lt;i&gt;</markup
>, <markup
>&lt;p&gt;</markup
> och <markup
>&lt;br/&gt;</markup
>). Håll dock formatering till ett minimum. Att infoga en helt tom rad lägger till en hård radbrytning. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>type</parameter
></term>
	<listitem
><para
>Textens typ. Antingen "normal", "warning" (varning) eller "error" (fel). Det påverkar textens utseende (valfri, förvalt värde är normal)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="activeelements"
><title
>Aktiva element</title>
<para
>Alla element i den här sektionen accepterar egenskapen id="identifierarsträng". Egenskapen krävs för alla element. Bara ytterligare egenskaper listas. Id-strängen får inte innehålla "." (punkt).</para>
<variablelist>

<varlistentry>
<term
>&lt;varselector&gt;</term>
<listitem
><para
>Tillhandahåller en lista över tillgängliga objekt, där användaren kan välja ett eller flera. Kräver en eller flera &lt;varslot&gt; som motpart för att vara användbar. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Beteckning för en varselector (valfri, förvalt värde är "Select variable(s)")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;varslot&gt;</term>
<listitem
><para
>Används tillsammans med en "varselector" för att låta användare välja en eller flera variabler. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Beteckning för en varslot (rekommenderas, förvalt värde är "Variable:")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>source</parameter
></term>
	<listitem
><para
>Den varselector som valet hämtas från (krävs, om man inte ansluter manuellt eller använder source_property)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>source_property</parameter
></term>
	<listitem
><para
>En godtycklig egenskap att kopiera värden från, när valknappen klickas. Om den anges, överskrider den egenskapen "source".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>required</parameter
></term>
	<listitem
><para
>Om det krävs att en varslot innehåller ett giltigt värde för att verkställa koden. Se <link linkend="elementproperties"
>required-property</link
> (valfri, förvalt värde false)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>multi</parameter
></term>
	<listitem
><para
>Om en varslot innehåller bara ett (förval, "false"), eller flera objekt</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_duplicates</parameter
></term>
	<listitem
><para
>Om en varslot bara kan acceptera unika objekt (förval, "false"), eller om samma objekt kan läggas till flera gånger.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_vars</parameter
></term>
	<listitem
><para
>Bara meningsfull om multi="true": Minimalt antal variabler som kan markeras för att markeringen ska anses giltig (valfri, förvalt värde "1")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_vars_if_any</parameter
></term>
	<listitem
><para
>Bara meningsfull om multi="true": En varslot kan anses giltig om den exempelvis antingen är tom eller innehåller minst två värden. Det anger hur många variabler som måste väljas, om några överhuvudtaget (2 i exemplet). (valfri, förvalt värde "1")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_vars</parameter
></term>
	<listitem
><para
>Bara meningsfull om multi="true": Minimalt antal variabler som kan markeras (valfri, förvalt värde "0", vilket betyder inget maximum)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>classes</parameter
></term>
	<listitem
><para
>Om ett eller flera &R; klassnamn anges (åtskilda av mellanslag (" ")) här, accepterar denna varslot bara objekt som hör till klasserna (valfri, <emphasis
>använd med stor försiktighet</emphasis
>, användaren ska inte förhindras att göra giltiga val, och &R; har <emphasis
>många</emphasis
> olika klasser).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>types</parameter
></term>
	<listitem
><para
>Om en eller flera variabeltyper anges (åtskilda med mellanslag (" ")) här, accepterar bara denna varslot objekt av typerna. Giltiga typer är "unknown", "number", "string", "factor", "invalid". (valfri, <emphasis
>använd med stor försiktighet</emphasis
>, användaren ska inte förhindras att göra giltiga val, och &rkward; känner inte alltid till en variabels typ)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>num_dimensions</parameter
></term>
	<listitem
><para
>Antal dimensioner som ett objekt måste ha. "0" (förvalt värde) betyder att godtyckligt antal dimensioner är acceptabla. (valfritt, förvalt värde "0")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_length</parameter
></term>
	<listitem
><para
>Den minimala längden som ett objekt måste ha för att vara acceptabelt. (valfri, förvalt värde "0")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_length</parameter
></term>
	<listitem
><para
>Den maximala längden som ett objekt måste ha för att vara acceptabelt. (valfri, förvalt värde är det största heltal som kan representeras i systemet)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueselector&gt;</term>
<listitem
><para
>Tillhandahåller en lista över tillgängliga strängar (inte &R;-objekt) att väljas i en eller flera medföljande &lt;valueslot&gt;. Strängalternativ kan definieras genom att använda taggarna &lt;option&gt; som direkt underliggande objekt (se nedan), eller anges med dynamiska <link linkend="elementproperties"
>egenskaper</link
>. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Beteckning för en valueselector (valfri, förvalt värde är ingen beteckning)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueslot&gt;</term>
<listitem
><para
>Används tillsammans med en &lt;valueselector&gt; för att låta användaren välja ett eller flera strängobjekt. Elementet är i huvudsak identiskt med &lt;varslot&gt; och delar samma egenskaper, utom de som refererar till egenskaper för acceptabla objekt (dvs. klasser, typer, antal dimensioner, minimal längd, maximal längd).</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;radio&gt;</term>
<listitem
><para
>Definierar en grupp av exkluderande alternativknappar (bara en kan väljas åt gången). Kräver minst två &lt;option&gt;-taggar som direkt underliggande objekt. Inga andra taggar tillåts som underliggande objekt. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Alternativknapparnas beteckning (rekommenderas, förvalt värde "Select one:")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;dropdown&gt;</term>
<listitem
><para
>Definierar en grupp alternativ där ett och endast ett kan väljas åt gången, med en kombinationslista. Den är funktionellt ekvivalent med en &lt;radio&gt;, men ser annorlunda ut. Kräver minst två &lt;option&gt;-taggar som direkt underliggande objekt. Inga andra taggar tillåts som underliggande objekt. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Kombinationslistans beteckning (rekommenderas, förvalt värde "Select one:")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;select&gt;</term>
<listitem
><para
>Tillhandahåller en lista över tillgängliga strängar där användaren kan välja ett godtyckligt antal. Strängalternativ kan definieras genom att använda &lt;option&gt;-taggar som direkt underliggande objekt (se nedan), eller anges med dynamiska <link linkend="elementproperties"
>egenskaper</link
>. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Beteckning för &lt;select&gt; (valfri, förval är ingen beteckning)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>enkel</parameter
></term>
	<listitem
><para
>Om satt till sant, går det bara att välja ett enda värde, istället för flera värden på en gång (Booleskt, förvalt värde falskt)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;option&gt;</term>
<listitem
><para
>Kan bara användas som ett direkt underliggande objekt till elementen &lt;radio&gt;, &lt;dropdown&gt;, &lt;valueselector&gt; eller &lt;select&gt;. Representerar ett valbart alternativ i en alternativknapp eller kombinationslista. Eftersom elementen &lt;option&gt; alltid ingår som en del av ett av urvalselementen, har de normalt ingen egen "id", men se nedan. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Alternativets beteckning (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>value</parameter
></term>
	<listitem
><para
>Strängvärdet det överliggande objektet returnerar om alternativet är markerat eller valt (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>checked</parameter
></term>
	<listitem
><para
>Om alternativet normalt ska vara markerat/valt, "true" eller "false". I en &lt;radio&gt; eller &lt;dropdown&gt;, kan bara ett alternativ anges som <parameter
>checked=</parameter
><replaceable
>"true"</replaceable
>, och om inget alternativ är angett som markerat, blir det första alternativet i det överliggande objektet automatiskt markerat/valt. I en &lt;select&gt; kan godtyckligt antal alternativ anges som markerade. (valfritt, förvalt värde "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Att ange "id" parametrar för &lt;option&gt;-element är valfritt (och det rekommenderas i själva verket att inte ange "id", om det inte verkligen behövs). Dock blir det möjligt att aktivera/inaktivera en &lt;option&gt; dynamiskt om "id" anges, genom att ansluta till den Booleska egenskapen <replaceable
>id_of_radio.id_of_optionX.enabled</replaceable
>. För närvarande fungerar det bara för egenskaper inne i elementen &lt;radio&gt; och &lt;dropdown&gt;. Alternativen &lt;valueselector&gt; och &lt;select&gt; stöder för närvarande inte "id".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;checkbox&gt;</term>
<listitem
><para
>Definierar en kryssruta, dvs. ett enstaka alternativ som antingen kan vara av eller på. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Kryssrutans beteckning (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>value</parameter
></term>
	<listitem
><para
>Värdet som kryssrutan returnerar om den är markerad (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>value_unchecked</parameter
></term>
	<listitem
><para
>Värdet som returneras om kryssrutan inte är markerad (valfritt, förvalt värde är "", dvs. en tom sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>checked</parameter
></term>
	<listitem
><para
>Om alternativet normalt ska vara markerat, "true" eller "false" (valfritt, förvalt värde "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;frame&gt;</term>
<listitem
><para
>Ramelementet används i allmänhet som ett rent layoutelement och det listas i avsnittet om <link linkend="layoutelements"
>layoutelement</link
>. Det kan dock också göras markeringsbart, och sålunda samtidigt fungera som en enkel kryssruta. </para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;input&gt;</term>
<listitem
><para
>Definierar ett fritt inmatningsfält. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Inmatningsfältets beteckning (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>initial</parameter
></term>
	<listitem
><para
>Textfältets ursprungliga text (valfri, förvalt värde "", dvs. en tom sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>size</parameter
></term>
	<listitem
><para
>Ett av "small", "medium", or "large". "large" definierar ett inmatningsfält med flera rader, medan "small" och "medium" är fält med en rad (valfri, förvalt värde "medium")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>required</parameter
></term>
	<listitem
><para
>Om det krävs att indata inte är tomt för att verkställa koden. Se <link linkend="elementproperties"
>required-property</link
> (valfri, förvalt värde false)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;matrix&gt;</term>
<listitem
><para
>En tabell för att mata in matrisdata (eller vektorer) i det grafiska användargränssnittet.</para
> <note
><para
>Det här inmatningselementet är <emphasis
>inte</emphasis
> optimerat för att mata in eller redigera stora mängder data. Även om det inte finns någon fast gräns för storleken hos matrisen &lt;matrix&gt;, bör den i allmänhet inte överstiga omkring tio rader eller kolumner. Om du förväntar dig mer data, låt användaren välja den som ett &R;-objekt (vilket kan vara en god idé som ett alternativ vid nästan <emphasis
>alla</emphasis
> tillfällen då ett matriselement används).</para
></note
> <para
>Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Tabellens beteckning (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>mode</parameter
></term>
	<listitem
><para
>Ett av "integer", "real", or "string". Typ av data som accepteras i tabellen (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min</parameter
></term>
	<listitem
><para
>Minimalt acceptabelt värde (för matriser av typ "integer" eller "real") (valfritt, förvalt värde är det minsta värde som kan representeras)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max</parameter
></term>
	<listitem
><para
>Maximalt acceptabelt värde (för matriser av typ "integer" eller "real") (valfritt, förvalt värde är det största värde som kan representeras)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_missings</parameter
></term>
	<listitem
><para
>Om saknade (tomma) värden tillåts i matrisen. Det är underförstått för matriser av typen "string" (valfritt, förvalt värde false).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_user_resize_columns</parameter
></term>
	<listitem
><para
>När satt till sant, kan användaren lägga till kolumner genom att skriva i (inaktiva) cellerna längst till höger (valfritt, förvalt värde är true).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_user_resize_rows</parameter
></term>
	<listitem
><para
>När satt till sant, kan användaren lägga till rader genom att skriva i (inaktiva) cellerna längst ner (valfritt, förvalt värde är true).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>rows</parameter
></term>
	<listitem
><para
>Antal rader i matrisen. Har ingen effekt med allow_user_resize_rows="true". <note
><para
>Kan också bestämmas genom att ange egenskapen "rows"</para
></note
> (valfritt, förvalt värde 2).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>columns</parameter
></term>
	<listitem
><para
>Antal kolumner i matrisen. Har ingen effekt med allow_user_resize_columns="true". <note
><para
>Kan också bestämmas genom att ange egenskapen "columns"</para
></note
> (valfritt, förvalt värde 2).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_rows</parameter
></term>
	<listitem
><para
>Minimalt antal rader i matrisen. Matrisen vägrar att krympa under den här storleken (valfritt, förvalt värde 0, se också: <parameter
>allow_missings</parameter
>).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_columns</parameter
></term>
	<listitem
><para
>Minimalt antal kolumner i matrisen. Matrisen vägrar att krympa under den här storleken (valfritt, förvalt värde 0, se också: <parameter
>allow_missings</parameter
>).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>fixed_height</parameter
></term>
	<listitem
><para
>Tvinga elementet i det grafiska användargränssnittet att behålla sin ursprungliga höjd. Använd det inte i kombination med matriser, där antal rader kan ändras på vilket sätt som helst. Användbar i synnerhet när ett inmatningselement för en vektor skapas (columns="1"). När alternativet är satt till true, visas ingen horisontell rullningslist, även om matrisen överskrider tillgänglig bredd (eftersom det skulle påverka höjden). (valfritt, förvalt värde false).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>fixed_width</parameter
></term>
	<listitem
><para
>Något felaktigt benämnt: Antag att kolumnantalet inte kommer att ändras. Den sista (eller oftast enda) kolumnen sträcks ut för att uppta hela tillgängliga bredden. Använd det inte i kombination med matriser, där antal kolumner kan ändras på vilket sätt som helst. Användbar i synnerhet när ett inmatningselement för en vektor skapas (rows="1"). (valfritt, förvalt värde false).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>horiz_headers</parameter
></term>
	<listitem
><para
>Strängar att använda för den horisontella rubriken, åtskilda av ";". Rubriken döljes om satt till "". (valfri, förvalt värde är kolumnens nummer).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>vert_headers</parameter
></term>
	<listitem
><para
>Strängar att använda för den vertikala rubriken, åtskilda av ";". Rubriken döljes om satt till "". (valfri, förvalt värde är radens nummer).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;optionset&gt;</term>
<listitem
><para
>Ett användargränssnitt för att upprepa en mängd alternativ för ett godtyckligt antal objekt (<link linkend="optionset"
>Introduktion av optionsets</link
>). Egenskaper:</para>
	<variablelist>
	<varlistentry>
	<term
><parameter
>min_rows</parameter
></term>
	<listitem
><para
>Om angiven, markeras mängden som ogiltig, om den inte har åtminstone så här många rader (valfri, heltal).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min_rows_if_any</parameter
></term>
	<listitem
><para
>Som min_rows, men testas bara om det finns minst en rad (valfri, heltal).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_rows</parameter
></term>
	<listitem
><para
>Om angiven kommer mängden att markeras som ogiltig, om den inte har som mest det här antalet rader (valfri, heltal).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>keycolumn</parameter
></term>
	<listitem
><para
>Id för kolumnen som ska fungera som keycolumn. Ett optionset med en (giltig) keycolumn, fungerar som ett "drivet" optionset. Ett optionset utan keycolumn tillåter att manuellt infoga eller ta bort objekt. En keycolumn måste vara markerad som external. (valfri, förvalt värde är ingen keycolumn).</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Delelement:</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;optioncolumn&gt;</term>
	<listitem
><para
>Deklarerar en optioncolumn i mängden. För varje värde som ska hämtas från ett optionset, måste en separat &lt;optioncolumn&gt; deklareras. Egenskaper: <variablelist>
			<varlistentry
><term
><parameter
>id</parameter
></term>
			<listitem
><para
>Id för en optioncolumn (krävs, sträng)</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>external</parameter
></term>
			<listitem
><para
>Sätt till sann, om en optioncolumn kontrolleras utifrån optionset (valfri, Boolean, förvalt värde är "false").</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>label</parameter
></term>
			<listitem
><para
>Om angiven visas en optioncolumn i en kolumn enligt beteckningen (valfri, sträng, förvalt värde är att inte visa den).</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>connect</parameter
></term>
			<listitem
><para
>Egenskap att ansluta till optioncolumn to, angiven som id inne i området &lt;content&gt;. För en extern &lt;optioncolumn&gt; ändras motsvarande värde till det externt inställda värdet. För en vanlig (inte extern) &lt;optioncolumn&gt; ändras motsvarande rad i &lt;optioncolumn&gt;-egenskapen när egenskapen ändras inne i innehållsområdet (valfri, sträng, förvalt värde är inte ansluten).</para
></listitem
></varlistentry>
			<varlistentry
><term
><parameter
>default</parameter
></term>
			<listitem
><para
>Bara för externa kolumner: Värdet att anta för kolumnen, om inget värde är känt för en post. Sällan användbar (valfri, förvalt värde är en tom sträng).</para
></listitem
></varlistentry>
		</variablelist>
	</para
></listitem
></varlistentry>
	<varlistentry>
	<term
>&lt;content&gt;</term>
	<listitem
><para
>Deklarera innehållet i användargränssnittet/mängden. Inga egenskaper. Alla vanliga aktiva, passiva och layoutelement tillåts som underliggande namnelement. Dessutom tilläts det särskilda underliggande elementet <command
>&lt;optiondisplay&gt;</command
> i tidigare versioner av &rkward; (till och med 0.6.3). Det är föråldrat i &rkward; 0.6.4, och ska helt enkelt tas bort från befintliga insticksprogram. </para
></listitem
></varlistentry>
	<varlistentry>
	<term
>&lt;logic&gt;</term>
	<listitem
><para
>Valfri specifikation av logik i användargränssnitt som gäller <emphasis
>inne i</emphasis
> innehållsregionen för ett optionset. Se <link linkend="logicelements"
>referensen om &lt;logic&gt;</link
>. </para
></listitem
></varlistentry>
	</variablelist>
</listitem>
</varlistentry>

<varlistentry>
<term
>&lt;browser&gt;</term>
<listitem
><para
>Ett element konstruerat att välja ett enda filnamn (eller katalognamn). Observera att fältet accepterar vilken sträng som helst, även om det är avsett att bara användas för filer: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Bläddrarens beteckning (valfri, förvalt värde "Enter filename")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>initial</parameter
></term>
	<listitem
><para
>Initialvärdet för texten i bläddraren (valfritt, förvalt värde "", dvs. en tom sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>type</parameter
></term>
	<listitem
><para
>Ett av "file", "dir" eller "savefile". För att välja respektive en befintlig fil, befintlig katalog eller icke-befintlig fil (valfri, förvalt värde "file")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>allow_urls</parameter
></term>
	<listitem
><para
>Om (icke-lokala) webbadresser kan väljas (valfri, förvalt värde "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>filter</parameter
></term>
	<listitem
><para
>Filtypsfilter, t.ex. ("*.txt *.csv" för .txt- och .csv-filer). En separat post för "Alla filer" läggs till automatiskt (valfritt, förvalt värde är "", dvs. Alla filer)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>required</parameter
></term>
	<listitem
><para
>Om det krävs att fältet inte är tomt för att verkställa koden. Observera att det inte nödvändigtvis betyder att det valda filnamnet är giltigt. Se <link linkend="elementproperties"
>required-property</link
> (valfri, förvalt värde true)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;saveobject&gt;</term>
<listitem
><para
>Ett element konstruerat för att välja namnet på ett &R;-objekt att spara i (dvs. i allmänhet inte redan befintligt, i motsats till en varslot): <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Inmatningsrutans beteckning (valfri, förvalt värde "Save to:")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>initial</parameter
></term>
	<listitem
><para
>Initialvärdet för texten i inmatningsrutan (valfritt, förvalt värde "my.data")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>required</parameter
></term>
	<listitem
><para
>Om det krävs att fältet innehåller ett tillåtet objektnamn för att verkställa koden. Se <link linkend="elementproperties"
>required-property</link
> (valfri, förvalt värde true)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>checkable</parameter
></term>
	<listitem
><para
>I många användarfall är det valfritt att spara i ett &R;-objekt. I dessa fall kan en kryssruta integreras i saveobject-elementet genom att använda egenskapen. När den är satt till true, aktiveras/inaktiveras saveobject-elementet av kryssrutan. Se <link linkend="elementproperties"
>egenskapen active</link
> för saveobject (valfri, förvalt värde false)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>checked</parameter
></term>
	<listitem
><para
>Bara för markeringsbara saveobject-element: Om objektet normalt är markerat eller aktiverad (valfritt, förvalt värde är "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;spinbox&gt;</term>
<listitem
><para
>En nummerruta där användaren kan välja ett numeriskt värde, antingen genom att använda direkt tangentbordsinmatning eller små uppåt- och neråtpilar. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Nummerrutans beteckning (rekommenderas, förvalt värde "Enter value:")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min</parameter
></term>
	<listitem
><para
>Det minsta värde som användaren får mata in i nummerrutan (valfritt, förval är det minsta värdet som tekniskt kan representeras i nummerrutan)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max</parameter
></term>
	<listitem
><para
>Det största värde som användaren får mata in i nummerrutan (valfritt, förval är det största värdet som tekniskt kan representeras i nummerrutan)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>initial</parameter
></term>
	<listitem
><para
>Initialvärdet som visas i nummerrutan (valfritt, förvalt värde "0")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>type</parameter
></term>
	<listitem
><para
>Antingen "real" eller "integer". Om nummerrutan accepterar reella tal eller bara heltal (valfritt, förvalt värde är "real")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>default_precision</parameter
></term>
	<listitem
><para
>Bara meningsfull om nummerrutan har type="real". Anger förvalt antal decimalsiffror som visas i nummerrutan (bara så här många avslutande nollor visas). När användaren klickar på uppåt- eller neråtpilen, ändras decimalsiffrorna. Användaren kan dock ändå mata in värden med större precision (se nedan) (valfri, förvalt värde "2")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max_precision</parameter
></term>
	<listitem
><para
>Det maximala antalet siffror som kan representeras på ett meningsfullt sätt (valfritt, förvalt värde är "8")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;formula&gt;</term>
<listitem
><para
>Det här avancerade elementet tillåter användaren att välja en formel eller interaktionsmängd från valda variabler. För en GLM kan elementet exempelvis användas för att tillåta användaren att ange modellens interaktionstermer. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>fixed_factors</parameter
></term>
	<listitem
><para
>Id för den varslot som innehåller de markerade förbestämda faktorerna (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>dependent</parameter
></term>
	<listitem
><para
>Id för den varslot som innehåller den valda beroende variabeln (krävs)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;embed&gt;</term>
<listitem
><para
>Inbädda ett annat insticksprogram i det här (se <link linkend="embedding"
>kapitlet om inbäddning</link
>). Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>component</parameter
></term>
	<listitem
><para
>Det registrerade namnet på komponenten att inbädda (se <link linkend="pluginmap"
>kapitlet om att registrera komponenter</link
>) (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>as_button</parameter
></term>
	<listitem
><para
>Om satt till "true", läggs bara en tryckknapp till i det inbäddande grafiska användargränssnittet, det inbäddade grafiska användargränssnittet visas bara (i ett separat fönster) när tryckknappen klickas (valfri, förvalt värde är "false")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Bara meningsfull om as_button="true": Knappens beteckning (rekommenderas, förvalt värde är "Options")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;preview&gt;</term>
<listitem
><para
>Kryssruta för att byta förhandsgranskningsfunktionalitet. Från version 0.6.5 av &rkward; hanteras förhandsgranskningselement med <command
>&lt;preview&gt;</command
> speciellt i insticksprogrammens dialogrutor (inte guider). De placeras i knappkolumnen, oberoende av exakt var de definieras i användargränssnittet. Det är ändå en bra idé att definiera dem på ett vettigt ställe i layouten, för bakåtkompatibilitet. <variablelist>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Rutans beteckning (valfri, förvalt värde är "Preview")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>mode</parameter
></term>
	<listitem
><para
>Typ av förhandsgranskning. Typer som stöds är "plot" (se <link linkend="preview_plots"
>kapitlet om förhandsgranskning av diagram</link
>), "output" (se <link linkend="preview_output"
>kapitlet om förhandsgranskning av &HTML;-)utmatning</link
>), "data" (se <link linkend="preview_data"
>förhandsgranskning av data</link
>) och "custom" (se <link linkend="preview_custom"
>anpassade förhandsgranskningar</link
>). (valfri, förvalt värde är "plot")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>placement</parameter
></term>
	<listitem
><para
>Förhandsgranskningens placering:  "attached" (ansluten till huvudarbetsplatsen), "detached" (fristående fönster), "docked" (ansluten till insticksprogrammets dialogruta) och "default" (för närvarande samma som "docked", men kan komma att bli möjligt att ställa in av användaren vid något tillfälle). I allmänhet rekommenderas att låta den förbli default, för bästa möjliga likformighet i användargränssnittet (valfri, förvalt värde är "default")</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>active</parameter
></term>
	<listitem
><para
>Om förhandsgranskningen normalt är aktiv. I allmänhet bör bara dockade förhandsgranskningar göras normalt aktiva, och till och med för dem finns en orsak att det normala värdet är inaktiva förhandsgranskningar (valfritt, förvalt värde är "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="logicelements"
><title
>Logiksektion</title>
<variablelist>
<varlistentry>
<term
>&lt;logic&gt;</term>
<listitem
><para
>Det omgivande elementet för logiksektionen. Alla element nedan tillåts bara inne i elementet &lt;logic&gt;. Elementet &lt;logic&gt; tillåts bara som ett direkt underliggande objekt till &lt;document&gt;-elementet (som mest en gång per document), eller till &lt;optionset&gt;-element (som mest en gång per optionset). Dokumentets logiksektion gäller för både de grafiska användargränssnitten i &lt;dialog&gt; och &lt;wizard&gt; på samma sätt.</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;external&gt;</term>
<listitem
><para
>Skapar en ny (sträng)egenskap som är avsedd att anslutas till en egenskap utanför om insticksprogrammet inbäddas. Se <link linkend="embedding_incomplete"
>avsnittet om ofullständiga insticksprogram</link
>. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Den nya egenskapens id (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>default</parameter
></term>
	<listitem
><para
>Den nya egenskapens förvalda strängvärde, dvs. värdet som används om egenskapen inte är ansluten till en egenskap utanför (valfri, förvalt värde är en tom sträng)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;i18n&gt;</term>
<listitem
><para
>Skapar en ny (sträng)egenskap som är avsedd att tillhandahålla en beteckning som använder i18n. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Den nya egenskapens id (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>label</parameter
></term>
	<listitem
><para
>Beteckningen. Den kommer att översättas (krävs).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;set&gt;</term>
<listitem
><para
>Ställ in en egenskap till ett konstant värde (om egenskapen dessutom ansluts till någon annan egenskap förblir naturligtvis inte värdet konstant). Om ett insticksprogram exempelvis inbäddas, men man vill dölja vissa av dess element, kan synlighetsegenskapen för elementen ställas in till false. Användbar i synnerhet för inbäddade och inbäddande insticksprogram. Observera: Om det finns flera &lt;set&gt;-element för en enda <parameter
>id</parameter
>, gäller den som definieras sist. Det kan ibland vara användbart att förlita sig på när inkluderade delar med &lt;include&gt; används. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Egenskapens id som ska tilldelas (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>to</parameter
></term>
	<listitem
><para
>Strängvärdet att tilldela egenskapen (krävs). Observera: För Booleska egenskaper som synlighet och aktivering, anges egenskapen antingen som to="true" eller to="false".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;convert&gt;</term>
<listitem
><para
>Skapa en ny Boolesk egenskap som beror på tillståndet hos en eller flera egenskaper. Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Den nya egenskapens id (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>sources</parameter
></term>
	<listitem
><para
>Id för egenskaperna som den här egenskapen kommer att bero på. En eller flera egenskaper kan anges, åtskilda med ";" (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>mode</parameter
></term>
	<listitem
><para
>Metoden för konverteringen/operationen. Ett av  "equals", "notequals", "range", "and", "or". Med metoden equals, är egenskapen bara sann om värdet på alla dess källor är lika med egenskapen standard (se nedan). Med metoden notequals, är egenskapen bara sann om värdet på alla dess källor skiljer sig från egenskapen standard (se nedan). Med metoden range, måste källorna vara numeriska (heltal eller reella tal). Egenskapen är bara sann om alla källor är inom intervallet angivet av egenskaperna min och max (se nedan). Med metoden and, måste källorna vara Booleska egenskaper. Egenskapen är bara sann om alla källor samtidigt är sanna. Med metoden or, måste källorna vara Booleska egenskaper. Egenskapen är bara sann om minst en av källorna är sann. (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>standard</parameter
></term>
	<listitem
><para
>Bara meningsfull för lägena equals eller notequals: Strängvärdet att jämföra med (krävs för något av dessa lägen)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>min</parameter
></term>
	<listitem
><para
>Bara meningsfull för läget "range": Det minimala värdet att jämföra med (valfritt, förvalt värde är det minsta flyttalet som datorn kan representera)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>max</parameter
></term>
	<listitem
><para
>Bara meningsfull för läget "range": Det maximala värdet att jämföra med (valfritt, förvalt värde är det största flyttalet som datorn kan representera)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>require_true</parameter
></term>
	<listitem
><para
>Om satt till "true", kommer egenskapen att krävas, och anses bara giltig om dess tillstånd är "true" eller "on". Sålunda blockerar egenskapen knappen <guibutton
>Verkställ</guibutton
> om den är falsk (valfri, förvalt värde "false"). <caution
><para
>Om det används, se till att användaren enkelt kan detektera vad som är fel, genom att exempelvis visa en förklarande &lt;text&gt;.</para
></caution
></para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;switch&gt;</term>
<listitem
><para
>Skapa en ny egenskap som vidarebefordrar till olika målegenskaper (eller förbestämda strängar) baserat på villkorsegenskapens värde. Det gör det möjligt att skapa logik som liknar konstruktionerna <function
>if()</function
> eller <function
>switch()</function
>. Egenskaper:</para>
	<variablelist>
	<varlistentry>
	<term
><parameter
>id</parameter
></term>
	<listitem
><para
>Den nya egenskapens id (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>villkor</parameter
></term>
	<listitem
><para
>Villkorsegenskapens id (krävs)</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Underliggande element:</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;true&gt;</term>
	<listitem
><para
>Om villkorsegenskapen är Boolesk, kan två de underliggande elementen &lt;true&gt; och &lt;false&gt; anges (och bara dessa) (Krävs om &lt;false&gt; också anges).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;false&gt;</term>
	<listitem
><para
>Om villkorsegenskapen är Boolesk, kan två de underliggande elementen &lt;true&gt; och &lt;false&gt; anges (och bara dessa) (Krävs om &lt;true&gt; också anges).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;case&gt;</term>
	<listitem
><para
>Om villkorsegenskapen inte är Boolesk, kan ett godtyckligt antal element av typen &lt;case&gt; anges, ett för varje värde på villkorsegenskapen som ska matchas (åtminstone ett sådant element krävs om villkorsegenskapen inte är Boolesk)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;default&gt;</term>
	<listitem
><para
>Om villkorsegenskapen inte är Boolesk, gör det valfria elementet &lt;default&gt; det möjligt att ange beteendet om inget av elementen av typen &lt;case&gt; matchar villkorsegenskapens värde (valfri, tillåts bara en gång i kombination med ett eller flera element av typen &lt;case&gt;).</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Underliggande elementen &lt;true&gt;, &lt;false&gt;, &lt;case&gt;, och &lt;default&gt; har följande egenskaper:</para>
	<variablelist>
	<varlistentry>
	<term
><parameter
>standard</parameter
></term>
	<listitem
><para
>Bara för element av typen &lt;case&gt;. Värdet som villkorsegenskapen ska matchas mot (krävs, sträng).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>fixed_value</parameter
></term>
	<listitem
><para
>En bestämd sträng som ska anges som värdet på egenskapen &lt;switch&gt;, om om det aktuella villkoret matchar (krävs om dynamic_value inte anges).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>dynamic_value</parameter
></term>
	<listitem
><para
>Målegenskapens <parameter
>id</parameter
> som anges som värdet på egenskapen &lt;switch&gt;, om det aktuella villkoret matchar (krävs, om fixed_value inte anges).</para
></listitem>
	</varlistentry>
	</variablelist>
	</listitem>
</varlistentry>

<varlistentry>
<term
>&lt;connect&gt;</term>
<listitem
><para
>Ansluter två egenskaper. Klientegenskapen ändras så fort den styrande egenskapen ändras (men inte det omvända). Egenskaper: <variablelist>
	<varlistentry>
	<term
><parameter
>client</parameter
></term>
	<listitem
><para
>Klientegenskapens id, dvs. egenskapen som justeras (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>governor</parameter
></term>
	<listitem
><para
>Den styrande egenskapens id, dvs. egenskapen som justerar klientegenskapen. Det kan inkludera en modifierare (krävs)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
><parameter
>reconcile</parameter
></term>
	<listitem
><para
>Om "true", justerar klientegenskapen den styrande egenskapen i anslutningen på ett sådant sätt att den styrande egenskapen bara accepterar värden som också är acceptabla av klienten (antag t.ex. att den styrande egenskapen är en numerisk egenskap med minimalt värde "0", och klienten är en numerisk egenskap med minimalt värde "100". Minimum för båda egenskaperna justeras till 100 om reconcile="true"). I allmänhet fungerar det bara för egenskaper med samma grundtyp (valfri, förvalt värde "false")</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;dependency_check&gt;</term>
<listitem
><para
>Skapar en Boolesk egenskap som är sann om angivna beroenden uppfylls, och annars falsk. Elementets &XML;-syntax är likadan som för elementet <command
>&lt;dependencies&gt;</command
>, beskriven i <link linkend="pluginmapelements"
>&pluginmap;-referensen</link
>. Från &rkward; 0.6.1 tas bara hänsyn till versionerna för &rkward; och &R;, inte beroenden av paket eller pluginmaps.</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;script&gt;</term>
<listitem
><para
>Definiera skriptkoden för att kontrollera användargränssnittets logik. Se <link linkend="logic_scripted"
>avsnittet om skriptbaserad logik för det grafiskt användargränssnittet</link
> för detaljerad information. Skriptkoden att köra kan antingen anges med egenskapen <parameter
>"file"</parameter
> eller som en (kommenterad) text i elementet. Elementet <command
>&lt;script&gt;</command
> tillåts inte i sektionen <command
>&lt;logic&gt;</command
> i ett optionset. Egenskaper: <variablelist
> <varlistentry>
	<term
><parameter
>file</parameter
></term>
	<listitem
><para
>Skriptfilens filnamn (krävs).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

</variablelist>
</sect2>

</sect1
>	<!-- Elements in main XML -->

<sect1 id="elementproperties"
><title
>Egenskaper för element i insticksprogram</title>
<para
>Alla <link linkend="layoutelements"
>layoutelement</link
> och alla <link linkend="activeelements"
>aktiva element</link
> innehåller följande egenskaper, som kan kommas åt via"elementnamnets_id.egenskapens_namn": </para>
<variablelist>
<varlistentry>
<term
>visible</term>
<listitem
><para
>Om elementet i det grafiska användargränssnittet är synligt eller inte (Boolean)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>enabled</term>
<listitem
><para
>Om elementet i det grafiska användargränssnittet är aktiverat eller inte (Boolean)</para
></listitem>
</varlistentry>
<varlistentry>
<term
>required</term>
<listitem
><para
>Om elementet i det grafiska användargränssnittet krävs (innehålla en giltig inställning) eller inte. Observera att alla element som är inaktiverade eller dolda också implicit inte krävs (Boolean).</para
></listitem>
</varlistentry>
</variablelist>
<para
>Förutom det här, har vissa element ytterligare egenskaper som man kan ansluta till. De flesta aktiva element har också en "förvald" egenskap vars värde returneras av anrop till <function
>getBoolean, getString, getList("...")</function
>, om ingen specifik egenskap, som beskrivs nedan, namnges. </para>

<variablelist>
<varlistentry>
<term
>&lt;text&gt;</term>
<listitem
><para
>Förvald egenskap är text <variablelist
> <varlistentry>
	<term
>text</term>
	<listitem
><para
>Texten som visas (text)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;varselector&gt;</term>
<listitem
><para
>Ingen förvald egenskap <variablelist>
	<varlistentry>
	<term
>selected</term>
	<listitem
><para
>Objekten som för närvarande är markerade. Troligen vill man inte använda det. Används internt (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>root</term>
	<listitem
><para
>Rotobjekt eller överliggande objekt för de objekt som erbjuds för urval (RObject)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;varslot&gt;</term>
<listitem
><para
>Förvald egenskap är "available" <variablelist>
	<varlistentry>
	<term
>available</term>
	<listitem
><para
>Alla objekt som finns i denna varslot (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>selected</term>
	<listitem
><para
>De objekt av alla i en varslot som för närvarande är markerade. Troligen vill man inte använda det. Används internt (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>source</term>
	<listitem
><para
>En kopia av objekten som är markerade i motsvarande varselector. Troligen vill man inte använda det. Används internt (RObject)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueselector&gt;</term>
<listitem
><para
>Förvald egenskap är "selected" <variablelist>
	<varlistentry>
	<term
>selected</term>
	<listitem
><para
>Strängarna som för närvarande är markerade. Modifierare "labeled" för att hämta motsvarande beteckningar. I en &lt;valueselector&gt; vill man troligtvis inte använda det direkt (bara i en &lt;select&gt;) (läs och skriv, stränglista).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>available</term>
	<listitem
><para
>Listan med strängvärden att välja mellan (läs/skriv StringList)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>labels</term>
	<listitem
><para
>Beteckningar att visa för strängvärdena (läs/skriv StringList)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;valueslot&gt;</term>
<listitem
><para
>Samma som &lt;varslot&gt;, men egenskaperna är stränglistor istället för RObjects.</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;radio&gt;</term>
<listitem
><para
>Förvald egenskap är "string" <variablelist>
	<varlistentry>
	<term
>string</term>
	<listitem
><para
>Värdet på alternativet som för närvarande är valt (sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>number</term>
	<listitem
><para
>Nummer för alternativet som för närvarande är markerat (alternativ numreras uppifrån och ner med början på 0) (heltal)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;dropdown&gt;</term>
<listitem
><para
>Samma som &lt;radio&gt;</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;select&gt;</term>
<listitem
><para
>Samma som &lt;valueselector&gt;</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;option&gt;</term>
<listitem
><para
>Ingen förvald egenskap. Den <emphasis
>enda</emphasis
> egenskapen är "enabled", och den är för närvarande inte tillgänglig för alternativ inne i &lt;select&gt; eller &lt;valueselector&gt;. Egenskaperna "visible" eller "required" finns inte för &lt;option&gt;. <variablelist
> <varlistentry>
	<term
>enabled</term>
	<listitem
><para
>Om det här enskilda alternativet ska aktiveras eller inaktiveras. I de flesta fall aktiverar eller inaktiverar man alla alternativknapparna, &lt;radio&lt;, eller kombinationsrutan, &lt;dropdown&lt;, istället. Men det kan användas för att dynamiskt ställa in aktiveringstillståndet för ett enskilt alternativ inne i en &lt;radio&lt; eller &lt;dropdown&lt; (Boolean).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;checkbox&gt;</term>
<listitem
><para
>Förvald egenskap är "state.labeled", vilket betyder att värdena angivna av egenskaperna <parameter
>value</parameter
> och <parameter
>value_unchecked</parameter
> returneras, <emphasis
>inte</emphasis
> kryssrutans visade beteckning. <variablelist
> <varlistentry>
	<term
>state</term>
	<listitem
><para
>Kryssrutans tillstånd (på eller av). Observera att användbara modifierare av egenskapen (som för alla Booleska egenskaper) är "not" och "numeric" (se <link linkend="propertytypes"
>egenskapers typer</link
>). Dock är det ofta mest användbart att ansluta till egenskapen utan modifierare, dvs. "<emphasis
>checkbox_id</emphasis
>.state", vilket returnerar kryssrutans tillstånd på ett format användbart för användning i en villkorssats (0 eller 1) (Boolean).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;frame&gt;</term>
<listitem
><para
>Förvald egenskap är "checked", om och endast om ramen är markeringsbar. För ramar som inte är markeringsbara finns ingen förvald egenskap. <variablelist
> <varlistentry>
	<term
>checked</term>
	<listitem
><para
>Bara tillgänglig för markeringsbara ramar: kryssrutans tillstånd (på eller av). Observera att användbara modifierare av egenskapen (som för alla Booleska egenskaper) är "not" och "numeric" (se <link linkend="propertytypes"
>egenskapers typer</link
>) (Boolean).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;input&gt;</term>
<listitem
><para
>Förvald egenskap är "text" <variablelist
> <varlistentry>
	<term
>text</term>
	<listitem
><para
>Aktuell text i inmatningsfältet (sträng)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
	<term
>&lt;matrix&gt;</term>
	<listitem
><para
>Förvald egenskap är "cbind". <variablelist>
		<varlistentry>
			<term
>rows</term>
			<listitem
><para
>Antal rader i matrisen (heltal). Om matrisen tillåter användaren att lägga till och ta bort rader, ska egenskapen behandlas som skrivskyddad. Annars ändras matrisens storlek om den ändras.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>columns</term>
			<listitem
><para
>Antal kolumner i matrisen (heltal). Om matrisen tillåter användaren att lägga till och ta bort kolumner, ska egenskapen behandlas som skrivskyddad. Annars ändras matrisens storlek om den ändras.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>tsv</term>
			<listitem
><para
>Data i matrisen på tsv-format (sträng, läs-skriv). Observera att jämfört med den vanliga tsv-layouten, är <emphasis
>kolumner</emphasis
>, inte rader, åtskilda med nyradstecken, och celler inom en kolumn är åtskilda av tabulatortecken.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>0,1,2...</term>
			<listitem
><para
>Data från en enskild kolumn (0 för vänstra kolumnen). <function
>getValue()</function
> eller <function
>getString()</function
> returnerar den som en enda sträng, åtskild av "\n". Dock är det rekommenderade sättet att hämta den att använda <function
>getList()</function
>, som returnerar kolumnen som ett strängfält.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>row.0,row.1,row.2...</term>
			<listitem
><para
>Data från en enskild rad (0 för översta raden). <function
>getValue()</function
> eller <function
>getString()</function
> returnerar den som en enda sträng, åtskild av "\n". Dock är det rekommenderade sättet att hämta den att använda <function
>getList()</function
>, som returnerar raden som ett strängfält.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>cbind</term>
			<listitem
><para
>Data på ett format lämpligt för att klistra in i &R;, omgivet av en cbind-sats (sträng, skrivskyddad).</para
></listitem>
		</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
	<term
>&lt;optionset&gt;</term>
	<listitem
><para
>Ingen förvald egenskap. <variablelist>
		<varlistentry>
			<term
>row_count</term>
			<listitem
><para
>Antal objekt i optionset (heltal). Skrivskyddad.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
>current_row</term>
			<listitem
><para
>Objekt som för närvarande är aktivt i ett optionset (heltal). -1 för inget aktivt objekt. Läs- och skrivbar.</para
></listitem>
		</varlistentry>
		<varlistentry>
			<term
><emphasis
>optioncolumn_ids</emphasis
></term>
			<listitem
><para
>För varje &lt;optioncolumn&gt; som definieras, skapas en "string list"-egenskap med angivet id.</para
></listitem>
		</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;browser&gt;</term>
<listitem
><para
>Förvald egenskap är "selection" <variablelist
> <varlistentry>
	<term
>selection</term>
	<listitem
><para
>Aktuell text (markerat filnamn) i bläddraren (sträng)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;saveobject&gt;</term>
<listitem
><para
>Förvald egenskap är "selection" <variablelist>
	<varlistentry>
	<term
>selection</term>
	<listitem
><para
>Det markerade objektets fullständiga namn (sträng, skrivskyddad: för att tilldela det programmatiskt, använd "parent" och "objectname").</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>parent</term>
	<listitem
><para
>Det markerade objektets överliggande objekt. Det är alltid ett befintligt &R;-objekt av en typ som kan innehålla andra objekt (t.ex. en lista eller data.frame). När det är satt till en tom sträng eller ett ogiltigt objekt, antas ".GlobalEnv" (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>objectname</term>
	<listitem
><para
>Det markerade objektets grundnamn, dvs. strängen som matas in av användaren (ändrat till ett giltigt &R;-namn, vid behov) (sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>active</term>
	<listitem
><para
>Endast för markeringsbara saveobjekts: Om objektet är markerad eller aktiverat. Alltid sant för ej markeringsbara saveobjects (Boolean)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;spinbox&gt;</term>
<listitem
><para
>Förvald egenskap är antingen "int" eller "real.formatted" beroende på nummerrutans läge <variablelist>
	<varlistentry>
	<term
>int</term>
	<listitem
><para
>Heltalsvärde som nummerrutan innehåller, eller närmaste heltal för reellt läge (heltal)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>real</term>
	<listitem
><para
>Reellt värde som nummerrutan innehåller (och heltal, om i heltalsläge) (reell)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;formula&gt;</term>
<listitem
><para
>Förvald egenskap är "model" <variablelist>
	<varlistentry>
	<term
>model</term>
	<listitem
><para
>Den aktuella modellsträngen (sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>table</term>
	<listitem
><para
>Den data.frame som innehåller nödvändiga variabler. Om bara variabler från en data.frame används, returneras namnet på denna data.frame. Annars konstrueras en ny data.frame efter behov (sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>labels</term>
	<listitem
><para
>Om variabler från flera data.frames är inblandade, kan deras namn bli omvandlade (exempelvis om båda data.frames innehåller en variabel som heter "x"). Returnerar en lista med de omvandlade namnen som index och den beskrivande beteckningen som värde (sträng)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>fixed_factors</term>
	<listitem
><para
>De förbestämda faktorerna. Troligen vill man inte använda det. Används internt (RObject)</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>dependent</term>
	<listitem
><para
>Den eller de beroende variablerna. Troligen vill man inte använda det. Används internt (RObject)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;embed&gt;</term>
<listitem
><para
>Ingen förvald egenskap <variablelist
> <varlistentry>
	<term
>code</term>
	<listitem
><para
>Koden som skapas av det inbäddade insticksprogrammet (code)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;preview&gt;</term>
<listitem
><para
>Förvald egenskap är "state" <variablelist
> <varlistentry>
	<term
>state</term>
	<listitem
><para
>Om förhandsgranskningsrutan är markerad (inte nödvändigtvis om förhandsgranskningen redan har visats) (Boolean)</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;convert&gt;</term>
<listitem
><para
>Elementet (som används i sektionen &lt;logic&gt;) är speciell på det sättet att den tekniskt sett <emphasis
>är</emphasis
> en egenskap, istället för att bara innehålla en eller flera egenskaper. Den är av typen Boolean. Observera att användbara modifierare av egenskapen (som för alla Booleska egenskaper) är "not" och "numeric" (se <link linkend="propertytypes"
>egenskapers typer</link
>).</para
></listitem>
</varlistentry>

<varlistentry>
<term
>&lt;switch&gt;</term>
<listitem
><para
>Elementet (som används i sektionen &lt;logic&gt;) är speciell på det sättet att den tekniskt sett <emphasis
>är</emphasis
> en (sträng-) egenskap, istället för att bara innehålla en eller flera egenskaper. Den gör det möjligt att byta mellan olika målegenskaper beroende på värdet av en villkorsegenskap, eller för att ändra avbildning av villkorsegenskapens värden. Alla modifierare som anges skickas till målegenskaperna. Sålunda kan t.ex. modifieraren "shortname" också användas i omkopplaren, om alla målegenskaper är RObject-egenskaper. Om målegenskaperna har olika typer kan dock användning av modifierare orsaka fel. För förbestämda värden, <replaceable
>fixed_value</replaceable
>, bortses tyst från eventuella modifierare. Observera att målegenskaper, vid åtkomst via en omkopplare, alltid är skrivskyddade.</para
></listitem>
</varlistentry>

</variablelist>
</sect1>

<sect1 id="standard_embeddable_plugins"
><title
>Inbäddningsbara insticksprogram som levereras med den officiella utgåvan av &rkward;</title>
<para
>Ett antal inbäddningsbara insticksprogram levereras med &rkward;, och kan användas i dina egna insticksprogram. Detaljerad dokumentation är för närvarande bara tillgänglig i insticksprogrammens källkod eller hjälpfiler. Här är dock en lista för att ge en snabb översikt av vad som är tillgängligt:</para>
<table frame='all'
><title
>Inbäddningsbara standardinsticksprogram</title>
<tgroup cols='4'>
<thead>
<row>
  <entry
>ID</entry>
  <entry
>Pluginmap</entry>
  <entry
>Beskrivning</entry>
  <entry
>Exempel på användning</entry>
</row>
</thead>
<tbody>
<row>
  <entry
>rkward::plot_options</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Tillhandahåller ett stort antal alternativ för diagram. De flesta insticksprogram för diagramritning utnyttjar det.</entry>
  <entry
>Plots->Barplot, de flesta andra insticksprogram för diagramritning</entry>
</row>
<row>
  <entry
>rkward::color_chooser</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Mycket enkelt insticksprogram för att ange en färg. Nuvarande implementering tillhandahåller en lista med färgnamn. Framtida implementeringar kan komma att tillhandahålla mer utarbetad färghämtning.</entry>
  <entry
>Plots->Histogram</entry>
</row>
<row>
  <entry
>rkward::plot_stepfun_options</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Diagramalternativ för stegfunktion</entry>
  <entry
>Plots->ECDF plot</entry>
</row>
<row>
  <entry
>rkward::histogram_options</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Histogramalternativ (diagram)</entry>
  <entry
>Plots->Histogram</entry>
</row>
<row>
  <entry
>rkward::barplot_embed</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Alternativ för stapeldiagram</entry>
  <entry
>Plots->Barplot</entry>
</row>
<row>
  <entry
>rkward::one_var_tabulation</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Tillhandahåller tabelluppställning för en ensam variabel.</entry>
  <entry
>Plots->Barplot</entry>
</row>
<row>
  <entry
>rkward::limit_vector_length</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Begränsa en vektors längd (till de n största eller minsta elementen).</entry>
  <entry
>Plots->Barplot</entry>
</row>
<row>
  <entry
>rkward::level_select</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Tillhandahåller en &lt;valueselector&gt; ifylld med nivåerna (eller unika värdena) i en vektor.</entry>
  <entry
>Data->Recode Categorical data</entry>
</row>
<row>
  <entry
>rkward::multi_input</entry>
  <entry
>embedded.pluginmap</entry>
  <entry
>Kombinerar nummerruta, inmatningsruta och alternativknapp för att tillhandahålla inmatning av tecken, numerisk och logisk data.</entry>
  <entry
>Data->Recode Categorical data</entry>
</row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="pluginmapelements"
><title
>Element att använda i &pluginmap;-filer</title>
<variablelist>
<varlistentry>
<term
>&lt;document&gt;</term>
<listitem
><para
>Måste finnas i varje &pluginmap;-fil som rotnod (exakt en gång). Egenskaper: <variablelist>
	<varlistentry>
	<term
>base_prefix</term>
	<listitem
><para
>Filnamn angivna i &pluginmap;-filen antas vara relative till katalogen där &pluginmap;-filen finns plus det prefix som anges här. Särskilt användbar om alla komponenter är placerade i en enda underkatalog.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>namespace</term>
	<listitem
><para
>En namnrymd för komponent-identifierare. När komponenter slås upp för inbäddning, går det att hämta komponenterna via strängen "namnrymd::komponent_id". För närvarande satt till "rkward".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>En valfri identifierarsträng för din &pluginmap;. Att ange den låter en tredjepartsutvecklare hänvisa till den och läsa in din &pluginmap; från sin egen (se <link linkend="chapter_dependencies"
>kapitlet om att hantera beroenden</link
>).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>priority</term>
	<listitem
><para
>Ett av <replaceable
>"hidden"</replaceable
>, <replaceable
>"low"</replaceable
>, <replaceable
>"medium"</replaceable
> eller <replaceable
>"high"</replaceable
>. En &pluginmap; med prioritet "medium" eller "high" aktiveras automatiskt när &rkward; först hittar dem. Använd <replaceable
>priority="hidden"</replaceable
> för en &pluginmap; som inte är avsedd att aktiveras, katalog (bara avsedd för inkludering). I den nuvarande implementeringen döljer det dock inte i själva verket en &pluginmap;. (Valfri, med förvalt värde "medium").</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;dependencies&gt;</term>
<listitem
><para
>Elementet, som anger beroenden, tillåts som ett direkt underliggande objekt till elementet &lt;document&gt; (en gång), och som ett underliggande objekt till elementen &lt;component&gt; (en gång för varje &lt;component&gt;). Anger de beroenden som måste uppfyllas för att kunna använda insticksprogrammen. Se <link linkend="chapter_dependencies"
>kapitlet om beroenden</link
> för en översikt. Egenskaper:</para>
	<variablelist>
	<varlistentry>
	<term
>rkward_min_version, rkward_max_version</term>
	<listitem
><para
>Minimal och maximal tillåten version av &rkward;. Versionsspecifikationer får innehålla icke-numeriska suffix, såsom "0.5.7z-devel1". Om ett angivet beroende inte uppfylls, kommer insticksprogrammen det gäller att <emphasis
>ignoreras</emphasis
>. <link linkend="sect_dependencies_rkward_version"
>Mer information</link
>. Valfri. Om ej specificerad krävs ingen minimal eller maximal version av &rkward;.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>R_min_version, R_max_version</term>
	<listitem
><para
>Minimal och maximal tillåten version av &R;. Versionsspecifikationer får <emphasis
>inte</emphasis
> innehålla icke-numeriska suffix, såsom "0.5.7z-devel1". Beroendet av &R;-version visas på insticksprogrammets hjälpsidor, men har ingen direkt effekt till och med &rkward; 0.6.1. <link linkend="sect_dependencies_r_version"
>Mer information</link
>. Valfri, om ej specificerad krävs ingen minimal eller maximal version av &R;.</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Underliggande element:</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;package&gt;</term>
	<listitem
><para
>Lägger till ett beroende på ett specifikt &R;-paket. Egenskaper: <variablelist>
		<varlistentry>
		<term
>name</term>
		<listitem
><para
>Paketnamn (krävs).</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>min_version, max_version</term>
		<listitem
><para
>Minimal eller maximal tillåten version (valfri)</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>repository</term>
		<listitem
><para
>Arkiv där paketet kan hittas. Valfritt, men rekommenderas starkt. Om paketet inte är tillgängligt på CRAN.</para
></listitem>
		</varlistentry>
		</variablelist>
	</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>&lt;pluginmap&gt;</term>
	<listitem
><para
>Lägger till ett beroende på en specifik &rkward; &pluginmap;. Egenskaper: <variablelist>
		<varlistentry>
		<term
>name</term>
		<listitem
><para
>Id-sträng för den &pluginmap; som krävs (krävs).</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>min_version, max_version</term>
		<listitem
><para
>Minimal eller maximal tillåten version (valfri)</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>url</term>
		<listitem
><para
>Webbadress där &pluginmap; kan hittas. Krävs.</para
></listitem>
		</varlistentry>
		</variablelist>
	</para
></listitem>
	</varlistentry>
	</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term
>&lt;about&gt;</term>
<listitem
><para
>Får finnas exakt en gång som ett direkt underliggande objekt till elementet &lt;document&gt;. Innehåller metainformation om &pluginmap; (eller insticksprogram). Se <link linkend="chapter_about_information"
>kapitlet om 'om'-information</link
> för en översikt. Egenskaper:</para>
	<variablelist>
	<varlistentry>
	<term
>name</term>
	<listitem
><para
>Synligt användarnamn. Valfritt. Måste inte vara samma som "id".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>version</term>
	<listitem
><para
>Versionsnummer. Valfritt. Formatet är inte begränsat, men för att vara på den säkra sidan, följ vanlig versionsnumrering såsom "x.y.z".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>releasedate</term>
	<listitem
><para
>Specifikation av utgivningsdatum. Valfri på formatet "ÅÅÅÅ-MM-DD".</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>shortinfo</term>
	<listitem
><para
>En <emphasis
>kort</emphasis
> beskrivning av insticksprogrammet eller &pluginmap;. Valfri.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>url</term>
	<listitem
><para
>Webbadress där mer information kan finnas. Valfri, men rekommenderad.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>copyright</term>
	<listitem
><para
>Specifikation av copyright, t.ex. "2012-2013 av Anna Svensson". Valfri, men rekommenderad.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>licence</term>
	<listitem
><para
>Specifikation av licens, t.ex. "GPL" eller "BSD". Försäkra att filerna åtföljs av en fullständig kopia av relevant licens. Valfri, men rekommenderad.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>category</term>
	<listitem
><para
>Insticksprogrammens kategori, t.ex. "Item response theory". Från &rkward; 0.6.1 är inga kategorier fördefinierade. Valfri.</para
></listitem>
	</varlistentry>
	</variablelist>
<para
>Underliggande element:</para>
	<variablelist>
	<varlistentry>
	<term
>&lt;author&gt;</term>
	<listitem
><para
>Lägger till information om en upphovsman. Egenskaper: <variablelist>
		<varlistentry>
		<term
>name, given, family</term>
		<listitem
><para
>Ange antingen hela namnet som <parameter
>name</parameter
>, eller ange både <parameter
>given</parameter
> (förnamn) och <parameter
>family</parameter
> (efternamn) separat.</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>role</term>
		<listitem
><para
>Upphovsmannens rollbeskrivning (valfri).</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>email</term>
		<listitem
><para
>E-postadress där upphovsmannen kan kontaktas. Krävs. Kan sättas till e-postlistan rkward-devel, om du prenumererar, och ditt insticksprogram är avsett att inkluderas i den officiella utgåvan av &rkward;.</para
></listitem>
		</varlistentry>
		<varlistentry>
		<term
>url</term>
		<listitem
><para
>Webbadress med mer information om upphovsmannen, t.ex. hemsida (valfri).</para
></listitem>
		</varlistentry>
		</variablelist>
	</para
></listitem>
	</varlistentry>
	</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term
>&lt;components&gt;</term>
<listitem
><para
>Måste finnas exakt en gång som ett direkt underliggande objekt till elementet &lt;document&gt;. Innehåller de individuella elementen &lt;component&gt; som beskrivs nedan. Inga egenskaper.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;component&gt;</term>
<listitem
><para
>En eller flera element av typen &lt;component&gt; ska anges som direkt underliggande objekt till elementen &lt;components&gt; (och bara där). Registrerar en komponent eller ett insticksprogram i rkward. Egenskaper: <variablelist>
	<varlistentry>
	<term
>type</term>
	<listitem
><para
>För framtida utökningar: Typ av komponent eller insticksprogram. För tillfället  alltid satt till "standard" (den enda typ som för närvarande stöds).</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Det id som kan användas för att hämta komponenten (för att placera den i menyn, se nedan, eller för inbäddning). Se namnrymden &lt;document&gt; ovan.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>file</term>
	<listitem
><para
>Krävs åtminstone för komponenter av type="standard": Filnamnet på &XML;-filen som beskriver det grafiska användargränssnittet.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>label</term>
	<listitem
><para
>Komponentens rubrik när den placeras i menyhierarkin.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;attribute&gt;</term>
<listitem
><para
>Definierar en egenskap för en komponent. Hittills bara meningsfull för <link linkend="context_import"
>importinsticksprogram</link
>. Bara tillåten som ett direkt underliggande objekt till &lt;component&gt;. Egenskaper: <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Egenskapens id</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>value</term>
	<listitem
><para
>Egenskapens värde</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>labels</term>
	<listitem
><para
>Rubrik som hör ihop med egenskapen</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;hierarchy&gt;</term>
<listitem
><para
>Måste finnas exakt en gång som ett direkt underliggande objekt till elementet &lt;document&gt;. Beskriver var komponenten som deklareras ovan ska placeras i menyhierarkin. Accepterar bara &lt;menu&gt;-element som direkt underliggande objekt. Inga egenskaper.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;menu&gt;</term>
<listitem
><para
>Ett eller flera menyelement, &lt;menu&gt;, ska anges som direkt underliggande objekt till elementet &lt;hierarchy&gt;. Deklarerar en ny (under-)meny. Om en meny med angivet id (se nedan) redan finns, sammanfogas de två menyerna. Elementet &lt;menu&gt; tillåts antingen som ett direkt underliggande objekt till elementet &lt;hierarchy&gt; (toppnivåmeny) eller som ett direkt underliggande objekt till någon annan &lt;menu&gt; (undermeny). Omvänt, accepterar elementet &lt;menu&gt; andra &lt;menu&gt; eller &lt;entry&gt; som underliggande objekt. Egenskaper: <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>En identifierarsträng för menyn. Användbar när menydefinitioner läses från flera &pluginmap;-filer, för att försäkra att insticksprogram kan placeras i samma meny eller menyer. Vissa menyidentifierare såsom "file" refererar till fördefinierade menyer (i detta fall, menyn "Arkiv"). Var noga med att kontrollera befintliga &pluginmap;-filer för att använda överensstämmande identifierare.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>label</term>
	<listitem
><para
>En rubrik för menyn.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>group</term>
	<listitem
><para
>Gör det möjligt att bestämma menyalternativens ordning. Se <link linkend="pluginmap_grouping"
>gruppering av menyalternativ</link
>. Valfri.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;entry&gt;</term>
<listitem
><para
>En menypost, dvs. ett menyalternativ för att starta ett insticksprogram. Kan bara användas som ett direkt underliggande objekt till elementet &lt;menu&gt;, accepterar inga underliggande element. Egenskaper: <variablelist>
	<varlistentry>
	<term
>component</term>
	<listitem
><para
>Id för komponenten som ska anropas när menyalternativet aktiveras.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>group</term>
	<listitem
><para
>Gör det möjligt att bestämma menyalternativens ordning. Se <link linkend="pluginmap_grouping"
>gruppering av menyalternativ</link
>. Valfri.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;group&gt;</term>
<listitem
><para
>Deklarerar en grupp av objekt i menyn. Se <link linkend="pluginmap_grouping"
>gruppering av menyalternativ</link
>. Egenskaper: <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Namnet på den här gruppen.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>separated</term>
	<listitem
><para
>Valfritt. Om det sätts till "true" är objektet i gruppen visuellt avskilt från omgivande objekt.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>group</term>
	<listitem
><para
>Namnet på gruppen som den här gruppen ska läggas till sist i (valfri).</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;context&gt;</term>
<listitem
><para
>Deklarerar posterna i ett <link linkend="contextualized_plugins"
>context</link
>. tillåts bara som direkt underliggande objekt till noden &lt;document&gt;. Accepterar bara &lt;menu&gt;-taggar som direkt underliggande objekt. Egenskaper: <variablelist
> <varlistentry>
	<term
>id</term>
	<listitem
><para
>Sammanhangets id. Hittills är bara två sammanhang implementerade: "xll" och "import".</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;require&gt;</term>
<listitem
><para
>Inkludera en annan &pluginmap;-fil. Denna &pluginmap;-fil läses bara in en gång, även om den krävs från flera andra filer med &lt;require&gt;. Det viktigaste användarfallet är att inkludera en pluginmap-fil som deklarerar några komponenter, som inbäddas av komponenter i denna &pluginmap;. Elementen &lt;require&gt; tillåts bara som direkt underliggande objekt till noden &lt;document&gt;. Egenskaper: <variablelist>
	<varlistentry>
	<term
>file</term>
	<listitem
><para
>Filnamnet för den &pluginmap; som ska inkluderas. Det betraktas som relativt till katalogen för den aktuella &pluginmap;-filen plus base_prefix (se ovan för elementet &lt;document&gt;). Om den relativa sökvägen till den &pluginmap; som ska inkluderas inte är känd, använd istället egenskapen <parameter
>map</parameter
> för att referera till den enligt id.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>map</term>
	<listitem
><para
>För att inkludera en &pluginmap;-fil från ett annat paket (eller en &rkward; &pluginmap; från din externa &pluginmap;), som kan refereras till med <replaceable
>namespacename::id</replaceable
>, som angivet i elementet &lt;document&gt; som krävs för denna &pluginmap;. Inkluderingen misslyckas om ingen &pluginmap; med detta id är känd, t.ex. inte är installerad på användarens system). Metoden bör bara användas för att inkludera en &pluginmap; utanför ditt paket. För de som är inne i ditt paket, är en relativ sökväg snabbare och tillförlitligare (egenskapen <parameter
>file</parameter
>). </para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="helpfileelements"
><title
>Element att använda i .rkh-filer (hjälp)</title>
<variablelist>
<varlistentry>
<term
>&lt;document&gt;</term>
<listitem
><para
>Måste finnas i varje <literal role="extension"
>.xml</literal
>-fil som rotnod (exakt en gång). Inga egenskaper.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;title&gt;</term>
<listitem
><para
>Hjälpsidans titel. Det tolkas <emphasis
>inte</emphasis
> för ett insticksprograms hjälpsidor (de tar titeln från insticksprogrammet självt), bara för fristående sidor. Inga egenskaper. Texten som finns i taggen &lt;title&gt; blir hjälpsidans rubrik. Kan bara definieras en gång, som ett direkt underliggande objekt till noden &lt;document&gt;.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;summary&gt;</term>
<listitem
><para
>En kort sammanfattning av hjälpsidan (eller vad insticksprogrammet används för). Den visas alltid överst på hjälpsidan. Inga egenskaper. Texten som är innehållet i taggen &lt;summary&gt; visas. Rekommenderas, men krävs inte. Kan bara definieras en gång, som ett direkt underliggande objekt till noden &lt;document&gt;.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;usage&gt;</term>
<listitem
><para
>En något mer detaljerad summering av användningen. Den visas alltid direkt efter &lt;summary&gt;. Inga egenskaper. Texten som är innehållet i taggen &lt;usage&gt; visas. Rekommenderas på hjälpsidor för insticksprogram, men krävs inte. Kan bara definieras en gång, som ett direkt underliggande objekt till noden &lt;document&gt;.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;section&gt;</term>
<listitem
><para
>En sektion för allmänna ändamål. Kan användas hur många gånger som helst som ett direkt underliggande objekt till noden &lt;document&gt;. Sektionerna visas i den ordning de definieras, men alla <emphasis
>efter</emphasis
> sektionen &lt;usage&gt; och <emphasis
>innan</emphasis
> sektionen &lt;settings&gt;. Texten som är innehållet i taggen &lt;section&gt; visas. <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>En identifierare som behövs för att gå till avsnittet från navigeringsraden (eller en länk). Måste vara unik i filen. Krävs, inga förval.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>title</term>
	<listitem
><para
>Avsnittets titel (rubrik). Krävs, inget förvalt värde.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>short_title</term>
	<listitem
><para
>En kort titel lämplig att visa i navigeringsraden. Valfri, förvalt värde är den fullständiga titeln.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;settings&gt;</term>
<listitem
><para
>Definierar sektionen som innehåller referenser till de olika inställningarna i det grafiska användargränssnittet. Bara meningsfull och använd för hjälpsidor relaterade till insticksprogram. Använd som ett direkt underliggande objekt till &lt;document&gt;. Får bara innehålla elementen &lt;setting&gt; och &lt;caption&gt; som direkt underliggande objekt. Inga egenskaper.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;setting&gt;</term>
<listitem
><para
>Förklarar en enskild inställning i det grafiska användargränssnittet. Tillåts bara som ett direkt underliggande objekt till elementet &lt;settings&gt;. Texten som elementet innehåller elementet visas. <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Inställningens id i insticksprogrammets <literal role="extension"
>.xml</literal
>. Krävs, saknar förvalt värde.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>title</term>
	<listitem
><para
>En valfri titel för inställningen. Om den utelämnas (att utelämna den rekommenderas i de flesta fall), tas titeln från insticksprogrammets <literal role="extension"
>.xml</literal
>.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;caption&gt;</term>
<listitem
><para
>En rubrik för att gruppera flera inställningar visuellt. Får bara användas som ett direkt underliggande objekt till elementet &lt;settings&gt;. <variablelist>
	<varlistentry>
	<term
>id</term>
	<listitem
><para
>Det motsvarande elementets id (oftast en &lt;frame&gt;, &lt;page&gt; eller &lt;tab&gt;) i insticksprogrammets <literal role="extension"
>.xml</literal
>.</para
></listitem>
	</varlistentry>
	<varlistentry>
	<term
>title</term>
	<listitem
><para
>En valfri titel för rubriken. Om den utelämnas (att utelämna den rekommenderas i de flesta fall), tas titeln från insticksprogrammets <literal role="extension"
>.xml</literal
>.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;related&gt;</term>
<listitem
><para
>Definierar ett avsnitt som innehåller länkar till ytterligare relaterad information. Visas alltid efter avsnittet &lt;settings&lt;. Inga egenskaper. Texten som finns inom taggen &lt;related&gt; visas. Ofta innehåller det en lista med &HTML;-stil. Rekommenderas för insticksprograms hjälpsidor, men krävs inte. Kan bara definieras en gång direkt under noden &lt;document&gt;.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;technical&gt;</term>
<listitem
><para
>Definierar ett avsnitt som innehåller teknisk information som inte är relevant för slutanvändare (såsom insticksprogrammets interna struktur). Visas alltid sist på en hjälpsida. Inga egenskaper. Texten som finns inom taggen &lt;related&gt; visas. Krävs inte, och rekommenderas inte för de flesta insticksprograms hjälpsidor. Kan bara definieras en gång direkt under noden &lt;document&gt;.</para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;länk&gt;</term>
<listitem
><para
>En länk. Kan användas i vilken som helst av sektionerna som beskrivs ovan. <variablelist
> <varlistentry>
	<term
>href</term>
	<listitem
><para
>Målwebbadressen. Observera att flera &rkward;-specifika webbadresser är tillgängliga. Se <link linkend="pluginhelp"
>avsnittet om att skriva hjälpsidor</link
> för detaljerad information.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;label&gt;</term>
<listitem
><para
>Infogar värdet av en rubrik i användargränssnittet. Kan användas i vilken som helst av sektionerna som användas ovan. <variablelist
> <varlistentry>
	<term
>id</term>
	<listitem
><para
>Elementets id i insticksprogrammet, som egenskapen <replaceable
>label</replaceable
> ska kopieras från.</para
></listitem>
	</varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry>
<term
>&lt;olika &HTML;-taggar&gt;</term>
<listitem
><para
>De flesta &HTML;-grundtaggar tillåts inne i sektionerna. Håll dock manuell formatering så liten som möjlig.</para
></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="guilogic_functions"
><title
>Funktioner tillgängliga för att skriva skriptlogik för grafiska användargränssnitt</title>
<variablelist>
<varlistentry
><term
>Klass "Component"</term>
<listitem
><para
>Klass som representerar en enskild komponent eller komponentegenskap. Den viktigaste instansen av klassen är variabeln "gui" som är fördefinierad som den aktuella komponentens rotegenskapen. Följande metoder är tillgängliga för instanser av klassen "Component": <variablelist>
	<varlistentry
><term
>absoluteId(bas_id)</term
><listitem
><para
>Returnerar absolut id för <emphasis
>bas_id</emphasis
>, eller om bas_id utelämnas, komponentens identifierare.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getValue(id)</term
><listitem
><para
>Avråds från. Använd <function
>getString(), getBoolean() eller getList()</function
> istället. Returnerar värdet av det givna underliggande objektets egenskap. Returnerar värdet av egenskapen om ID utelämnas.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getString(id)</term
><listitem
><para
>Returnerar värdet av det givna underliggande objektets egenskap som en sträng. Returnerar värdet av egenskapen om ID utelämnas.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getBoolean(id)</term
><listitem
><para
>Returnerar värdet av det givna underliggande objektets egenskap som en Boolean (om möjligt). Returnerar värdet av egenskapen om ID utelämnas.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getList(id)</term
><listitem
><para
>Returnerar värdet av det givna underliggande objektets egenskap som ett fält av strängar (om möjligt). Returnerar värdet av egenskapen om ID utelämnas.</para
></listitem
></varlistentry>
	<varlistentry
><term
>setValue(id, värde)</term
><listitem
><para
>Tilldela värdet <emphasis
>värde</emphasis
>till det givna underliggande objektet.</para
></listitem
></varlistentry>
	<varlistentry
><term
>getChild(id)</term
><listitem
><para
>Returnerar en instans av det underliggande egenskapen med givet <emphasis
>id</emphasis
>.</para
></listitem
></varlistentry>
	<varlistentry
><term
>addChangeCommand(id, kommando)</term
><listitem
><para
>Kör <emphasis
>kommando</emphasis
> så snart det underliggande objektets egenskap angiven av <emphasis
>id</emphasis
> ändras.</para
></listitem
></varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry
><term
>Klass "RObject"</term>
<listitem
><para
>Klass som representerar ett enskilt &R;-objekt. En instans av klassen kan erhållas genom att använda <command
>makeRObject(objektnamn)</command
>. Följande metoder är tillgängliga för instanser av klassen "RObject". <warning
><para
>Om några kommandon fortfarande väntar i bakgrundsprogrammet, kan informationen som levereras av de här metoderna vara inaktuellt när insticksprogrammets kod väl körs. Lita <emphasis
>inte</emphasis
> på det för kritiska operationer (och riskera dataförlust).</para
></warning>
	<variablelist>
	<varlistentry
><term
>getName()</term
><listitem
><para
>Returnerar objektets absoluta namn.</para
></listitem
></varlistentry>
	<varlistentry
><term
>exists()</term
><listitem
><para
>Returnera om objektet finns. Du bör i allmänhet kontrollera det innan någon av metoderna som listas nedan används.</para
></listitem
></varlistentry>
	<varlistentry
><term
>dimensions()</term
><listitem
><para
>Returnerar ett fält med dimensioner (liknar <command
>dim()</command
> i R).</para
></listitem
></varlistentry>
	<varlistentry
><term
>classes()</term
><listitem
><para
>Returnerar ett fält med klasser (liknar <command
>class()</command
> i R).</para
></listitem
></varlistentry>
	<varlistentry
><term
>isClass(klass)</term
><listitem
><para
>Returnerar true, om objektet är av klassen <emphasis
>klass</emphasis
>.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataFrame()</term
><listitem
><para
>Returnerar true, om objektet är en dataram.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isMatrix()</term
><listitem
><para
>Returnerar true, om objektet är en matris.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isList()</term
><listitem
><para
>Returnerar true, om objektet är en lista.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isFunction()</term
><listitem
><para
>Returnerar true, om objektet är en funktion.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isEnvironment()</term
><listitem
><para
>Returnerar true, om objektet är en omgivning.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataNumeric()</term
><listitem
><para
>Returnerar true, om objektet är en vector med numerisk data.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataFactor()</term
><listitem
><para
>Returnerar true, om objektet är en vektor med faktordata.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataCharacter()</term
><listitem
><para
>Returnerar true, om objektet är en vektor med teckendata.</para
></listitem
></varlistentry>
	<varlistentry
><term
>isDataLogical()</term
><listitem
><para
>Returnerar true, om objektet är en vektor med logisk data.</para
></listitem
></varlistentry>
	<varlistentry
><term
>parent()</term
><listitem
><para
>Returnerar en instans av "RObject" som representerar det överliggande objektet till det här objektet.</para
></listitem
></varlistentry>
	<varlistentry
><term
>child(namn)</term
><listitem
><para
>Returnerar en instans av "RObject" som representerar det underliggande objektet <emphasis
>namn</emphasis
> till det här objektet.</para
></listitem
></varlistentry>
	</variablelist
></para
></listitem>
</varlistentry>
<varlistentry
><term
>Klass "RObjectArray"</term>
<listitem
><para
>Ett fält av RObject-instanser. En instans av klassen kan erhållas genom att använda <command
>makeRObjectArray(objektnamn)</command
>. Det är särskilt användbart när det handlar om varslots, vilka möjliggör att flera objekt markeras.</para
></listitem>
</varlistentry>
<varlistentry
><term
>Funktionen include()</term>
<listitem
><para
><command
>include(filnamn)</command
> kan användas för att inkludera en separat JS-fil.</para
></listitem>
</varlistentry>
<varlistentry
><term
>Funktionen doRCommand()</term>
<listitem
><para
><command
>doRCommand(kommando, återanrop)</command
> kan användas för att begära information från &R;. Läs avsnittet om att <link linkend="querying_r_for_info"
>begära information från &R; inne i ett insticksprogram</link
> för detaljerad information och förbehåll.</para
></listitem>
</varlistentry>
</variablelist>
</sect1>

</appendix>

<appendix id="troubleshooting">
<title
>Felsökning under utveckling av insticksprogram</title>
<para
>Så du har läst all dokumentation, har gjort allt rätt, och kan ändå inte få det att fungera? Var inte orolig, vi löser det. Det första att göra är att aktivera fönstret <guilabel
>&rkward; avlusningsmeddelanden</guilabel
> (tillgängligt i menyn <guimenu
>Fönster</guimenu
>, eller genom att klicka på en av verktygsraderna), och därefter starta ditt insticksprogram igen. Som en allmän tumregel ska du inte se någon utmatning i meddelandefönstret när ditt insticksprogram, eller när som helst annars. Om det visas något, har det troligen att göra med ditt insticksprogram. Se om det hjälper dig. </para>
<para
>Om allting verkar bra i terminalen, försök att öka avlusningsnivån (från kommandoraden genom att använda <command
>rkward --debug-level 3</command
> eller genom att ställa in avlusningsnivån till 3 i <menuchoice
><guimenu
>Inställningar</guimenu
> <guimenuitem
>Anpassa &rkward;</guimenuitem
> <guimenuitem
>Avlusning</guimenuitem
></menuchoice
>. Alla meddelanden som visas vid en högre avlusningsnivå anger inte ett problem, men chansen finns att ditt problem dyker upp någonstans i meddelandena. </para>
<para
>Om du ändå inte kan räkna ut vad som är fel, misströsta inte. Vi är medvetna om att det är komplicerat, och trots allt är det möjligt att du har stött på ett fel i &rkward;, och &rkward; behöver fixas. Skriv bara till utvecklarnas e-postlista och berätta för oss om problemet. Vi hjälper gärna till. </para>
<para
>Till sist, även om du har tagit reda på hur att göra det själv, men märkt att dokumentationen inte är till stor hjälp, eller till och med felaktig i något avseende, tala också om det för oss på e-postlistan så att vi kan rätta eller förbättra dokumentationen. </para>
</appendix>

<appendix id="license">
<title
>Licens</title>
<para
>Översättning Stefan Asserhäll <email
>stefan.asserhall@bredband.net</email
></para
> 
&underFDL;
</appendix>

&documentation.index;
</book>
<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:
-->
