The following list of TODO-items is NOT complete!
Also, plans change frequently. If something is listed for a specific release, that's no more than a rough plan.

Little annoying stuff:
- fix flickering when one uses arrows in the console
- add an example to show rkward-specific commands (rk.print, rk.graph)
- instead of delete RObject, call RObject::deleteThis () and check for deleted in rCommandDone ()?
- use more QDicts instead of QMap<QString,...>s
- use R_DirtyImage to determine, whether workspace needs to be saved
- in REmbedInternal, add extractTemporaryStrings (), for strings that do not have to be copied
- hide superflous GUI-items, esp. for the HTML windows

- "real time" display of output in the console (remember to add Mutex protection before then!)

- remove classes/files:
	- RKCommandEditor (first check for reusable functionality)
		- RKPlugin still uses RKCommandEditor. Convert to use RKCommandEditorWindow instead.

stuff to do before 0.3.5 release
- plugins (general)
	- add import-filter plugins
	- add component-wrapper and allow embedded plugins
	- add preliminary image generation
- on exit, check whether there are still RCommands left in the backend and wait/request user-interaction before tearing down the thread. After all, the last command might have been a "save"!
- error-handling/raising in .rk.do.call
- pick some from below:

code cleanups
- I've changed the simple RInterface::issueCommand (QString, ...) command to return a pointer to the RCommand created. This will allow for lots of small cleanups. Do them.
	- well, on second thought, it might be better to rely more on RCommand::id () instead of pointers. Why? The id is unique (until integer overflow). The pointer may be reused after a delete -> potential problem when trying to cancel command which is actually already deleted (and potentially other cases)
	- let's set this back for a while
- active/disabled setting for RKPluginWidgets: 1) Move default implementation to RKPluginWidget-base class (make virtual for special needs). 2) rework mechanism, when switching to component infrastructure

API documentation:
- add page containing a rough overview of general architecture
- RCommandStack

(relatively) small stuff to do soon
- Twintable/RKEditorDataFrame
	- merge the two classes
	- more efficient syncing: fetch only the values actually needed instead of the whole table
	- make configurable:
		- invalid color (global and per variable)
		- unused color (global and per variable)
		- default alignment (per var type)
		- default precision
		- display of factor level labels (global and per variable)
		- delay of factor-level popup
	- highlighting of value ranges
- Object editing / modification tracking:
	- functions to set double/int/string-vectors directly. Use in paste-operations
- RKVariable:
	- use QIntDict instead of string-map for value-labels / factor levels?
- change EditLabelsDialog to use a small QTable? Probably a lot easier / straightforward to use
- plugins (general)
	- add more plugin-widgets
	- setValue-API for plugin-widgets and copying of values when switching from wizard to dialog-interface
	- improve and use debugging framework
	- cleanup label-mess for plugin-widgets
	- setEnabled (), setVisible ()-API (trivial, once the plugin-widgets are QWidgets)
	- add XML-parsing helper functions and error-checking
- formula-widget:
	- use smart sorting, esp. of generated string
	- add labels, add "up to level" option
	- add constant term option
- create a spinbox, that can really deal with real numbers
- UNPROTECT_PTR
- use RKGlobals::marginHint (), RKGlobals::spacingHint () everywhere
- give informative feedback on syntax errors (line numbers, etc.)!

stuff to do before the thing is usable
- RKWatch
	- use a cool new RHistory-Widget for the watch
	- maybe keep an (optional) log of RCommands
- add a help-system
- mostly everything

stuff to do before a 1.0 release
- handle graphics

Notes for x11-window capturing:
- See deactived class-header rbackend/rkwindowcatcher.h

################## cryptic notes ######################

- printutils.c->481 Rvprintf: can we get at the standard out-connection and give it a fake vprintf (or better write?!) and fake fflush?
	- see also: connections.c line 3246ff InitConnections
	- seems ok now. But maybe we could still use this to catch immediate warning messages (which go to R_Consolefile)?

- still mysterious in warning-handling: 'help (doesnotexist); print ("stuff");'. Why is the order wrong?!

tryCatch (message ("a"), error=function (x) {print ("e"); x$message}, warning=function (y) {print ("w"); conditionMessage(y)}, message=function (z) {print ("m"); conditionCall (z)})
withCallingHandlers ({message ("a"); stop ("b");}, error=function (x) {print ("e"); x$message}, warning=function (y) {print ("w"); conditionMessage(y)}, message=function (z) {print ("c"); conditionCall (z)})

Not quite correct yet:
	.Internal (.addCondHands (c ("error"), list (function (x) {print ("e"); print (conditionMessage (x))}), parent.frame (), NULL, TRUE))

.Internal (.addCondHands (c ("warning"), list (function (x) {print ("w"); print (conditionCall (x))}), globalenv (), NULL, TRUE))

condition handlers seem to be reset after an error!
condition handlers do not seem to carry over two separate calls of R_tryEval ().

http://slashdot.org/article.pl?sid=05/06/24/149231&tid=121&tid=188&tid=95&tid=1
