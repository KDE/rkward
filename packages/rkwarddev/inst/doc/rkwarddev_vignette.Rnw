\documentclass[a4paper,10pt]{scrartcl}
\usepackage[utf8x]{inputenc}
\usepackage{apacite}

%opening
\title{RKWard plugin development with the \texttt{rkwarddev} package}
%\VignetteIndexEntry{RKWard plugin development with the rkwarddev package}
\author{m.eik michalke}

\begin{document}

\maketitle

\begin{abstract}
Writing plugins for \texttt{RKWard} means writing at least two XML files (a GUI description and a plugin map),
one JavaScript file (to create the  \texttt{R} code), maybe a help file (again in XML), and for plugins who
should be distributed, a DESCRIPTION file. Furtermore, all of these files need to be in a certain directory
structure.

The  \texttt{rkwarddev} package aims to simplify this, by enabling you to fulfill all the listed tasks in just
one  \texttt{R} script.
\end{abstract}

\section{About the package}
You might ask why you should write R scripts to generate plugins, if you could just directly write the XML
and JavaScript files. First of all, you don't have to use this package at all, it's totally fine to code your
plugins however you like. The main reason why I wrote this package is that I like to really concentrate on
what I'm doing, so this is my attempt to avoid the need to switch between three different languages all the
time. I wanted to be able to constantly ''think in  \texttt{R}`` while working on a plugin. As a side effect, a
lot of useful automation was implemented, and using this package will definitely save you quite some amount of
typing.

\section{Before we start}
It is important to undertsand that while  \texttt{rkwarddev} can help you to make designing new plugins
much easier, you still need to know how the generated XML and JavaScript files work and interact. That is, if
you didn't yet read the \textit{Introduction to Writing Plugins for
RKWard},\footnote{\url{http://rkward.sourceforge.net/documents/devel/plugins/index.html}} please do so before
you start working with this package. Once you're sure you understand how plugins in  \texttt{RKWard} actually
work, just come back here.

\section{Ingredients}
If you look at the contents of the package, you might feel a little lost because of the number of functions.
So let's first see that there's actually some order in the chaos.

Most functions start with the prefix  \texttt{rk.} to indicate that they somehow belong to  \texttt{RKWard}
(we'll get to the exceptions later). After that, many names have another abbreviation by which they can
roughly be classified into their specific ''area`` of plugin development:

\begin{itemize}
	\item  \texttt{rk.XML.*()}: XML code for GUI description (and plugin maps)
	\item  \texttt{rk.JS.*()}: JavaScript code
	\item  \texttt{rk.rkh.*()}: XML code for help pages
\end{itemize}

In short, you should find a  \texttt{rk.XML.*()} equivalent to every XML tag explained in the
\textit{Introduction to Writing Plugins for
RKWard},\footnote{\url{http://rkward.sourceforge.net/documents/devel/plugins/index.html}}
e.\,g.  \texttt{rk.XML.dropdown()} to generate a  \texttt{<dropdown>} menu node. There are a few functions for
JavaScript generation which fall out of this scheme. That is because firstly they should be intuitively to use
just like their JavaScript equivalent (like  \texttt{echo()}), and secondly they are likely to be used very often
in a script, so short names seemed to be a blessing here (like  \texttt{id()} or  \texttt{qp()}).

Adding to that, there are some special functions, which will all be explained later, but here's the list,
roughly ordered by the development stage they're used for:

\begin{itemize}
	\item  \texttt{rk.paste.JS()}: Paste JavaScript code from  \texttt{R} objects
	\item  \texttt{rk.XML.plugin()}: Combine XML objects into one plugin GUI object
	\item  \texttt{rk.JS.scan()}: Scan a GUI XML file (or  \texttt{R} object) and generate JavaScript code
		(define all relevant variables)
	\item  \texttt{rk.JS.saveobj()}: Scan a GUI XML file (or  \texttt{R} object) and generate JavaScript code
		(save result objects)
	\item  \texttt{rk.JS.doc()}: Combine JavaScript parts into one plugin JavaScript file object
	\item  \texttt{rk.rkh.scan()}: Scan a GUI XML file (or  \texttt{R} object) and generate a help page skeleton
	\item  \texttt{rk.rkh.doc()}: Combine XML objects into one help page object
	\item  \texttt{rk.testsuite.doc()}: Paste a testsuite skeleton
	\item  \texttt{rk.XML.pluginmap()}: Combine XML objects into one plugin map object
	\item  \texttt{rk.plugin.skeleton()}: Generate actual plugin files from the plugin GUI, JavaScript, help page,
		testsuite and plugin map objects (i.\,e., put all of the above together)
	\item  \texttt{rk.build.plugin()}: Compress the generated files into an installable  \texttt{R} package for
		distribution
\end{itemize}


%  \begin{Schunk}
%  	\begin{Sinput}
%  	\end{Sinput}
%  	\begin{Soutput}
%  	\end{Soutput}
%  \end{Schunk}

%  \bibliographystyle{apacite}
%  \addcontentsline{toc}{chapter}{\bibname}
%  \bibliography{rkwarddev_lit}

\end{document}
