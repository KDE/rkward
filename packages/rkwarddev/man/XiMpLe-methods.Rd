% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/01_methods_01_plugin2script.R
\docType{methods}
\name{plugin2script}
\alias{plugin2script}
\alias{plugin2script,XiMpLe.doc-method}
\alias{plugin2script,XiMpLe.node-method}
\alias{plugin2script,character-method}
\alias{plugin2script,connection-method}
\title{Generate script code from XML objects}
\usage{
plugin2script(obj)

\S4method{plugin2script}{XiMpLe.doc}(obj)

\S4method{plugin2script}{XiMpLe.node}(obj)

\S4method{plugin2script}{character}(obj)

\S4method{plugin2script}{connection}(obj)
}
\arguments{
\item{obj}{Either a character vector (path to a plugin XML file to parse), a connection,
      an already
parsed XML tree (class \code{XiMpLe.doc}) or a single \code{XiMpLe.node} object.}
}
\value{
Either a character vector (if \code{obj} is a single XML node)
   or a list of character vectors named \code{"logic"},
      \code{"dialog"} and \code{"wizard"}
   (if \code{obj} is a full XML document).
}
\description{
These methods try to translate plugin XML objects into \code{rkwarddev} function calls.
}
\details{
They are intended to make it easier to translate previously manually maintained plugin code
into \code{rkwarddev} scripts. The generated output should not be used as-is,
      but restructured
properly into a useful script.

You can either use a full XML document (read with \code{\link[XiMpLe:parseXMLTree]{parseXMLTree}})
or single (also nested) XiMpLe XML nodes. If you provide a character string,
      it is assumed to be
the full path to a document to be parsed with \code{parseXMLTree} and then analysed. Connections
are also accepted.
}
\note{
The methods might fail, especially with highly complex plugins. Try to break these
into sensible chunks and try those speparately. Sometimes,
      slightly changing the input file
might also do the trick to get some usable results.
}
\examples{
\dontrun{
# full XML document
myPlugin <- parseXMLTree("~/RKWardPlugins/myPlugin.xml")
rkwarddevScript <- plugin2script(myPlugin)
cat(rkwarddevScript)
}

# single XML node
(test.checkboxes <- rk.XML.row(
  rk.XML.col(
    list(
      rk.XML.cbox(label="foo", value="foo1", chk=TRUE),
      rk.XML.cbox(label="bar", value="bar2")
    )
  )
))
rkwarddevScript <- plugin2script(test.checkboxes)
#see the generated script code
cat(rkwarddevScript)

# we can evaluate the generated code to check whether original
# XML and the newly generated one are identical
eval(parse(text=rkwarddevScript))
identical(rkdev.row.row_clmndc1212, test.checkboxes)
}

