<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--- This file is part of the RKWard project (https://rkward.kde.org).
SPDX-FileCopyrightText: by Thomas Friedrichsmeier <thomas.friedrichsmeier@kdemail.net>
SPDX-FileCopyrightText: by P.Ecochard <rkward-devel@kde.org>
SPDX-FileCopyrightText: by Arne Hennigsen
SPDX-FileContributor: The RKWard Team <rkward-devel@kde.org>
SPDX-License-Identifier: GPL-2.0-or-later
-->
<!-- Kate 2.0 (KDE 3.0) highlighting module for RKWard
	version 2.0: (c) 2006 P. Ecochard
	lincense: GPL v2
	Based on the highlighting module for R version 2.0: (c) 2006 Thomas Friedrichsmeier, Arne Henningsen, and the RKWard Team
	
	Kate   : http://kate.kde.org/
	R      : http://www.r-project.org/
	RKWard : https://rkward.kde.org/
	-->
<!--- This file is part of the RKWard project (https://rkward.kde.org).
SPDX-FileCopyrightText: by Thomas Friedrichsmeier <thomas.friedrichsmeier@kdemail.net>
SPDX-FileCopyrightText: by P.Ecochard <rkward-devel@kde.org>
SPDX-FileCopyrightText: by Arne Hennigsen
SPDX-FileContributor: The RKWard Team <rkward-devel@kde.org>
SPDX-License-Identifier: GPL-2.0-or-later
-->
<language version="10" kateversion="2.5" name="R interactive session" section="Scripts" extensions="" mimetype="" author="P. Ecochard" license="GPL">
<highlighting>

	<list name="controls">
		<item>for</item>
		<item>in</item>
		<item>next</item>
		<item>break</item>
		<item>while</item>
		<item>repeat</item>
		<item>if</item>
		<item>else</item>
		<item>switch</item>
		<item>function</item>
	</list>
	<list name="words">
		<item>TRUE</item>
		<item>FALSE</item>
		<item>NULL</item>
		<item>NA</item>
		<item>NA_integer_</item>
		<item>NA_real_</item>
		<item>NA_complex_</item>
		<item>NA_character_</item>
		<item>Inf</item>
		<item>NaN</item>
	</list>

	<contexts>
		<!-- This context dispatches to the two main contexts output or command. -->
		<context attribute="Prompt" lineEndContext="#stay" name="ctxbase">
			<Detect2Chars attribute="Prompt" context="command0" char="&gt;" char1=" " column="0" beginRegion="commandRegion"/>
			<RegExpr attribute="Normal Text" context="output" String="^([^&gt;\+]|$)" lookAhead="true"/>
		</context>
		
		<!-- ################ OUTPUT ######################### --> 

		<!-- Default is output context: if a "> " is encountered at line start, pop back to ctxbase (and to command0 from there) --> 
		<context attribute="Output" lineEndContext="#stay" name="output">
			<Detect2Chars attribute="Prompt" context="#pop" char="&gt;" char1=" " column="0" lookAhead="true" endRegion="commandRegion"/>
			<Detect2Chars attribute="Prompt" context="#pop" char="+" char1=" " column="0" lookAhead="true" endRegion="commandRegion"/>
			<IncludeRules context="OutputContinuationCheck"/>
			<IncludeRules context="OutputRules"/>
		</context>
		
		<!-- Output full-line contexts like "headline" and "comments"... -->
		<context attribute="Output Headline" lineEndContext="#pop" name="Output Headline">
		</context>
		<context attribute="Output Comment" lineEndContext="#pop" name="Output Comment">
		</context>
		<context attribute="Output Success" lineEndContext="#pop" name="Output Success">
		</context>
		<context attribute="Output Failure" lineEndContext="#pop" name="Output Failure">
		</context>
		<context attribute="Output Warning" lineEndContext="#pop" name="Output Warning">
		</context>
		<context attribute="Output Information" lineEndContext="#pop" name="Output Information">
		</context>
		<context attribute="Output Error" lineEndContext="#pop" name="Output Error">
		</context>
		
		<!-- Common type highlight -->
		<context name="outputcommontype">
			<!-- Floats are hard to catch in R Output -->
			<RegExpr attribute="Output Float" context="#stay" String="(?&lt;=&lt;|&gt;|\(|\[| |^)-?([1-9][0-9]*|0)(\.[0-9]*)?i?(e[-+]?[ ]{0,3}[0-9]+)?(?![0-9a-zA-Z/_\~\-\]+]|[.,;:][^ \t])"/>
			<WordDetect attribute="Output NA" context="#stay" String="NA"/>
			<WordDetect attribute="Output True" context="#stay" String="TRUE"/>
			<WordDetect attribute="Output False" context="#stay" String="FALSE"/>
		</context>
		
		<!-- Special context for tibble output -->
		<context lineEndContext="#stay" name="outputtibble">
			<!-- If a "> " is encountered at line start, pop back to ctxbase (and to command0 from there) -->
			<Detect2Chars attribute="Prompt" context="#pop" char="&gt;" char1=" " column="0" lookAhead="true" endRegion="commandRegion"/>
			<Detect2Chars attribute="Prompt" context="#pop" char="+" char1=" " column="0" lookAhead="true" endRegion="commandRegion"/>
			
			<!-- If a "# " is encountered at line start, pop back to output context -->
			<StringDetect attribute="Prompt" context="#pop" String="# …" column="0" lookAhead="true" endRegion="commandRegion"/>
			
			<!-- Tibble special highlights -->
			<DetectChar attribute="Output Comment" context="Output Comment" char="#" column="0"/>
			<RegExpr attribute="Output Data Type" context="#stay" String="&lt;(lgl|int|dbl|chr|cpl|raw|list|named list|fct|ord|date|dttm|drtn|time|int64|blob|df\[\,1\]|tibble\[\,1\]|I|\?\?\?|list&lt;.+&gt;|vctrs_vc|prtl_fctr|prtl|fn|sym|expression|quos)&gt;"/>
			<RegExpr attribute="Output Index" context="#stay" String="[ ]{0,2}[0-9]+" column="0"/>
			<!-- Common highlights -->
			<IncludeRules context="outputcommontype"/>
		</context>
		
		<!-- Special context for str_view() -->
		<context lineEndContext="#pop" name="outputstrview">
			<IncludeRules context="OutputContinuationCheck"/>
			<RegExpr attribute="Output Index" context="#stay" String="\[[0-9]+\]" firstNonSpace="true"/>
			<RegExpr attribute="Output StrView Highlight" context="#stay" String="[&lt;][^&gt;]+[&gt;]"/>
		</context>
		
		<!-- String context is not highlighted in itself, but used to suppress other highlights (e.g. "1") -->
		<context attribute="Output String" name="outputstring">
			<IncludeRules context="OutputContinuationCheck"/>
			<DetectChar attribute="Output String" context="#pop" char="&quot;"/>
			<HlCStringChar attribute="Output String Char" context="#stay"/>
		</context>
		
		<!-- Some special rules for highlights -->
		<context name="OutputRules" attribute="Output" >
			<!-- Strings = no highlights -->
			<DetectChar attribute="Output String" context="outputstring" char="&quot;"/>
			<RegExpr attribute="Output StrView Index" context="outputstrview" String="([ ]*\[[0-9]+\] )?│" firstNonSpace="true"/>
			
			<!-- Tibble = special highlights -->
			<RegExpr attribute="Output Comment" context="outputtibble" String="# A tibble: .*$"/>
			
			<!-- Full-line highlights (see above) -->
			<Detect2Chars attribute="Output Headline" context="Output Headline" char="#" char1="#" column="0"/>
			<Detect2Chars attribute="Output Headline" context="Output Headline" char="─" char1="─" column="0"/>
			<DetectChar attribute="Output Success" context="Output Success" char="✔" column="0" firstNonSpace="true"/>
			<DetectChar attribute="Output Failure" context="Output Failure" char="✖" column="0" firstNonSpace="true"/>
			<StringDetect attribute="Output Error" context="Output Error" String="Error" column="0" firstNonSpace="true"/>
			<DetectChar attribute="Output Warning" context="Output Warning" char="!" column="0" firstNonSpace="true"/>
			<DetectChar attribute="Output Information" context="Output Information" char="ℹ" column="0" firstNonSpace="true"/>
			<StringDetect attribute="Output Information" context="Output Information" String="# ℹ" column="0"/>
			<DetectChar attribute="Output Comment" context="Output Comment" char="#" column="0"/>
			
			<!-- Other specials highlights -->
			<RegExpr attribute="Output Index" context="#stay" String="([ ]{0,2}|[ ]*\[)[0-9]+,?[0-9]*(\]|\: )(?![.0-9]|.*[:,.;]$)" column="0"/>
			<RegExpr attribute="Output Index" context="#stay" String="([ ]+\[,[1-9]+[0-9]*\])+$" column="0"/>
			<!-- Common highlights -->
			<IncludeRules context="outputcommontype"/>
		</context>
		
		<!-- This context is not really used, but meant to be included. It checks whether a new line is a continuation of a command. If so, it eats the "+ " at the line start. Else it tries to pop back to the top level. (NOTE: An output line starting with "+" will be considered a command line!) -->
		<context attribute="Output" name="OutputContinuationCheck" lineEndContext="#stay">
			<!-- Since this rule is included in every (relevant) context, this will unwind the entire context stack back to ctxbase. -->
			<Detect2Chars attribute="Prompt" context="#pop" char="&gt;" char1=" " column="0" lookAhead="true" endRegion="commandRegion"/>
			<!-- See above -->
			<Detect2Chars attribute="Prompt" context="#stay" char="&gt;" char1=" " column="0" lookAhead="true"/>
			<Detect2Chars attribute="Prompt" context="#stay" char="+" char1=" " column="0"/>
		</context>
		
		<!-- ################ COMMAND ######################### --> 

		<!-- The base level context in command mode. Does not allow closing '}' -->
		<context attribute="Normal Text" lineEndContext="#stay" name="command0">
			<IncludeRules context="CommandContinuationCheck"/>
			<IncludeRules context="CommonRules"/>
			<DetectChar attribute="Error" context="#stay" char="}" />
			<DetectChar attribute="Error" context="#stay" char=")"/>
		</context>
		
		<!-- A nested context in command mode. Closing '}' pops a level -->
		<context attribute="Normal Text" lineEndContext="#stay" name="command">
			<IncludeRules context="CommandContinuationCheck"/>
			<IncludeRules context="CommonRules"/>
			<DetectChar attribute="Symbol" context="#pop" char="}" />
			<DetectChar attribute="Error" context="#stay" char=")"/>
		</context>

		<context attribute="Normal Text" lineEndContext="#stay" name="parenthesis">
			<IncludeRules context="CommandContinuationCheck"/>
			<DetectChar attribute="Symbol" context="#pop" char=")"/>
			
			<RegExpr attribute="Identifier" context="#stay" String="[a-zA-Z_\.][0-9a-zA-Z_\.]*[\s]*=(?=([^=]|$))"/>
			<IncludeRules context="CommonRules"/>
			<DetectChar attribute="Error" context="#stay" char="}" />
		</context>

		<context attribute="String" lineEndContext="#stay" name="string">
			<IncludeRules context="CommandContinuationCheck"/>
			<DetectChar attribute="String" context="#pop" char="&quot;"/>
			<HlCStringChar attribute="String Char" context="#stay"/>
		</context>

		<context attribute="String" lineEndContext="#stay" name="string2">
			<IncludeRules context="CommandContinuationCheck"/>
			<DetectChar attribute="String" context="#pop" char="'"/>
			<HlCStringChar attribute="String Char" context="#stay"/>
		</context>

		<context attribute="Identifier" lineEndContext="#stay" name="backquotedsymbol">
			<IncludeRules context="CommandContinuationCheck"/>
			<DetectChar attribute="String" context="#pop" char="`"/>
			<HlCStringChar attribute="String Char" context="#stay"/>
		</context>

		<context attribute="Normal Text" lineEndContext="#stay" name="operator_rhs" fallthrough="true" fallthroughContext="#pop">
			<IncludeRules context="CommandContinuationCheck"/>
			<!-- While there is nothing of interest, stay in the context -->
			<StringDetect attribute="Headline" context="Headline" String="##"/>
			<DetectChar attribute="Comment" context="Comment" char="#"/>
			<DetectChar attribute="String" context="#stay" char=" "/>
			<!-- Operators other than +, -, and ! directly after another operator are an error. -->
			<RegExpr attribute="Error" context="#stay" String="(\*|/|&lt;|&gt;|\!=|=|\||&amp;|:|\^|@|\$|~)"/>
		</context>

		<context attribute="Headline" lineEndContext="#pop" name="Headline">
			<IncludeRules context="##Alerts" />
		</context>
		<context attribute="Comment" lineEndContext="#pop" name="Comment">
			<IncludeRules context="##Alerts" />
		</context>

		<!-- This context is not really used, but meant to be included. It checks whether a new line is a continuation of a command. If so, it eats the "+ " at the line start. Else it tries to pop back to the top level -->
		<context attribute="Normal Text" name="CommandContinuationCheck" lineEndContext="#stay">
			<!-- Since this rule is included in every (relevant) context, this will unwind the entire context stack back to ctxbase. -->
			<Detect2Chars attribute="Prompt" context="#pop" char="&gt;" char1=" " column="0" lookAhead="true" endRegion="commandRegion"/>
			<!-- See above -->
			<RegExpr attribute="Normal Text" context="output" String="^([^\+]|$)" lookAhead="true"/>
			<Detect2Chars attribute="Prompt" context="#stay" char="&gt;" char1=" " column="0" lookAhead="true"/>
			<Detect2Chars attribute="Prompt" context="#stay" char="+" char1=" " column="0"/>
		</context>

		<!-- This context is not really used, but contains the common rules -->
		<context name="CommonRules" lineEndContext="#stay" attribute="Normal Text" >
			<DetectChar attribute="String" context="string" char="&quot;"/>
			<DetectChar attribute="String" context="string2" char="'"/>
			<DetectChar attribute="String" context="backquotedsymbol" char="`"/>
			<keyword attribute="Control Structure" context="#stay" String="controls"/>
			<keyword attribute="Reserved Words" context="#stay" String="words"/>
			<!-- No need to distinguish Int and Float in R, but Float should include scientific notations -->
			<RegExpr attribute="Float" context="#stay" String="(\b[0-9]+\.?[0-9]*|\.[0-9]+)([eE][-+]?[0-9]+)?"/>
			<RegExpr attribute="Keyword" context="#stay" String="[a-zA-Z_]+[a-zA-Z_\.0-9]*(?=[\s]*[(])"/>
			<RegExpr attribute="Keyword" context="#stay" String="\.[a-zA-Z_\.]+[a-zA-Z_\.0-9]*(?=[\s]*[(])"/>
			<RegExpr attribute="Symbol" context="parenthesis" String="\("/>
			<StringDetect attribute="Headline" context="Headline" String="##"/>
			<DetectChar attribute="Comment" context="Comment" char="#"/>
			
			<!-- For (assignment) operators, enter a new context operator_rhs to check what follows (generally, that should not be another op) -->
			<RegExpr attribute="Assign" context="operator_rhs" String="[&lt;]{1,2}\-"/>
			<RegExpr attribute="Assign" context="operator_rhs" String="\-[&gt;]{1,2}"/>
			<RegExpr attribute="Assign" context="operator_rhs" String="=(?!=)"/>
			<RegExpr attribute="Operator" context="operator_rhs" String="(\+|\-|\*{1,2}|/|&lt;=?|&gt;=?|={1,2}|\!=?|\|[&gt;\|]?|&amp;{1,2}|:{1,3}|\^|@|\$|~)"/>
			<RegExpr attribute="Operator" context="operator_rhs" String="%[^%]*%"/>

			<!-- Contrary to the normal R Script highlighting, we don't start a region here, but we do go into a command sub-context -->
			<DetectChar attribute="Symbol" context="command" char="{" />
			
			<!-- This is needed only to assist variable based indentation -->
			<DetectChar attribute="Symbol" context="#stay" char="[" />
			<DetectChar attribute="Symbol" context="#stay" char="]" />
		</context>
	</contexts>

	<itemDatas>
		<!-- KDE default colors: http://accessibility.kde.org/oxygen.php?color=white -->
		<itemData name="Output" defStyleNum="dsOthers"/>
		<itemData name="Output String" defStyleNum="dsOthers"/>
		<itemData name="Output String Char" defStyleNum="dsOthers"/>
		<itemData name="Output Data Type"  defStyleNum="dsComment"/>
		<itemData name="Output Index"  defStyleNum="dsComment"/>
		<itemData name="Output Headline" defStyleNum="dsDocumentation" bold="1" italic="0"/>
		<itemData name="Output Comment" defStyleNum="dsComment"/>
		<itemData name="Output Float" defStyleNum="dsChar"/>
		<itemData name="Output Success"  defStyleNum="dsOthers" color="#00AA00" selColor="#00AA00"/>
		<itemData name="Output Error" defStyleNum="dsAlert"/>
		<itemData name="Output Failure" defStyleNum="dsWarning"/>
		<itemData name="Output Warning" defStyleNum="dsInformation"/>
		<itemData name="Output Information" defStyleNum="dsSpecialChar"/>
		<itemData name="Output NA" defStyleNum="dsSpecialString" />
		<itemData name="Output True" defStyleNum="dsSpecialString" color="#74bf77" selColor="#74bf77" bold="1"/>
		<itemData name="Output False" defStyleNum="dsSpecialString" color="#bf7374" selColor="#bf7374" bold="1"/>
		<itemData name="Output StrView Index" defStyleNum="dsComment"/>
		<itemData name="Output StrView Highlight" defStyleNum="dsSpecialChar"/>
		
		<itemData name="Prompt" defStyleNum="dsNormal"/>
		<itemData name="Normal Text" defStyleNum="dsNormal"/>
		<itemData name="Symbol" defStyleNum="dsNormal"/>
		<itemData name="Keyword" defStyleNum="dsKeyword"/>
		<itemData name="Identifier" defStyleNum="dsDataType"/>
		<itemData name="String" defStyleNum="dsString"/>
		<itemData name="Headline" defStyleNum="dsComment" color="#b00000" selColor="#b00000" bold="1" italic="0"/> <!-- KDE default color: text 5 -->
		<itemData name="Comment" defStyleNum="dsComment"/>
		<itemData name="Assign" defStyleNum="dsNormal" color="#336366" selColor="#ccc099" bold="1" italic="0"/> <!-- KDE default color: text 7 -->
		<itemData name="Control Structure" defStyleNum="dsControlFlow"/>
		<itemData name="Reserved Words" defStyleNum="dsOthers"/>
		<itemData name="Error" defStyleNum="dsError"/>
		<itemData name="Operator" defStyleNum="dsOperator"/>
		<itemData name="String Char"  defStyleNum="dsChar"/>
		<itemData name="Float" defStyleNum="dsFloat"/>
	</itemDatas>
</highlighting>

<general>
	<comments>
		<comment name="singleLine" start="#" end=""/>
	</comments>
	<keywords casesensitive="true" weakDeliminator="." additionalDeliminator="$"/>
</general>
</language>
