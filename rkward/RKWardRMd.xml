<snippets name="R Markdown (RKWard)" filetypes="R Markdown" authors="RKWard Team" namespace="SnippetsRmd" license="BSD">
  <script>require("range.js")
require("cursor.js")
require("document.js")
require("view.js")

function fileName() { return document.fileName(); }
function encoding() { return document.encoding(); }
function year() { return new Date().getFullYear(); }
function upper(x) { return x.toUpperCase(); }
function lower(x) { return x.toLowerCase(); }
function braces(text) { return "{" + text + "}"; }
function lineCommand(command, replaces="", label_if_empty="Heading") {
    let c = view.cursorPosition();
    // NOTE: snippet scripts work by 1. inserting the raw snippet as a raw "template" 2. evaluating any commands inside the template 3. replacing the template with the evaluated template. As a result, when this function gets called, it contains the call to itself...
    let line = document.line(c.line).replace(/\$\{lineCommand\s*\([^\}]*\}/g, "");
    line = line.replace(new RegExp(replaces), "");
    if (line == "") line = label_if_empty;
    else document.removeLine(c.line);
    return command + " " + line + "\n";
}

function rangeCommand(command, def) {
    if (view.selectedText().length > 0) {
        return command.replace("%%1", view.selectedText());
    } else {
        return command.replace("%%1", def);
    }
}
</script>
 <item>
  <match>Heading1</match>
  <fillin>${lineCommand("#", "^#+ ", "Heading")}</fillin>
 </item>
 <item>
  <match>Heading2</match>
  <fillin>${lineCommand("##", "^#+ ", "Heading")}</fillin>
 </item>
 <item>
  <match>Heading3</match>
  <fillin>${lineCommand("###", "^#+ ", "Heading")}</fillin>
 </item>
 <item>
  <match>List (Unordered)</match>
  <fillin>${rangeCommand("\n- A\n- B\n- C\n\n")}</fillin>
 </item>
 <item>
  <match>List (Ordered)</match>
  <fillin>${rangeCommand("\n1. A\n2. B\n3. C\n\n")}</fillin>
 </item>
 <item>
  <match>List (Unordered &amp; Nested)</match>
  <fillin>${rangeCommand("\n- A\n  - a\n- B\n  - b\n- C\n  - c\n\n")}</fillin>
 </item>
 <item>
  <match>Bold</match>
  <fillin>${rangeCommand("**%%1**", "Bold")}</fillin>
 </item>
 <item>
  <match>Italics</match>
  <fillin>${rangeCommand("*%%1*", "Italics")}</fillin>
 </item>
 <item>
  <match>Superscript</match>
  <fillin>${rangeCommand("\n$A^2^$\n")}</fillin>
 </item>
 <item>
  <match>Subscript</match>
  <fillin>${rangeCommand("\n$H~2~O$\n")}</fillin>
 </item>
 <item>
  <match>En dash</match>
  <fillin>--</fillin>
 </item>
 <item>
  <match>Em dash</match>
  <fillin>---</fillin>
 </item>
 <item>
  <match>Equation (inline)</match>
  <fillin>
$e^${braces("i\\pi")} + 1$
</fillin>
 </item>
 <item>
  <match>Equation (block)</match>
  <fillin>
$$e^${braces("i\\pi")} + 1$$
</fillin>
 </item>
 <item>
  <match>Strikethrough</match>
  <fillin>${rangeCommand("~~%%1~~", "Strikethrough")}</fillin>
 </item>
 <item>
  <match>Link</match>
  <fillin>${rangeCommand("(title)[%%1]", "URL")}</fillin>
 </item>
 <item>
  <match>rmarkdown::render()</match>
  <fillin>rmarkdown::render()</fillin>
 </item>
 <item>
  <match>Code (inline)</match>
  <fillin>${rangeCommand("`r %%1`", "paste(\"The sum of 1 to 1000 is\", sum(1L:1000))")}</fillin>
 </item>
  <item>
  <match>Code (simple chunk)</match>
  <fillin>${rangeCommand("\n```"+ braces("r") +" %%1```\n", "\nx &lt;- 1\n\n")}</fillin>
 </item>
 <item>
  <match>Quote</match>
  <fillin>${rangeCommand("> %%1", "Text")}</fillin>
 </item>
 <item>
  <match>Code (chunk with defaults)</match>
  <fillin>${rangeCommand("\n```"+ braces("r, echo = FALSE, eval = FALSE, fig.show = \"hide\", include = FALSE, message = FALSE, results = \"hide\", warning = FALSE") +" %%1```\n", "\nx &lt;- 1\n\n")}</fillin>
 </item>
 <item>
  <match>Table</match>
  <fillin>
| Right  | Left  | Default   | Center    |
|-------:|:------|-----------|:---------:|
| 12     | 12    | 12        | 12        |
| 123    | 123   | 123       | 123       |
| 1      | 1     | 1         | 1         |
  </fillin>
 </item>
 <item>
  <match>Table with caption</match>
  <fillin>
| Right  | Left  | Default   | Center    |
|-------:|:------|-----------|:---------:|
| 12     | 12    | 12        | 12        |
| 123    | 123   | 123       | 123       |
| 1      | 1     | 1         | 1         |
:Caption text
  </fillin>
 </item>
 <item>
  <match>Table (kable)</match>
  <fillin>
```{r}
data &lt;- iris[1:4, ]
knitr::kable(data, caption = "Table caption text.")
```
  </fillin>
 </item>
</snippets>
