/* ------- This file generated by php2js from PHP code. --------
Please check this file by hand, and remove this notice, afterwards.
Messages:
Warning: '$' inside '"'-delimited string. This might be a variable name. Please check by hand!
Warning: '$' inside '"'-delimited string. This might be a variable name. Please check by hand!
Warning: multiline comments are not handled! Check by hand!
Warning: '$' inside '"'-delimited string. This might be a variable name. Please check by hand!
Warning: '$' inside '"'-delimited string. This might be a variable name. Please check by hand!
Note: Control statement without braces. This is bad style.
Note: Control statement without braces. This is bad style.
Note: Control statement without braces. This is bad style.

---------------------------- */

// globals
var undefined;

function preprocess () {
	// we'll need the eRm package, so in case it's not loaded...

	echo ('  require(eRm)\n');
}


function printout () {
	doPrintout (true);
}

function preview () {
	preprocess ();
	calculate ();
	doPrintout (false);
}

function doPrintout (final) {
	var rad_splitcr = "";
	var splitvector = "";
	var inp_items = "";
	var chk_se = "";
	var chk_confint = "";
	var spin_confint = "";
	var chk_ctrline = "";
	var spin_ctrline = "";
	var spin_abilfrom = "";
	var spin_abilto = "";
	var annotation = "";
	var plot_options = "";
	var plot_ops_main = "";
	var plot_ops_type = "";
	var plot_ops_xlab = "";
	var plot_ops_ylab = "";
	var options_lrtest = "";
	var options_plotgof = "";
	var arr_items = "";
	var  = "";
	var options = "";
	// this function takes care of generating the code for the printout() section. If $final is set to true,
	// it generates the full code, including headers. If $final is set to false, only the essentials will
	// be generated.

	// let's read all values into php variables for the sake of readable code
	rad_splitcr      = getValue("rad_splitcr");
	splitvector      = getValue("splitvector");
	inp_items        = getValue("inp_items");
	chk_se           = getValue("chk_se");
	chk_confint      = getValue("chk_confint");
	spin_confint     = getValue("spin_confint");
	chk_ctrline      = getValue("chk_ctrline");
	spin_ctrline     = getValue("spin_ctrline");
	spin_abilfrom    = getValue("spin_abilfrom");
	spin_abilto      = getValue("spin_abilto");
	annotation       = getValue("annotation");

	// in case there are generic plot options defined:
	plot_options     = getValue("plotoptions.code.printout");
	plot_ops_main    = getValue("plotoptions.main");
	plot_ops_type    = getValue("plotoptions.pointtype");
	plot_ops_xlab    = getValue("plotoptions.xlab");
	plot_ops_ylab    = getValue("plotoptions.ylab");

	///////////////////////////////////
	// check for selected options
	// these two arrays will contain the options for the two functions that will be called:
	options_lrtest = new Array) ;
	options_plotgof = new Array) ;
	// plot all items?
	if (inp_items) {
	// for user convenience, we replace "-", ";" and space, split all input into an array
	// and join it again, separated by commas:
	inp_items = str_replace("-",":",inp_items);
		arr_items = split('[ ;]', inp_items);
		options_plotgof[] = "beta.subset=c("+join(",", arr_items)+")";
	}
	if (rad_splitcr == "mean" || rad_splitcr == "all.r")
	options_lrtest[] = "splitcr=\"$rad_splitcr\"";
	                   if (rad_splitcr == "vector")
		                   options_lrtest[] = "splitcr=$splitvector";
		                                      if (chk_se == "se")
			                                      options_lrtest[] = "se=TRUE";
			if (chk_confint == "conf") {
				if (spin_confint != "0.95")
						options_plotgof[] = "conf=list(gamma="+round(spin_confint,2)+", col=\"red\", lty=\"dashed\", ia=FALSE)";
					else
						options_plotgof[] = "conf=list()";
				}
	if (chk_ctrline == "ctrline") {
	if (spin_ctrline != "0.95")
			options_plotgof[] = "ctrline=list(gamma="+round(spin_ctrline,2)+", col=\"blue\", lty=\"solid\")";
		else
			options_plotgof[] = "ctrline=list()";
	}

	/*
	  if( == "")
	    options[] = "=list(\"$\")" ;
	*/

	// more advanced options
	// user defined ranges? we'll round it to two digits
	if ((spin_abilfrom != "-3" || spin_abilto != "3") && spin_abilfrom < spin_abilto)
	options_plotgof[] = "xlim=c("+round(spin_abilfrom,2)+","+round(spin_abilto,2)+")" ;
	                    // annotate lines and show legend?
	                    if (annotation == "number" || annotation == "none" || annotation == "identify")
		                    options_plotgof[] = "tlab=\"$annotation\"" ;

		if (final) {
			echo ('rk.header("Andersen\'s LR test")\n');
				echo ('\n');
				echo ('rk.graph.on()\n');
			}
	// only the following section will be generated for $final==false


	echo ('lr.res <- LRtest(' + getValue("x"));
	if (options_lrtest) echo(", "+join(", ", options_lrtest));
	echo (')\n');
	echo ('try(plotGOF(lr.res');
	if (options_plotgof) echo(", "+join(", ", options_plotgof));
		if (plot_options) echo(plot_options);
			echo ('))\n');
			if (final) {
				echo ('rk.graph.off()\n');
				}
}
